let ppg_vpp = 3.2;
let ppg_bits = 16;
let ppg_adc_lsb = ppg_vpp/Math.pow(2, ppg_bits);
let ppg_tia_gain = 1;
let ppg_pga_gain = 1;
let ekg_vpp = 4;
let ekg_bits = 23;
let ekg_adc_lsb = ekg_vpp / Math.pow(2, ekg_bits);
let ekg_gain = 6;

var dao = require('../dao/measurementsDao');
var async = require('async');

function filter(dataType, data) {
  let skipCount = {
    ECG: 64,
    PPG: 64
  };
  let LPF = {
    ECG: {
      order: 128,
      coeff: [0.001283, -0.000368, -0.002026, -0.003275, -0.003780, -0.003371, -0.002095, -0.000220, 0.001822, 0.003530,
        0.004458, 0.004328, 0.003108, 0.001038, -0.001417, -0.003668, -0.005140, -0.005419, -0.004359, -0.002142,
        0.000751, 0.003642, 0.005808, 0.006661, 0.005901, 0.003612, 0.000262, -0.003386, -0.006439, -0.008093,
        -0.007833, -0.005585, -0.001761, 0.002800, 0.007014, 0.009800, 0.010342, 0.008315, 0.004008, -0.001704,
        -0.007515, -0.011976, -0.013834, -0.012358, -0.007563, -0.000289, 0.007923, 0.015119, 0.019357, 0.019167,
        0.013956, 0.004260, -0.008225, -0.020863, -0.030513, -0.034113, -0.029309, -0.014982, 0.008411, 0.038781,
        0.072652, 0.105681, 0.133355, 0.151748, 0.158193, 0.151748, 0.133355, 0.105681, 0.072652, 0.038781,
        0.008411, -0.014982, -0.029309, -0.034113, -0.030513, -0.020863, -0.008225, 0.004260, 0.013956, 0.019167,
        0.019357, 0.015119, 0.007923, -0.000289, -0.007563, -0.012358, -0.013834, -0.011976, -0.007515, -0.001704,
        0.004008, 0.008315, 0.010342, 0.009800, 0.007014, 0.002800, -0.001761, -0.005585, -0.007833, -0.008093,
        -0.006439, -0.003386, 0.000262, 0.003612, 0.005901, 0.006661, 0.005808, 0.003642, 0.000751, -0.002142,
        -0.004359, -0.005419, -0.005140, -0.003668, -0.001417, 0.001038, 0.003108, 0.004328, 0.004458, 0.003530,
        0.001822, -0.000220, -0.002095, -0.003371, -0.003780, -0.003275, -0.002026, -0.000368, 0.001283]
    },
    PPG: {
      order: 128,
      coeff: [0.001860,0.002115,0.002348,0.002552,0.002718,0.002838,0.002904,0.002911,0.002851,0.002720,
        0.002515,0.002235,0.001878,0.001447,0.000945,0.000377,-0.000249,-0.000925,-0.001641,-0.002384,
        -0.003140,-0.003895,-0.004634,-0.005340,-0.005997,-0.006588,-0.007096,-0.007507,-0.007803,-0.007973,
        -0.008002,-0.007881,-0.007600,-0.007152,-0.006532,-0.005738,-0.004769,-0.003628,-0.002319,-0.000849,
        0.000773,0.002534,0.004424,0.006425,0.008521,0.010694,0.012926,0.015195,0.017482,0.019764,
        0.022021,0.024231,0.026374,0.028430,0.030378,0.032201,0.033882,0.035404,0.036753,0.037917,
        0.038885,0.039647,0.040196,0.040528,0.040639,0.040528,0.040196,0.039647,0.038885,0.037917,
        0.036753,0.035404,0.033882,0.032201,0.030378,0.028430,0.026374,0.024231,0.022021,0.019764,
        0.017482,0.015195,0.012926,0.010694,0.008521,0.006425,0.004424,0.002534,0.000773,-0.000849,
        -0.002319,-0.003628,-0.004769,-0.005738,-0.006532,-0.007152,-0.007600,-0.007881,-0.008002,-0.007973,
        -0.007803,-0.007507,-0.007096,-0.006588,-0.005997,-0.005340,-0.004634,-0.003895,-0.003140,-0.002384,
        -0.001641,-0.000925,-0.000249,0.000377,0.000945,0.001447,0.001878,0.002235,0.002515,0.002720,
        0.002851, 0.002911, 0.002904, 0.002838, 0.002718, 0.002552, 0.002348, 0.002115, 0.001860]
    }
  };
  if(dataType.localeCompare('PPG1') === 0 || dataType.localeCompare('PPG2') === 0) {
    dataType = 'PPG';
  }
  if(!Object.keys(skipCount).includes(dataType)) {
    return [];
  }
  if(data.length <= skipCount[dataType]) {
    return data;
  }
  var filtered = [];
  var f4EcgBuf = [];
  for(var i = 0; i < LPF[dataType].order; i++) {
    f4EcgBuf[i] = 0;
  }
  var f4EcgDc = data[skipCount[dataType]];
  for(var i = 0; i < skipCount[dataType]; i++) {
    filtered[i] = 0;
  }
  var i4EcgBufIndex = 0;
  for(var i = skipCount[dataType]; i < data.length; i++) {
    if(dataType.localeCompare('PPG') === 0) {
      data[i] = data[i] * -1;
    }
    f4EcgDc += (data[i] - f4EcgDc) / 32;
    f4EcgBuf[i4EcgBufIndex % LPF[dataType].order] = data[i] - f4EcgDc;
    var varLPF = 0;
    for(var idx = 0; idx < LPF[dataType].order; idx++) {
      varLPF += LPF[dataType].coeff[idx] * f4EcgBuf[(i4EcgBufIndex + idx) % LPF[dataType].order];
    }
    i4EcgBufIndex = (i4EcgBufIndex + 1) % LPF[dataType].order;
    filtered[i] = varLPF;
  }
  return filtered;
}

function standardDeviation(numArr) {
  var avg = average(numArr);

  var squareDiffs = numArr.map(function(value) {
    var diff = value - avg;
    var sqrDiff = diff * diff;
    return sqrDiff;
  });

  var avgSquareDiff = average(squareDiffs);
  var stdDev = Math.sqrt(avgSquareDiff);
  return stdDev;
}

function average(numArr) {
  var sum = numArr.reduce(function(sum, value){
    return sum + value;
  }, 0);

  var avg = sum / numArr.length;
  return avg;
}

module.exports = {
};
