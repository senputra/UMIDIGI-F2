

inline EGLDisplay fast_call_chain_caller_eglGetDisplay (NativeDisplayType _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetDisplay)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetDisplay)] = chain_next->next;
    return ((MEOW_fp_eglGetDisplay) (chain_next->func)) (_arg0);

}



inline EGLBoolean fast_call_chain_caller_eglInitialize (EGLDisplay _arg0, EGLint* _arg1, EGLint* _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglInitialize)];
    chain->chain_next.chain[MEOW_API_INDEX(eglInitialize)] = chain_next->next;
    return ((MEOW_fp_eglInitialize) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglTerminate (EGLDisplay _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglTerminate)];
    chain->chain_next.chain[MEOW_API_INDEX(eglTerminate)] = chain_next->next;
    return ((MEOW_fp_eglTerminate) (chain_next->func)) (_arg0);

}



inline EGLBoolean fast_call_chain_caller_eglGetConfigs (EGLDisplay _arg0, EGLConfig* _arg1, EGLint _arg2, EGLint* _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetConfigs)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetConfigs)] = chain_next->next;
    return ((MEOW_fp_eglGetConfigs) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglChooseConfig (EGLDisplay _arg0, const EGLint * _arg1, EGLConfig * _arg2, EGLint _arg3, EGLint * _arg4)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglChooseConfig)];
    chain->chain_next.chain[MEOW_API_INDEX(eglChooseConfig)] = chain_next->next;
    return ((MEOW_fp_eglChooseConfig) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3, _arg4);

}



inline EGLBoolean fast_call_chain_caller_eglGetConfigAttrib (EGLDisplay _arg0, EGLConfig _arg1, EGLint _arg2, EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetConfigAttrib)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetConfigAttrib)] = chain_next->next;
    return ((MEOW_fp_eglGetConfigAttrib) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLSurface fast_call_chain_caller_eglCreateWindowSurface (EGLDisplay _arg0, EGLConfig _arg1, NativeWindowType _arg2, const EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateWindowSurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateWindowSurface)] = chain_next->next;
    return ((MEOW_fp_eglCreateWindowSurface) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLSurface fast_call_chain_caller_eglCreatePixmapSurface (EGLDisplay _arg0, EGLConfig _arg1, NativePixmapType _arg2, const EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreatePixmapSurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreatePixmapSurface)] = chain_next->next;
    return ((MEOW_fp_eglCreatePixmapSurface) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLSurface fast_call_chain_caller_eglCreatePbufferSurface (EGLDisplay _arg0, EGLConfig _arg1, const EGLint * _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreatePbufferSurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreatePbufferSurface)] = chain_next->next;
    return ((MEOW_fp_eglCreatePbufferSurface) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglDestroySurface (EGLDisplay _arg0, EGLSurface _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDestroySurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDestroySurface)] = chain_next->next;
    return ((MEOW_fp_eglDestroySurface) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglQuerySurface (EGLDisplay _arg0, EGLSurface _arg1, EGLint _arg2, EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglQuerySurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglQuerySurface)] = chain_next->next;
    return ((MEOW_fp_eglQuerySurface) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLContext fast_call_chain_caller_eglCreateContext (EGLDisplay _arg0, EGLConfig _arg1, EGLContext _arg2, const EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateContext)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateContext)] = chain_next->next;
    return ((MEOW_fp_eglCreateContext) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglDestroyContext (EGLDisplay _arg0, EGLContext _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDestroyContext)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDestroyContext)] = chain_next->next;
    return ((MEOW_fp_eglDestroyContext) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglMakeCurrent (EGLDisplay _arg0, EGLSurface _arg1, EGLSurface _arg2, EGLContext _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglMakeCurrent)];
    chain->chain_next.chain[MEOW_API_INDEX(eglMakeCurrent)] = chain_next->next;
    return ((MEOW_fp_eglMakeCurrent) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLContext fast_call_chain_caller_eglGetCurrentContext (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetCurrentContext)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetCurrentContext)] = chain_next->next;
    return ((MEOW_fp_eglGetCurrentContext) (chain_next->func)) ();

}



inline EGLSurface fast_call_chain_caller_eglGetCurrentSurface (EGLint _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetCurrentSurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetCurrentSurface)] = chain_next->next;
    return ((MEOW_fp_eglGetCurrentSurface) (chain_next->func)) (_arg0);

}



inline EGLDisplay fast_call_chain_caller_eglGetCurrentDisplay (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetCurrentDisplay)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetCurrentDisplay)] = chain_next->next;
    return ((MEOW_fp_eglGetCurrentDisplay) (chain_next->func)) ();

}



inline EGLBoolean fast_call_chain_caller_eglQueryContext (EGLDisplay _arg0, EGLContext _arg1, EGLint _arg2, EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglQueryContext)];
    chain->chain_next.chain[MEOW_API_INDEX(eglQueryContext)] = chain_next->next;
    return ((MEOW_fp_eglQueryContext) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglWaitGL (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglWaitGL)];
    chain->chain_next.chain[MEOW_API_INDEX(eglWaitGL)] = chain_next->next;
    return ((MEOW_fp_eglWaitGL) (chain_next->func)) ();

}



inline EGLBoolean fast_call_chain_caller_eglWaitNative (EGLint _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglWaitNative)];
    chain->chain_next.chain[MEOW_API_INDEX(eglWaitNative)] = chain_next->next;
    return ((MEOW_fp_eglWaitNative) (chain_next->func)) (_arg0);

}



inline EGLBoolean fast_call_chain_caller_eglSwapBuffers (EGLDisplay _arg0, EGLSurface _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSwapBuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSwapBuffers)] = chain_next->next;
    return ((MEOW_fp_eglSwapBuffers) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglCopyBuffers (EGLDisplay _arg0, EGLSurface _arg1, NativePixmapType _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCopyBuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCopyBuffers)] = chain_next->next;
    return ((MEOW_fp_eglCopyBuffers) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLint fast_call_chain_caller_eglGetError (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetError)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetError)] = chain_next->next;
    return ((MEOW_fp_eglGetError) (chain_next->func)) ();

}



inline const char* fast_call_chain_caller_eglQueryString (EGLDisplay _arg0, EGLint _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglQueryString)];
    chain->chain_next.chain[MEOW_API_INDEX(eglQueryString)] = chain_next->next;
    return ((MEOW_fp_eglQueryString) (chain_next->func)) (_arg0, _arg1);

}



inline __eglMustCastToProperFunctionPointerType fast_call_chain_caller_eglGetProcAddress (const char * _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetProcAddress)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetProcAddress)] = chain_next->next;
    return ((MEOW_fp_eglGetProcAddress) (chain_next->func)) (_arg0);

}



inline EGLBoolean fast_call_chain_caller_eglSurfaceAttrib (EGLDisplay _arg0, EGLSurface _arg1, EGLint _arg2, EGLint _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSurfaceAttrib)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSurfaceAttrib)] = chain_next->next;
    return ((MEOW_fp_eglSurfaceAttrib) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglBindTexImage (EGLDisplay _arg0, EGLSurface _arg1, EGLint _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglBindTexImage)];
    chain->chain_next.chain[MEOW_API_INDEX(eglBindTexImage)] = chain_next->next;
    return ((MEOW_fp_eglBindTexImage) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglReleaseTexImage (EGLDisplay _arg0, EGLSurface _arg1, EGLint _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglReleaseTexImage)];
    chain->chain_next.chain[MEOW_API_INDEX(eglReleaseTexImage)] = chain_next->next;
    return ((MEOW_fp_eglReleaseTexImage) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglSwapInterval (EGLDisplay _arg0, EGLint _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSwapInterval)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSwapInterval)] = chain_next->next;
    return ((MEOW_fp_eglSwapInterval) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglBindAPI (EGLenum _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglBindAPI)];
    chain->chain_next.chain[MEOW_API_INDEX(eglBindAPI)] = chain_next->next;
    return ((MEOW_fp_eglBindAPI) (chain_next->func)) (_arg0);

}



inline EGLenum fast_call_chain_caller_eglQueryAPI (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglQueryAPI)];
    chain->chain_next.chain[MEOW_API_INDEX(eglQueryAPI)] = chain_next->next;
    return ((MEOW_fp_eglQueryAPI) (chain_next->func)) ();

}



inline EGLBoolean fast_call_chain_caller_eglWaitClient (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglWaitClient)];
    chain->chain_next.chain[MEOW_API_INDEX(eglWaitClient)] = chain_next->next;
    return ((MEOW_fp_eglWaitClient) (chain_next->func)) ();

}



inline EGLBoolean fast_call_chain_caller_eglReleaseThread (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglReleaseThread)];
    chain->chain_next.chain[MEOW_API_INDEX(eglReleaseThread)] = chain_next->next;
    return ((MEOW_fp_eglReleaseThread) (chain_next->func)) ();

}



inline EGLSurface fast_call_chain_caller_eglCreatePbufferFromClientBuffer (EGLDisplay _arg0, EGLenum _arg1, EGLClientBuffer _arg2, EGLConfig _arg3, const EGLint * _arg4)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreatePbufferFromClientBuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreatePbufferFromClientBuffer)] = chain_next->next;
    return ((MEOW_fp_eglCreatePbufferFromClientBuffer) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3, _arg4);

}



inline EGLImageKHR fast_call_chain_caller_eglCreateImage (EGLDisplay _arg0, EGLContext _arg1, EGLenum _arg2, EGLClientBuffer _arg3, const EGLAttrib * _arg4)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateImage)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateImage)] = chain_next->next;
    return ((MEOW_fp_eglCreateImage) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3, _arg4);

}



inline EGLBoolean fast_call_chain_caller_eglDestroyImage (EGLDisplay _arg0, EGLImageKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDestroyImage)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDestroyImage)] = chain_next->next;
    return ((MEOW_fp_eglDestroyImage) (chain_next->func)) (_arg0, _arg1);

}



inline EGLDisplay fast_call_chain_caller_eglGetPlatformDisplay (EGLenum _arg0, void * _arg1, const EGLAttrib * _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetPlatformDisplay)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetPlatformDisplay)] = chain_next->next;
    return ((MEOW_fp_eglGetPlatformDisplay) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLSurface fast_call_chain_caller_eglCreatePlatformWindowSurface (EGLDisplay _arg0, EGLConfig _arg1, void * _arg2, const EGLAttrib * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformWindowSurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformWindowSurface)] = chain_next->next;
    return ((MEOW_fp_eglCreatePlatformWindowSurface) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLSurface fast_call_chain_caller_eglCreatePlatformPixmapSurface (EGLDisplay _arg0, EGLConfig _arg1, void * _arg2, const EGLAttrib * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformPixmapSurface)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformPixmapSurface)] = chain_next->next;
    return ((MEOW_fp_eglCreatePlatformPixmapSurface) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLSyncKHR fast_call_chain_caller_eglCreateSync (EGLDisplay _arg0, EGLenum _arg1, const EGLAttrib * _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateSync)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateSync)] = chain_next->next;
    return ((MEOW_fp_eglCreateSync) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglDestroySync (EGLDisplay _arg0, EGLSyncKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDestroySync)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDestroySync)] = chain_next->next;
    return ((MEOW_fp_eglDestroySync) (chain_next->func)) (_arg0, _arg1);

}



inline EGLint fast_call_chain_caller_eglClientWaitSync (EGLDisplay _arg0, EGLSyncKHR _arg1, EGLint _arg2, EGLTimeKHR _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglClientWaitSync)];
    chain->chain_next.chain[MEOW_API_INDEX(eglClientWaitSync)] = chain_next->next;
    return ((MEOW_fp_eglClientWaitSync) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglGetSyncAttrib (EGLDisplay _arg0, EGLSyncKHR _arg1, EGLint _arg2, EGLAttrib * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetSyncAttrib)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetSyncAttrib)] = chain_next->next;
    return ((MEOW_fp_eglGetSyncAttrib) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglWaitSync (EGLDisplay _arg0, EGLSyncKHR _arg1, EGLint _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglWaitSync)];
    chain->chain_next.chain[MEOW_API_INDEX(eglWaitSync)] = chain_next->next;
    return ((MEOW_fp_eglWaitSync) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglLockSurfaceKHR (EGLDisplay _arg0, EGLSurface _arg1, const EGLint * _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglLockSurfaceKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglLockSurfaceKHR)] = chain_next->next;
    return ((MEOW_fp_eglLockSurfaceKHR) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglUnlockSurfaceKHR (EGLDisplay _arg0, EGLSurface _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglUnlockSurfaceKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglUnlockSurfaceKHR)] = chain_next->next;
    return ((MEOW_fp_eglUnlockSurfaceKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLImageKHR fast_call_chain_caller_eglCreateImageKHR (EGLDisplay _arg0, EGLContext _arg1, EGLenum _arg2, EGLClientBuffer _arg3, const EGLint * _arg4)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateImageKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateImageKHR)] = chain_next->next;
    return ((MEOW_fp_eglCreateImageKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3, _arg4);

}



inline EGLBoolean fast_call_chain_caller_eglDestroyImageKHR (EGLDisplay _arg0, EGLImageKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDestroyImageKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDestroyImageKHR)] = chain_next->next;
    return ((MEOW_fp_eglDestroyImageKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLSyncKHR fast_call_chain_caller_eglCreateSyncKHR (EGLDisplay _arg0, EGLenum _arg1, const EGLint * _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateSyncKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateSyncKHR)] = chain_next->next;
    return ((MEOW_fp_eglCreateSyncKHR) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglDestroySyncKHR (EGLDisplay _arg0, EGLSyncKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDestroySyncKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDestroySyncKHR)] = chain_next->next;
    return ((MEOW_fp_eglDestroySyncKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLint fast_call_chain_caller_eglClientWaitSyncKHR (EGLDisplay _arg0, EGLSyncKHR _arg1, EGLint _arg2, EGLTimeKHR _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglClientWaitSyncKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglClientWaitSyncKHR)] = chain_next->next;
    return ((MEOW_fp_eglClientWaitSyncKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglSignalSyncKHR (EGLDisplay _arg0, EGLSyncKHR _arg1, EGLenum _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSignalSyncKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSignalSyncKHR)] = chain_next->next;
    return ((MEOW_fp_eglSignalSyncKHR) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLBoolean fast_call_chain_caller_eglGetSyncAttribKHR (EGLDisplay _arg0, EGLSyncKHR _arg1, EGLint _arg2, EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetSyncAttribKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetSyncAttribKHR)] = chain_next->next;
    return ((MEOW_fp_eglGetSyncAttribKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLStreamKHR fast_call_chain_caller_eglCreateStreamKHR (EGLDisplay _arg0, const EGLint * _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateStreamKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateStreamKHR)] = chain_next->next;
    return ((MEOW_fp_eglCreateStreamKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglDestroyStreamKHR (EGLDisplay _arg0, EGLStreamKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDestroyStreamKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDestroyStreamKHR)] = chain_next->next;
    return ((MEOW_fp_eglDestroyStreamKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglStreamAttribKHR (EGLDisplay _arg0, EGLStreamKHR _arg1, EGLenum _arg2, EGLint _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglStreamAttribKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglStreamAttribKHR)] = chain_next->next;
    return ((MEOW_fp_eglStreamAttribKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglQueryStreamKHR (EGLDisplay _arg0, EGLStreamKHR _arg1, EGLenum _arg2, EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglQueryStreamKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglQueryStreamKHR)] = chain_next->next;
    return ((MEOW_fp_eglQueryStreamKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglQueryStreamu64KHR (EGLDisplay _arg0, EGLStreamKHR _arg1, EGLenum _arg2, EGLuint64KHR * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglQueryStreamu64KHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglQueryStreamu64KHR)] = chain_next->next;
    return ((MEOW_fp_eglQueryStreamu64KHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglStreamConsumerGLTextureExternalKHR (EGLDisplay _arg0, EGLStreamKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglStreamConsumerGLTextureExternalKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglStreamConsumerGLTextureExternalKHR)] = chain_next->next;
    return ((MEOW_fp_eglStreamConsumerGLTextureExternalKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglStreamConsumerAcquireKHR (EGLDisplay _arg0, EGLStreamKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglStreamConsumerAcquireKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglStreamConsumerAcquireKHR)] = chain_next->next;
    return ((MEOW_fp_eglStreamConsumerAcquireKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLBoolean fast_call_chain_caller_eglStreamConsumerReleaseKHR (EGLDisplay _arg0, EGLStreamKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglStreamConsumerReleaseKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglStreamConsumerReleaseKHR)] = chain_next->next;
    return ((MEOW_fp_eglStreamConsumerReleaseKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLSurface fast_call_chain_caller_eglCreateStreamProducerSurfaceKHR (EGLDisplay _arg0, EGLConfig _arg1, EGLStreamKHR _arg2, const EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateStreamProducerSurfaceKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateStreamProducerSurfaceKHR)] = chain_next->next;
    return ((MEOW_fp_eglCreateStreamProducerSurfaceKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglQueryStreamTimeKHR (EGLDisplay _arg0, EGLStreamKHR _arg1, EGLenum _arg2, EGLTimeKHR* _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglQueryStreamTimeKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglQueryStreamTimeKHR)] = chain_next->next;
    return ((MEOW_fp_eglQueryStreamTimeKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLNativeFileDescriptorKHR fast_call_chain_caller_eglGetStreamFileDescriptorKHR (EGLDisplay _arg0, EGLStreamKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetStreamFileDescriptorKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetStreamFileDescriptorKHR)] = chain_next->next;
    return ((MEOW_fp_eglGetStreamFileDescriptorKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLStreamKHR fast_call_chain_caller_eglCreateStreamFromFileDescriptorKHR (EGLDisplay _arg0, EGLNativeFileDescriptorKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateStreamFromFileDescriptorKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateStreamFromFileDescriptorKHR)] = chain_next->next;
    return ((MEOW_fp_eglCreateStreamFromFileDescriptorKHR) (chain_next->func)) (_arg0, _arg1);

}



inline EGLint fast_call_chain_caller_eglWaitSyncKHR (EGLDisplay _arg0, EGLSyncKHR _arg1, EGLint _arg2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglWaitSyncKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglWaitSyncKHR)] = chain_next->next;
    return ((MEOW_fp_eglWaitSyncKHR) (chain_next->func)) (_arg0, _arg1, _arg2);

}



inline EGLSurface fast_call_chain_caller_eglCreatePlatformWindowSurfaceEXT (EGLDisplay _arg0, EGLConfig _arg1, void * _arg2, const EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformWindowSurfaceEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformWindowSurfaceEXT)] = chain_next->next;
    return ((MEOW_fp_eglCreatePlatformWindowSurfaceEXT) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLSurface fast_call_chain_caller_eglCreatePlatformPixmapSurfaceEXT (EGLDisplay _arg0, EGLConfig _arg1, void * _arg2, const EGLint * _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformPixmapSurfaceEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreatePlatformPixmapSurfaceEXT)] = chain_next->next;
    return ((MEOW_fp_eglCreatePlatformPixmapSurfaceEXT) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglSetSwapRectangleANDROID (EGLDisplay _arg0, EGLSurface _arg1, EGLint _arg2, EGLint _arg3, EGLint _arg4, EGLint _arg5)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSetSwapRectangleANDROID)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSetSwapRectangleANDROID)] = chain_next->next;
    return ((MEOW_fp_eglSetSwapRectangleANDROID) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);

}



inline EGLClientBuffer fast_call_chain_caller_eglGetRenderBufferANDROID (EGLDisplay _arg0, EGLSurface _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetRenderBufferANDROID)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetRenderBufferANDROID)] = chain_next->next;
    return ((MEOW_fp_eglGetRenderBufferANDROID) (chain_next->func)) (_arg0, _arg1);

}



inline EGLint fast_call_chain_caller_eglDupNativeFenceFDANDROID (EGLDisplay _arg0, EGLSyncKHR _arg1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglDupNativeFenceFDANDROID)];
    chain->chain_next.chain[MEOW_API_INDEX(eglDupNativeFenceFDANDROID)] = chain_next->next;
    return ((MEOW_fp_eglDupNativeFenceFDANDROID) (chain_next->func)) (_arg0, _arg1);

}



inline EGLClientBuffer fast_call_chain_caller_eglCreateNativeClientBufferANDROID (const EGLint * _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglCreateNativeClientBufferANDROID)];
    chain->chain_next.chain[MEOW_API_INDEX(eglCreateNativeClientBufferANDROID)] = chain_next->next;
    return ((MEOW_fp_eglCreateNativeClientBufferANDROID) (chain_next->func)) (_arg0);

}



inline EGLClientBuffer fast_call_chain_caller_eglGetNativeClientBufferANDROID (const AHardwareBuffer * _arg0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetNativeClientBufferANDROID)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetNativeClientBufferANDROID)] = chain_next->next;
    return ((MEOW_fp_eglGetNativeClientBufferANDROID) (chain_next->func)) (_arg0);

}



inline EGLuint64NV fast_call_chain_caller_eglGetSystemTimeFrequencyNV (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetSystemTimeFrequencyNV)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetSystemTimeFrequencyNV)] = chain_next->next;
    return ((MEOW_fp_eglGetSystemTimeFrequencyNV) (chain_next->func)) ();

}



inline EGLuint64NV fast_call_chain_caller_eglGetSystemTimeNV (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglGetSystemTimeNV)];
    chain->chain_next.chain[MEOW_API_INDEX(eglGetSystemTimeNV)] = chain_next->next;
    return ((MEOW_fp_eglGetSystemTimeNV) (chain_next->func)) ();

}



inline EGLBoolean fast_call_chain_caller_eglHibernateProcessIMG (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglHibernateProcessIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(eglHibernateProcessIMG)] = chain_next->next;
    return ((MEOW_fp_eglHibernateProcessIMG) (chain_next->func)) ();

}



inline EGLBoolean fast_call_chain_caller_eglAwakenProcessIMG (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglAwakenProcessIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(eglAwakenProcessIMG)] = chain_next->next;
    return ((MEOW_fp_eglAwakenProcessIMG) (chain_next->func)) ();

}



inline EGLBoolean fast_call_chain_caller_eglSwapBuffersWithDamageKHR (EGLDisplay _arg0, EGLSurface _arg1, EGLint * _arg2, EGLint _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSwapBuffersWithDamageKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSwapBuffersWithDamageKHR)] = chain_next->next;
    return ((MEOW_fp_eglSwapBuffersWithDamageKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}



inline EGLBoolean fast_call_chain_caller_eglSetDamageRegionKHR (EGLDisplay _arg0, EGLSurface _arg1, EGLint * _arg2, EGLint _arg3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSetDamageRegionKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSetDamageRegionKHR)] = chain_next->next;
    return ((MEOW_fp_eglSetDamageRegionKHR) (chain_next->func)) (_arg0, _arg1, _arg2, _arg3);

}


inline void fast_call_chain_caller_eglSetBlobCacheFuncsANDROID (EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(eglSetBlobCacheFuncsANDROID)];
    chain->chain_next.chain[MEOW_API_INDEX(eglSetBlobCacheFuncsANDROID)] = chain_next->next;
    ((MEOW_fp_eglSetBlobCacheFuncsANDROID) (chain_next->func)) (dpy, set, get);
}


inline void fast_call_chain_caller_glActiveShaderProgram (GLuint pipeline, GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glActiveShaderProgram)];
    chain->chain_next.chain[MEOW_API_INDEX(glActiveShaderProgram)] = chain_next->next;
    ((MEOW_fp_glActiveShaderProgram) (chain_next->func)) (pipeline, program);
}


inline void fast_call_chain_caller_glActiveShaderProgramEXT (GLuint pipeline, GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glActiveShaderProgramEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glActiveShaderProgramEXT)] = chain_next->next;
    ((MEOW_fp_glActiveShaderProgramEXT) (chain_next->func)) (pipeline, program);
}


inline void fast_call_chain_caller_glActiveTexture (GLenum texture)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glActiveTexture)];
    chain->chain_next.chain[MEOW_API_INDEX(glActiveTexture)] = chain_next->next;
    ((MEOW_fp_glActiveTexture) (chain_next->func)) (texture);
}


inline void fast_call_chain_caller_glAlphaFunc (GLenum func, GLfloat ref)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glAlphaFunc)];
    chain->chain_next.chain[MEOW_API_INDEX(glAlphaFunc)] = chain_next->next;
    ((MEOW_fp_glAlphaFunc) (chain_next->func)) (func, ref);
}


inline void fast_call_chain_caller_glAlphaFuncQCOM (GLenum func, GLclampf ref)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glAlphaFuncQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glAlphaFuncQCOM)] = chain_next->next;
    ((MEOW_fp_glAlphaFuncQCOM) (chain_next->func)) (func, ref);
}


inline void fast_call_chain_caller_glAlphaFuncx (GLenum func, GLfixed ref)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glAlphaFuncx)];
    chain->chain_next.chain[MEOW_API_INDEX(glAlphaFuncx)] = chain_next->next;
    ((MEOW_fp_glAlphaFuncx) (chain_next->func)) (func, ref);
}


inline void fast_call_chain_caller_glAlphaFuncxOES (GLenum func, GLfixed ref)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glAlphaFuncxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glAlphaFuncxOES)] = chain_next->next;
    ((MEOW_fp_glAlphaFuncxOES) (chain_next->func)) (func, ref);
}


inline void fast_call_chain_caller_glApplyFramebufferAttachmentCMAAINTEL (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glApplyFramebufferAttachmentCMAAINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glApplyFramebufferAttachmentCMAAINTEL)] = chain_next->next;
    ((MEOW_fp_glApplyFramebufferAttachmentCMAAINTEL) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glAttachShader (GLuint program, GLuint shader)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glAttachShader)];
    chain->chain_next.chain[MEOW_API_INDEX(glAttachShader)] = chain_next->next;
    ((MEOW_fp_glAttachShader) (chain_next->func)) (program, shader);
}


inline void fast_call_chain_caller_glBeginConditionalRenderNV (GLuint id, GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBeginConditionalRenderNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glBeginConditionalRenderNV)] = chain_next->next;
    ((MEOW_fp_glBeginConditionalRenderNV) (chain_next->func)) (id, mode);
}


inline void fast_call_chain_caller_glBeginPerfMonitorAMD (GLuint monitor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBeginPerfMonitorAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glBeginPerfMonitorAMD)] = chain_next->next;
    ((MEOW_fp_glBeginPerfMonitorAMD) (chain_next->func)) (monitor);
}


inline void fast_call_chain_caller_glBeginPerfQueryINTEL (GLuint queryHandle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBeginPerfQueryINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glBeginPerfQueryINTEL)] = chain_next->next;
    ((MEOW_fp_glBeginPerfQueryINTEL) (chain_next->func)) (queryHandle);
}


inline void fast_call_chain_caller_glBeginQuery (GLenum target, GLuint id)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBeginQuery)];
    chain->chain_next.chain[MEOW_API_INDEX(glBeginQuery)] = chain_next->next;
    ((MEOW_fp_glBeginQuery) (chain_next->func)) (target, id);
}


inline void fast_call_chain_caller_glBeginQueryEXT (GLenum target, GLuint id)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBeginQueryEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBeginQueryEXT)] = chain_next->next;
    ((MEOW_fp_glBeginQueryEXT) (chain_next->func)) (target, id);
}


inline void fast_call_chain_caller_glBeginTransformFeedback (GLenum primitiveMode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBeginTransformFeedback)];
    chain->chain_next.chain[MEOW_API_INDEX(glBeginTransformFeedback)] = chain_next->next;
    ((MEOW_fp_glBeginTransformFeedback) (chain_next->func)) (primitiveMode);
}


inline void fast_call_chain_caller_glBindAttribLocation (GLuint program, GLuint index, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindAttribLocation)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindAttribLocation)] = chain_next->next;
    ((MEOW_fp_glBindAttribLocation) (chain_next->func)) (program, index, name);
}


inline void fast_call_chain_caller_glBindBuffer (GLenum target, GLuint buffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindBuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindBuffer)] = chain_next->next;
    ((MEOW_fp_glBindBuffer) (chain_next->func)) (target, buffer);
}


inline void fast_call_chain_caller_glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindBufferBase)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindBufferBase)] = chain_next->next;
    ((MEOW_fp_glBindBufferBase) (chain_next->func)) (target, index, buffer);
}


inline void fast_call_chain_caller_glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindBufferRange)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindBufferRange)] = chain_next->next;
    ((MEOW_fp_glBindBufferRange) (chain_next->func)) (target, index, buffer, offset, size);
}


inline void fast_call_chain_caller_glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindFragDataLocationEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindFragDataLocationEXT)] = chain_next->next;
    ((MEOW_fp_glBindFragDataLocationEXT) (chain_next->func)) (program, color, name);
}


inline void fast_call_chain_caller_glBindFragDataLocationIndexedEXT (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindFragDataLocationIndexedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindFragDataLocationIndexedEXT)] = chain_next->next;
    ((MEOW_fp_glBindFragDataLocationIndexedEXT) (chain_next->func)) (program, colorNumber, index, name);
}


inline void fast_call_chain_caller_glBindFramebuffer (GLenum target, GLuint framebuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindFramebuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindFramebuffer)] = chain_next->next;
    ((MEOW_fp_glBindFramebuffer) (chain_next->func)) (target, framebuffer);
}


inline void fast_call_chain_caller_glBindFramebufferOES (GLenum target, GLuint framebuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindFramebufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindFramebufferOES)] = chain_next->next;
    ((MEOW_fp_glBindFramebufferOES) (chain_next->func)) (target, framebuffer);
}


inline void fast_call_chain_caller_glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindImageTexture)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindImageTexture)] = chain_next->next;
    ((MEOW_fp_glBindImageTexture) (chain_next->func)) (unit, texture, level, layered, layer, access, format);
}


inline void fast_call_chain_caller_glBindProgramPipeline (GLuint pipeline)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindProgramPipeline)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindProgramPipeline)] = chain_next->next;
    ((MEOW_fp_glBindProgramPipeline) (chain_next->func)) (pipeline);
}


inline void fast_call_chain_caller_glBindProgramPipelineEXT (GLuint pipeline)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindProgramPipelineEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindProgramPipelineEXT)] = chain_next->next;
    ((MEOW_fp_glBindProgramPipelineEXT) (chain_next->func)) (pipeline);
}


inline void fast_call_chain_caller_glBindRenderbuffer (GLenum target, GLuint renderbuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindRenderbuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindRenderbuffer)] = chain_next->next;
    ((MEOW_fp_glBindRenderbuffer) (chain_next->func)) (target, renderbuffer);
}


inline void fast_call_chain_caller_glBindRenderbufferOES (GLenum target, GLuint renderbuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindRenderbufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindRenderbufferOES)] = chain_next->next;
    ((MEOW_fp_glBindRenderbufferOES) (chain_next->func)) (target, renderbuffer);
}


inline void fast_call_chain_caller_glBindSampler (GLuint unit, GLuint sampler)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindSampler)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindSampler)] = chain_next->next;
    ((MEOW_fp_glBindSampler) (chain_next->func)) (unit, sampler);
}


inline void fast_call_chain_caller_glBindTexture (GLenum target, GLuint texture)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindTexture)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindTexture)] = chain_next->next;
    ((MEOW_fp_glBindTexture) (chain_next->func)) (target, texture);
}


inline void fast_call_chain_caller_glBindTransformFeedback (GLenum target, GLuint id)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindTransformFeedback)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindTransformFeedback)] = chain_next->next;
    ((MEOW_fp_glBindTransformFeedback) (chain_next->func)) (target, id);
}


inline void fast_call_chain_caller_glBindVertexArray (GLuint array)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindVertexArray)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindVertexArray)] = chain_next->next;
    ((MEOW_fp_glBindVertexArray) (chain_next->func)) (array);
}


inline void fast_call_chain_caller_glBindVertexArrayOES (GLuint array)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindVertexArrayOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindVertexArrayOES)] = chain_next->next;
    ((MEOW_fp_glBindVertexArrayOES) (chain_next->func)) (array);
}


inline void fast_call_chain_caller_glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBindVertexBuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glBindVertexBuffer)] = chain_next->next;
    ((MEOW_fp_glBindVertexBuffer) (chain_next->func)) (bindingindex, buffer, offset, stride);
}


inline void fast_call_chain_caller_glBlendBarrier (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendBarrier)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendBarrier)] = chain_next->next;
    ((MEOW_fp_glBlendBarrier) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glBlendBarrierKHR (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendBarrierKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendBarrierKHR)] = chain_next->next;
    ((MEOW_fp_glBlendBarrierKHR) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glBlendBarrierNV (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendBarrierNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendBarrierNV)] = chain_next->next;
    ((MEOW_fp_glBlendBarrierNV) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendColor)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendColor)] = chain_next->next;
    ((MEOW_fp_glBlendColor) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glBlendEquation (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquation)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquation)] = chain_next->next;
    ((MEOW_fp_glBlendEquation) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glBlendEquationOES (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationOES)] = chain_next->next;
    ((MEOW_fp_glBlendEquationOES) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparate)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparate)] = chain_next->next;
    ((MEOW_fp_glBlendEquationSeparate) (chain_next->func)) (modeRGB, modeAlpha);
}


inline void fast_call_chain_caller_glBlendEquationSeparateOES (GLenum modeRGB, GLenum modeAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparateOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparateOES)] = chain_next->next;
    ((MEOW_fp_glBlendEquationSeparateOES) (chain_next->func)) (modeRGB, modeAlpha);
}


inline void fast_call_chain_caller_glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparatei)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparatei)] = chain_next->next;
    ((MEOW_fp_glBlendEquationSeparatei) (chain_next->func)) (buf, modeRGB, modeAlpha);
}


inline void fast_call_chain_caller_glBlendEquationSeparateiEXT (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparateiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparateiEXT)] = chain_next->next;
    ((MEOW_fp_glBlendEquationSeparateiEXT) (chain_next->func)) (buf, modeRGB, modeAlpha);
}


inline void fast_call_chain_caller_glBlendEquationSeparateiOES (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparateiOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationSeparateiOES)] = chain_next->next;
    ((MEOW_fp_glBlendEquationSeparateiOES) (chain_next->func)) (buf, modeRGB, modeAlpha);
}


inline void fast_call_chain_caller_glBlendEquationi (GLuint buf, GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationi)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationi)] = chain_next->next;
    ((MEOW_fp_glBlendEquationi) (chain_next->func)) (buf, mode);
}


inline void fast_call_chain_caller_glBlendEquationiEXT (GLuint buf, GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationiEXT)] = chain_next->next;
    ((MEOW_fp_glBlendEquationiEXT) (chain_next->func)) (buf, mode);
}


inline void fast_call_chain_caller_glBlendEquationiOES (GLuint buf, GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationiOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendEquationiOES)] = chain_next->next;
    ((MEOW_fp_glBlendEquationiOES) (chain_next->func)) (buf, mode);
}


inline void fast_call_chain_caller_glBlendFunc (GLenum sfactor, GLenum dfactor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFunc)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFunc)] = chain_next->next;
    ((MEOW_fp_glBlendFunc) (chain_next->func)) (sfactor, dfactor);
}


inline void fast_call_chain_caller_glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparate)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparate)] = chain_next->next;
    ((MEOW_fp_glBlendFuncSeparate) (chain_next->func)) (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}


inline void fast_call_chain_caller_glBlendFuncSeparateOES (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparateOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparateOES)] = chain_next->next;
    ((MEOW_fp_glBlendFuncSeparateOES) (chain_next->func)) (srcRGB, dstRGB, srcAlpha, dstAlpha);
}


inline void fast_call_chain_caller_glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparatei)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparatei)] = chain_next->next;
    ((MEOW_fp_glBlendFuncSeparatei) (chain_next->func)) (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}


inline void fast_call_chain_caller_glBlendFuncSeparateiEXT (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparateiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparateiEXT)] = chain_next->next;
    ((MEOW_fp_glBlendFuncSeparateiEXT) (chain_next->func)) (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}


inline void fast_call_chain_caller_glBlendFuncSeparateiOES (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparateiOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFuncSeparateiOES)] = chain_next->next;
    ((MEOW_fp_glBlendFuncSeparateiOES) (chain_next->func)) (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}


inline void fast_call_chain_caller_glBlendFunci (GLuint buf, GLenum src, GLenum dst)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFunci)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFunci)] = chain_next->next;
    ((MEOW_fp_glBlendFunci) (chain_next->func)) (buf, src, dst);
}


inline void fast_call_chain_caller_glBlendFunciEXT (GLuint buf, GLenum src, GLenum dst)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFunciEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFunciEXT)] = chain_next->next;
    ((MEOW_fp_glBlendFunciEXT) (chain_next->func)) (buf, src, dst);
}


inline void fast_call_chain_caller_glBlendFunciOES (GLuint buf, GLenum src, GLenum dst)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendFunciOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendFunciOES)] = chain_next->next;
    ((MEOW_fp_glBlendFunciOES) (chain_next->func)) (buf, src, dst);
}


inline void fast_call_chain_caller_glBlendParameteriNV (GLenum pname, GLint value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlendParameteriNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlendParameteriNV)] = chain_next->next;
    ((MEOW_fp_glBlendParameteriNV) (chain_next->func)) (pname, value);
}


inline void fast_call_chain_caller_glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlitFramebuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlitFramebuffer)] = chain_next->next;
    ((MEOW_fp_glBlitFramebuffer) (chain_next->func)) (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}


inline void fast_call_chain_caller_glBlitFramebufferANGLE (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlitFramebufferANGLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlitFramebufferANGLE)] = chain_next->next;
    ((MEOW_fp_glBlitFramebufferANGLE) (chain_next->func)) (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}


inline void fast_call_chain_caller_glBlitFramebufferNV (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBlitFramebufferNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glBlitFramebufferNV)] = chain_next->next;
    ((MEOW_fp_glBlitFramebufferNV) (chain_next->func)) (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}


inline void fast_call_chain_caller_glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBufferData)];
    chain->chain_next.chain[MEOW_API_INDEX(glBufferData)] = chain_next->next;
    ((MEOW_fp_glBufferData) (chain_next->func)) (target, size, data, usage);
}


inline void fast_call_chain_caller_glBufferStorageEXT (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBufferStorageEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBufferStorageEXT)] = chain_next->next;
    ((MEOW_fp_glBufferStorageEXT) (chain_next->func)) (target, size, data, flags);
}


inline void fast_call_chain_caller_glBufferStorageExternalEXT (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBufferStorageExternalEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBufferStorageExternalEXT)] = chain_next->next;
    ((MEOW_fp_glBufferStorageExternalEXT) (chain_next->func)) (target, offset, size, clientBuffer, flags);
}


inline void fast_call_chain_caller_glBufferStorageMemEXT (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBufferStorageMemEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glBufferStorageMemEXT)] = chain_next->next;
    ((MEOW_fp_glBufferStorageMemEXT) (chain_next->func)) (target, size, memory, offset);
}


inline void fast_call_chain_caller_glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glBufferSubData)];
    chain->chain_next.chain[MEOW_API_INDEX(glBufferSubData)] = chain_next->next;
    ((MEOW_fp_glBufferSubData) (chain_next->func)) (target, offset, size, data);
}



inline GLenum fast_call_chain_caller_glCheckFramebufferStatus (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCheckFramebufferStatus)];
    chain->chain_next.chain[MEOW_API_INDEX(glCheckFramebufferStatus)] = chain_next->next;
    return ((MEOW_fp_glCheckFramebufferStatus) (chain_next->func)) (target);

}



inline GLenum fast_call_chain_caller_glCheckFramebufferStatusOES (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCheckFramebufferStatusOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glCheckFramebufferStatusOES)] = chain_next->next;
    return ((MEOW_fp_glCheckFramebufferStatusOES) (chain_next->func)) (target);

}


inline void fast_call_chain_caller_glClear (GLbitfield mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClear)];
    chain->chain_next.chain[MEOW_API_INDEX(glClear)] = chain_next->next;
    ((MEOW_fp_glClear) (chain_next->func)) (mask);
}


inline void fast_call_chain_caller_glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearBufferfi)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearBufferfi)] = chain_next->next;
    ((MEOW_fp_glClearBufferfi) (chain_next->func)) (buffer, drawbuffer, depth, stencil);
}


inline void fast_call_chain_caller_glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearBufferfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearBufferfv)] = chain_next->next;
    ((MEOW_fp_glClearBufferfv) (chain_next->func)) (buffer, drawbuffer, value);
}


inline void fast_call_chain_caller_glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearBufferiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearBufferiv)] = chain_next->next;
    ((MEOW_fp_glClearBufferiv) (chain_next->func)) (buffer, drawbuffer, value);
}


inline void fast_call_chain_caller_glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearBufferuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearBufferuiv)] = chain_next->next;
    ((MEOW_fp_glClearBufferuiv) (chain_next->func)) (buffer, drawbuffer, value);
}


inline void fast_call_chain_caller_glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearColor)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearColor)] = chain_next->next;
    ((MEOW_fp_glClearColor) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glClearColorx (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearColorx)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearColorx)] = chain_next->next;
    ((MEOW_fp_glClearColorx) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glClearColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearColorxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearColorxOES)] = chain_next->next;
    ((MEOW_fp_glClearColorxOES) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glClearDepthf (GLfloat d)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearDepthf)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearDepthf)] = chain_next->next;
    ((MEOW_fp_glClearDepthf) (chain_next->func)) (d);
}


inline void fast_call_chain_caller_glClearDepthfOES (GLclampf depth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearDepthfOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearDepthfOES)] = chain_next->next;
    ((MEOW_fp_glClearDepthfOES) (chain_next->func)) (depth);
}


inline void fast_call_chain_caller_glClearDepthx (GLfixed depth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearDepthx)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearDepthx)] = chain_next->next;
    ((MEOW_fp_glClearDepthx) (chain_next->func)) (depth);
}


inline void fast_call_chain_caller_glClearDepthxOES (GLfixed depth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearDepthxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearDepthxOES)] = chain_next->next;
    ((MEOW_fp_glClearDepthxOES) (chain_next->func)) (depth);
}


inline void fast_call_chain_caller_glClearPixelLocalStorageuiEXT (GLsizei offset, GLsizei n, const GLuint *values)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearPixelLocalStorageuiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearPixelLocalStorageuiEXT)] = chain_next->next;
    ((MEOW_fp_glClearPixelLocalStorageuiEXT) (chain_next->func)) (offset, n, values);
}


inline void fast_call_chain_caller_glClearStencil (GLint s)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearStencil)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearStencil)] = chain_next->next;
    ((MEOW_fp_glClearStencil) (chain_next->func)) (s);
}


inline void fast_call_chain_caller_glClearTexImageEXT (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearTexImageEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearTexImageEXT)] = chain_next->next;
    ((MEOW_fp_glClearTexImageEXT) (chain_next->func)) (texture, level, format, type, data);
}


inline void fast_call_chain_caller_glClearTexSubImageEXT (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClearTexSubImageEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glClearTexSubImageEXT)] = chain_next->next;
    ((MEOW_fp_glClearTexSubImageEXT) (chain_next->func)) (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}


inline void fast_call_chain_caller_glClientActiveTexture (GLenum texture)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClientActiveTexture)];
    chain->chain_next.chain[MEOW_API_INDEX(glClientActiveTexture)] = chain_next->next;
    ((MEOW_fp_glClientActiveTexture) (chain_next->func)) (texture);
}



inline GLenum fast_call_chain_caller_glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClientWaitSync)];
    chain->chain_next.chain[MEOW_API_INDEX(glClientWaitSync)] = chain_next->next;
    return ((MEOW_fp_glClientWaitSync) (chain_next->func)) (sync, flags, timeout);

}



inline GLenum fast_call_chain_caller_glClientWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClientWaitSyncAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glClientWaitSyncAPPLE)] = chain_next->next;
    return ((MEOW_fp_glClientWaitSyncAPPLE) (chain_next->func)) (sync, flags, timeout);

}


inline void fast_call_chain_caller_glClipControlEXT (GLenum origin, GLenum depth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClipControlEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glClipControlEXT)] = chain_next->next;
    ((MEOW_fp_glClipControlEXT) (chain_next->func)) (origin, depth);
}


inline void fast_call_chain_caller_glClipPlanef (GLenum p, const GLfloat *eqn)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClipPlanef)];
    chain->chain_next.chain[MEOW_API_INDEX(glClipPlanef)] = chain_next->next;
    ((MEOW_fp_glClipPlanef) (chain_next->func)) (p, eqn);
}


inline void fast_call_chain_caller_glClipPlanefIMG (GLenum p, const GLfloat *eqn)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClipPlanefIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glClipPlanefIMG)] = chain_next->next;
    ((MEOW_fp_glClipPlanefIMG) (chain_next->func)) (p, eqn);
}


inline void fast_call_chain_caller_glClipPlanefOES (GLenum plane, const GLfloat *equation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClipPlanefOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glClipPlanefOES)] = chain_next->next;
    ((MEOW_fp_glClipPlanefOES) (chain_next->func)) (plane, equation);
}


inline void fast_call_chain_caller_glClipPlanex (GLenum plane, const GLfixed *equation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClipPlanex)];
    chain->chain_next.chain[MEOW_API_INDEX(glClipPlanex)] = chain_next->next;
    ((MEOW_fp_glClipPlanex) (chain_next->func)) (plane, equation);
}


inline void fast_call_chain_caller_glClipPlanexIMG (GLenum p, const GLfixed *eqn)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClipPlanexIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glClipPlanexIMG)] = chain_next->next;
    ((MEOW_fp_glClipPlanexIMG) (chain_next->func)) (p, eqn);
}


inline void fast_call_chain_caller_glClipPlanexOES (GLenum plane, const GLfixed *equation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glClipPlanexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glClipPlanexOES)] = chain_next->next;
    ((MEOW_fp_glClipPlanexOES) (chain_next->func)) (plane, equation);
}


inline void fast_call_chain_caller_glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColor4f)];
    chain->chain_next.chain[MEOW_API_INDEX(glColor4f)] = chain_next->next;
    ((MEOW_fp_glColor4f) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColor4ub)];
    chain->chain_next.chain[MEOW_API_INDEX(glColor4ub)] = chain_next->next;
    ((MEOW_fp_glColor4ub) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glColor4x (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColor4x)];
    chain->chain_next.chain[MEOW_API_INDEX(glColor4x)] = chain_next->next;
    ((MEOW_fp_glColor4x) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glColor4xOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColor4xOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glColor4xOES)] = chain_next->next;
    ((MEOW_fp_glColor4xOES) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColorMask)];
    chain->chain_next.chain[MEOW_API_INDEX(glColorMask)] = chain_next->next;
    ((MEOW_fp_glColorMask) (chain_next->func)) (red, green, blue, alpha);
}


inline void fast_call_chain_caller_glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColorMaski)];
    chain->chain_next.chain[MEOW_API_INDEX(glColorMaski)] = chain_next->next;
    ((MEOW_fp_glColorMaski) (chain_next->func)) (index, r, g, b, a);
}


inline void fast_call_chain_caller_glColorMaskiEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColorMaskiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glColorMaskiEXT)] = chain_next->next;
    ((MEOW_fp_glColorMaskiEXT) (chain_next->func)) (index, r, g, b, a);
}


inline void fast_call_chain_caller_glColorMaskiOES (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColorMaskiOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glColorMaskiOES)] = chain_next->next;
    ((MEOW_fp_glColorMaskiOES) (chain_next->func)) (index, r, g, b, a);
}


inline void fast_call_chain_caller_glColorPointer (GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glColorPointer)];
    chain->chain_next.chain[MEOW_API_INDEX(glColorPointer)] = chain_next->next;
    ((MEOW_fp_glColorPointer) (chain_next->func)) (size, type, stride, pointer);
}


inline void fast_call_chain_caller_glCompileShader (GLuint shader)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCompileShader)];
    chain->chain_next.chain[MEOW_API_INDEX(glCompileShader)] = chain_next->next;
    ((MEOW_fp_glCompileShader) (chain_next->func)) (shader);
}


inline void fast_call_chain_caller_glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexImage2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexImage2D)] = chain_next->next;
    ((MEOW_fp_glCompressedTexImage2D) (chain_next->func)) (target, level, internalformat, width, height, border, imageSize, data);
}


inline void fast_call_chain_caller_glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexImage3D)];
    chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexImage3D)] = chain_next->next;
    ((MEOW_fp_glCompressedTexImage3D) (chain_next->func)) (target, level, internalformat, width, height, depth, border, imageSize, data);
}


inline void fast_call_chain_caller_glCompressedTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexImage3DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexImage3DOES)] = chain_next->next;
    ((MEOW_fp_glCompressedTexImage3DOES) (chain_next->func)) (target, level, internalformat, width, height, depth, border, imageSize, data);
}


inline void fast_call_chain_caller_glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexSubImage2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexSubImage2D)] = chain_next->next;
    ((MEOW_fp_glCompressedTexSubImage2D) (chain_next->func)) (target, level, xoffset, yoffset, width, height, format, imageSize, data);
}


inline void fast_call_chain_caller_glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexSubImage3D)];
    chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexSubImage3D)] = chain_next->next;
    ((MEOW_fp_glCompressedTexSubImage3D) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}


inline void fast_call_chain_caller_glCompressedTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexSubImage3DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glCompressedTexSubImage3DOES)] = chain_next->next;
    ((MEOW_fp_glCompressedTexSubImage3DOES) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}


inline void fast_call_chain_caller_glConservativeRasterParameteriNV (GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glConservativeRasterParameteriNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glConservativeRasterParameteriNV)] = chain_next->next;
    ((MEOW_fp_glConservativeRasterParameteriNV) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyBufferSubData)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyBufferSubData)] = chain_next->next;
    ((MEOW_fp_glCopyBufferSubData) (chain_next->func)) (readTarget, writeTarget, readOffset, writeOffset, size);
}


inline void fast_call_chain_caller_glCopyBufferSubDataNV (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyBufferSubDataNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyBufferSubDataNV)] = chain_next->next;
    ((MEOW_fp_glCopyBufferSubDataNV) (chain_next->func)) (readTarget, writeTarget, readOffset, writeOffset, size);
}


inline void fast_call_chain_caller_glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyImageSubData)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyImageSubData)] = chain_next->next;
    ((MEOW_fp_glCopyImageSubData) (chain_next->func)) (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}


inline void fast_call_chain_caller_glCopyImageSubDataEXT (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyImageSubDataEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyImageSubDataEXT)] = chain_next->next;
    ((MEOW_fp_glCopyImageSubDataEXT) (chain_next->func)) (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}


inline void fast_call_chain_caller_glCopyImageSubDataOES (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyImageSubDataOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyImageSubDataOES)] = chain_next->next;
    ((MEOW_fp_glCopyImageSubDataOES) (chain_next->func)) (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}


inline void fast_call_chain_caller_glCopyPathNV (GLuint resultPath, GLuint srcPath)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyPathNV)] = chain_next->next;
    ((MEOW_fp_glCopyPathNV) (chain_next->func)) (resultPath, srcPath);
}


inline void fast_call_chain_caller_glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyTexImage2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyTexImage2D)] = chain_next->next;
    ((MEOW_fp_glCopyTexImage2D) (chain_next->func)) (target, level, internalformat, x, y, width, height, border);
}


inline void fast_call_chain_caller_glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyTexSubImage2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyTexSubImage2D)] = chain_next->next;
    ((MEOW_fp_glCopyTexSubImage2D) (chain_next->func)) (target, level, xoffset, yoffset, x, y, width, height);
}


inline void fast_call_chain_caller_glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyTexSubImage3D)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyTexSubImage3D)] = chain_next->next;
    ((MEOW_fp_glCopyTexSubImage3D) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, x, y, width, height);
}


inline void fast_call_chain_caller_glCopyTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyTexSubImage3DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyTexSubImage3DOES)] = chain_next->next;
    ((MEOW_fp_glCopyTexSubImage3DOES) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, x, y, width, height);
}


inline void fast_call_chain_caller_glCopyTextureLevelsAPPLE (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCopyTextureLevelsAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glCopyTextureLevelsAPPLE)] = chain_next->next;
    ((MEOW_fp_glCopyTextureLevelsAPPLE) (chain_next->func)) (destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}


inline void fast_call_chain_caller_glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverFillPathInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverFillPathInstancedNV)] = chain_next->next;
    ((MEOW_fp_glCoverFillPathInstancedNV) (chain_next->func)) (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}


inline void fast_call_chain_caller_glCoverFillPathNV (GLuint path, GLenum coverMode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverFillPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverFillPathNV)] = chain_next->next;
    ((MEOW_fp_glCoverFillPathNV) (chain_next->func)) (path, coverMode);
}


inline void fast_call_chain_caller_glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverStrokePathInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverStrokePathInstancedNV)] = chain_next->next;
    ((MEOW_fp_glCoverStrokePathInstancedNV) (chain_next->func)) (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}


inline void fast_call_chain_caller_glCoverStrokePathNV (GLuint path, GLenum coverMode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverStrokePathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverStrokePathNV)] = chain_next->next;
    ((MEOW_fp_glCoverStrokePathNV) (chain_next->func)) (path, coverMode);
}


inline void fast_call_chain_caller_glCoverageMaskNV (GLboolean mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverageMaskNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverageMaskNV)] = chain_next->next;
    ((MEOW_fp_glCoverageMaskNV) (chain_next->func)) (mask);
}


inline void fast_call_chain_caller_glCoverageModulationNV (GLenum components)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverageModulationNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverageModulationNV)] = chain_next->next;
    ((MEOW_fp_glCoverageModulationNV) (chain_next->func)) (components);
}


inline void fast_call_chain_caller_glCoverageModulationTableNV (GLsizei n, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverageModulationTableNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverageModulationTableNV)] = chain_next->next;
    ((MEOW_fp_glCoverageModulationTableNV) (chain_next->func)) (n, v);
}


inline void fast_call_chain_caller_glCoverageOperationNV (GLenum operation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCoverageOperationNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glCoverageOperationNV)] = chain_next->next;
    ((MEOW_fp_glCoverageOperationNV) (chain_next->func)) (operation);
}


inline void fast_call_chain_caller_glCreateMemoryObjectsEXT (GLsizei n, GLuint *memoryObjects)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCreateMemoryObjectsEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glCreateMemoryObjectsEXT)] = chain_next->next;
    ((MEOW_fp_glCreateMemoryObjectsEXT) (chain_next->func)) (n, memoryObjects);
}


inline void fast_call_chain_caller_glCreatePerfQueryINTEL (GLuint queryId, GLuint *queryHandle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCreatePerfQueryINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glCreatePerfQueryINTEL)] = chain_next->next;
    ((MEOW_fp_glCreatePerfQueryINTEL) (chain_next->func)) (queryId, queryHandle);
}



inline GLuint fast_call_chain_caller_glCreateProgram (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCreateProgram)];
    chain->chain_next.chain[MEOW_API_INDEX(glCreateProgram)] = chain_next->next;
    return ((MEOW_fp_glCreateProgram) (chain_next->func)) ();

}



inline GLuint fast_call_chain_caller_glCreateShader (GLenum type)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCreateShader)];
    chain->chain_next.chain[MEOW_API_INDEX(glCreateShader)] = chain_next->next;
    return ((MEOW_fp_glCreateShader) (chain_next->func)) (type);

}



inline GLuint fast_call_chain_caller_glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCreateShaderProgramv)];
    chain->chain_next.chain[MEOW_API_INDEX(glCreateShaderProgramv)] = chain_next->next;
    return ((MEOW_fp_glCreateShaderProgramv) (chain_next->func)) (type, count, strings);

}



inline GLuint fast_call_chain_caller_glCreateShaderProgramvEXT (GLenum type, GLsizei count, const GLchar **strings)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCreateShaderProgramvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glCreateShaderProgramvEXT)] = chain_next->next;
    return ((MEOW_fp_glCreateShaderProgramvEXT) (chain_next->func)) (type, count, strings);

}


inline void fast_call_chain_caller_glCullFace (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCullFace)];
    chain->chain_next.chain[MEOW_API_INDEX(glCullFace)] = chain_next->next;
    ((MEOW_fp_glCullFace) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glCurrentPaletteMatrixOES (GLuint matrixpaletteindex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glCurrentPaletteMatrixOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glCurrentPaletteMatrixOES)] = chain_next->next;
    ((MEOW_fp_glCurrentPaletteMatrixOES) (chain_next->func)) (matrixpaletteindex);
}


inline void fast_call_chain_caller_glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageCallback)];
    chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageCallback)] = chain_next->next;
    ((MEOW_fp_glDebugMessageCallback) (chain_next->func)) (callback, userParam);
}


inline void fast_call_chain_caller_glDebugMessageCallbackKHR (GLDEBUGPROCKHR callback, const void *userParam)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageCallbackKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageCallbackKHR)] = chain_next->next;
    ((MEOW_fp_glDebugMessageCallbackKHR) (chain_next->func)) (callback, userParam);
}


inline void fast_call_chain_caller_glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageControl)];
    chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageControl)] = chain_next->next;
    ((MEOW_fp_glDebugMessageControl) (chain_next->func)) (source, type, severity, count, ids, enabled);
}


inline void fast_call_chain_caller_glDebugMessageControlKHR (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageControlKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageControlKHR)] = chain_next->next;
    ((MEOW_fp_glDebugMessageControlKHR) (chain_next->func)) (source, type, severity, count, ids, enabled);
}


inline void fast_call_chain_caller_glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageInsert)];
    chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageInsert)] = chain_next->next;
    ((MEOW_fp_glDebugMessageInsert) (chain_next->func)) (source, type, id, severity, length, buf);
}


inline void fast_call_chain_caller_glDebugMessageInsertKHR (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageInsertKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glDebugMessageInsertKHR)] = chain_next->next;
    ((MEOW_fp_glDebugMessageInsertKHR) (chain_next->func)) (source, type, id, severity, length, buf);
}


inline void fast_call_chain_caller_glDeleteBuffers (GLsizei n, const GLuint *buffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteBuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteBuffers)] = chain_next->next;
    ((MEOW_fp_glDeleteBuffers) (chain_next->func)) (n, buffers);
}


inline void fast_call_chain_caller_glDeleteFencesNV (GLsizei n, const GLuint *fences)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteFencesNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteFencesNV)] = chain_next->next;
    ((MEOW_fp_glDeleteFencesNV) (chain_next->func)) (n, fences);
}


inline void fast_call_chain_caller_glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteFramebuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteFramebuffers)] = chain_next->next;
    ((MEOW_fp_glDeleteFramebuffers) (chain_next->func)) (n, framebuffers);
}


inline void fast_call_chain_caller_glDeleteFramebuffersOES (GLsizei n, const GLuint *framebuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteFramebuffersOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteFramebuffersOES)] = chain_next->next;
    ((MEOW_fp_glDeleteFramebuffersOES) (chain_next->func)) (n, framebuffers);
}


inline void fast_call_chain_caller_glDeleteMemoryObjectsEXT (GLsizei n, const GLuint *memoryObjects)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteMemoryObjectsEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteMemoryObjectsEXT)] = chain_next->next;
    ((MEOW_fp_glDeleteMemoryObjectsEXT) (chain_next->func)) (n, memoryObjects);
}


inline void fast_call_chain_caller_glDeletePathsNV (GLuint path, GLsizei range)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeletePathsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeletePathsNV)] = chain_next->next;
    ((MEOW_fp_glDeletePathsNV) (chain_next->func)) (path, range);
}


inline void fast_call_chain_caller_glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeletePerfMonitorsAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeletePerfMonitorsAMD)] = chain_next->next;
    ((MEOW_fp_glDeletePerfMonitorsAMD) (chain_next->func)) (n, monitors);
}


inline void fast_call_chain_caller_glDeletePerfQueryINTEL (GLuint queryHandle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeletePerfQueryINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeletePerfQueryINTEL)] = chain_next->next;
    ((MEOW_fp_glDeletePerfQueryINTEL) (chain_next->func)) (queryHandle);
}


inline void fast_call_chain_caller_glDeleteProgram (GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteProgram)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteProgram)] = chain_next->next;
    ((MEOW_fp_glDeleteProgram) (chain_next->func)) (program);
}


inline void fast_call_chain_caller_glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteProgramPipelines)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteProgramPipelines)] = chain_next->next;
    ((MEOW_fp_glDeleteProgramPipelines) (chain_next->func)) (n, pipelines);
}


inline void fast_call_chain_caller_glDeleteProgramPipelinesEXT (GLsizei n, const GLuint *pipelines)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteProgramPipelinesEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteProgramPipelinesEXT)] = chain_next->next;
    ((MEOW_fp_glDeleteProgramPipelinesEXT) (chain_next->func)) (n, pipelines);
}


inline void fast_call_chain_caller_glDeleteQueries (GLsizei n, const GLuint *ids)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteQueries)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteQueries)] = chain_next->next;
    ((MEOW_fp_glDeleteQueries) (chain_next->func)) (n, ids);
}


inline void fast_call_chain_caller_glDeleteQueriesEXT (GLsizei n, const GLuint *ids)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteQueriesEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteQueriesEXT)] = chain_next->next;
    ((MEOW_fp_glDeleteQueriesEXT) (chain_next->func)) (n, ids);
}


inline void fast_call_chain_caller_glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteRenderbuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteRenderbuffers)] = chain_next->next;
    ((MEOW_fp_glDeleteRenderbuffers) (chain_next->func)) (n, renderbuffers);
}


inline void fast_call_chain_caller_glDeleteRenderbuffersOES (GLsizei n, const GLuint *renderbuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteRenderbuffersOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteRenderbuffersOES)] = chain_next->next;
    ((MEOW_fp_glDeleteRenderbuffersOES) (chain_next->func)) (n, renderbuffers);
}


inline void fast_call_chain_caller_glDeleteSamplers (GLsizei count, const GLuint *samplers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteSamplers)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteSamplers)] = chain_next->next;
    ((MEOW_fp_glDeleteSamplers) (chain_next->func)) (count, samplers);
}


inline void fast_call_chain_caller_glDeleteSemaphoresEXT (GLsizei n, const GLuint *semaphores)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteSemaphoresEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteSemaphoresEXT)] = chain_next->next;
    ((MEOW_fp_glDeleteSemaphoresEXT) (chain_next->func)) (n, semaphores);
}


inline void fast_call_chain_caller_glDeleteShader (GLuint shader)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteShader)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteShader)] = chain_next->next;
    ((MEOW_fp_glDeleteShader) (chain_next->func)) (shader);
}


inline void fast_call_chain_caller_glDeleteSync (GLsync sync)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteSync)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteSync)] = chain_next->next;
    ((MEOW_fp_glDeleteSync) (chain_next->func)) (sync);
}


inline void fast_call_chain_caller_glDeleteSyncAPPLE (GLsync sync)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteSyncAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteSyncAPPLE)] = chain_next->next;
    ((MEOW_fp_glDeleteSyncAPPLE) (chain_next->func)) (sync);
}


inline void fast_call_chain_caller_glDeleteTextures (GLsizei n, const GLuint *textures)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteTextures)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteTextures)] = chain_next->next;
    ((MEOW_fp_glDeleteTextures) (chain_next->func)) (n, textures);
}


inline void fast_call_chain_caller_glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteTransformFeedbacks)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteTransformFeedbacks)] = chain_next->next;
    ((MEOW_fp_glDeleteTransformFeedbacks) (chain_next->func)) (n, ids);
}


inline void fast_call_chain_caller_glDeleteVertexArrays (GLsizei n, const GLuint *arrays)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteVertexArrays)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteVertexArrays)] = chain_next->next;
    ((MEOW_fp_glDeleteVertexArrays) (chain_next->func)) (n, arrays);
}


inline void fast_call_chain_caller_glDeleteVertexArraysOES (GLsizei n, const GLuint *arrays)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDeleteVertexArraysOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDeleteVertexArraysOES)] = chain_next->next;
    ((MEOW_fp_glDeleteVertexArraysOES) (chain_next->func)) (n, arrays);
}


inline void fast_call_chain_caller_glDepthFunc (GLenum func)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthFunc)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthFunc)] = chain_next->next;
    ((MEOW_fp_glDepthFunc) (chain_next->func)) (func);
}


inline void fast_call_chain_caller_glDepthMask (GLboolean flag)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthMask)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthMask)] = chain_next->next;
    ((MEOW_fp_glDepthMask) (chain_next->func)) (flag);
}


inline void fast_call_chain_caller_glDepthRangeArrayfvNV (GLuint first, GLsizei count, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeArrayfvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeArrayfvNV)] = chain_next->next;
    ((MEOW_fp_glDepthRangeArrayfvNV) (chain_next->func)) (first, count, v);
}


inline void fast_call_chain_caller_glDepthRangeArrayfvOES (GLuint first, GLsizei count, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeArrayfvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeArrayfvOES)] = chain_next->next;
    ((MEOW_fp_glDepthRangeArrayfvOES) (chain_next->func)) (first, count, v);
}


inline void fast_call_chain_caller_glDepthRangeIndexedfNV (GLuint index, GLfloat n, GLfloat f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeIndexedfNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeIndexedfNV)] = chain_next->next;
    ((MEOW_fp_glDepthRangeIndexedfNV) (chain_next->func)) (index, n, f);
}


inline void fast_call_chain_caller_glDepthRangeIndexedfOES (GLuint index, GLfloat n, GLfloat f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeIndexedfOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangeIndexedfOES)] = chain_next->next;
    ((MEOW_fp_glDepthRangeIndexedfOES) (chain_next->func)) (index, n, f);
}


inline void fast_call_chain_caller_glDepthRangef (GLfloat n, GLfloat f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangef)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangef)] = chain_next->next;
    ((MEOW_fp_glDepthRangef) (chain_next->func)) (n, f);
}


inline void fast_call_chain_caller_glDepthRangefOES (GLclampf n, GLclampf f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangefOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangefOES)] = chain_next->next;
    ((MEOW_fp_glDepthRangefOES) (chain_next->func)) (n, f);
}


inline void fast_call_chain_caller_glDepthRangex (GLfixed n, GLfixed f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangex)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangex)] = chain_next->next;
    ((MEOW_fp_glDepthRangex) (chain_next->func)) (n, f);
}


inline void fast_call_chain_caller_glDepthRangexOES (GLfixed n, GLfixed f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDepthRangexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDepthRangexOES)] = chain_next->next;
    ((MEOW_fp_glDepthRangexOES) (chain_next->func)) (n, f);
}


inline void fast_call_chain_caller_glDetachShader (GLuint program, GLuint shader)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDetachShader)];
    chain->chain_next.chain[MEOW_API_INDEX(glDetachShader)] = chain_next->next;
    ((MEOW_fp_glDetachShader) (chain_next->func)) (program, shader);
}


inline void fast_call_chain_caller_glDisable (GLenum cap)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisable)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisable)] = chain_next->next;
    ((MEOW_fp_glDisable) (chain_next->func)) (cap);
}


inline void fast_call_chain_caller_glDisableClientState (GLenum array)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisableClientState)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisableClientState)] = chain_next->next;
    ((MEOW_fp_glDisableClientState) (chain_next->func)) (array);
}


inline void fast_call_chain_caller_glDisableDriverControlQCOM (GLuint driverControl)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisableDriverControlQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisableDriverControlQCOM)] = chain_next->next;
    ((MEOW_fp_glDisableDriverControlQCOM) (chain_next->func)) (driverControl);
}


inline void fast_call_chain_caller_glDisableVertexAttribArray (GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisableVertexAttribArray)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisableVertexAttribArray)] = chain_next->next;
    ((MEOW_fp_glDisableVertexAttribArray) (chain_next->func)) (index);
}


inline void fast_call_chain_caller_glDisablei (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisablei)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisablei)] = chain_next->next;
    ((MEOW_fp_glDisablei) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glDisableiEXT (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisableiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisableiEXT)] = chain_next->next;
    ((MEOW_fp_glDisableiEXT) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glDisableiNV (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisableiNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisableiNV)] = chain_next->next;
    ((MEOW_fp_glDisableiNV) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glDisableiOES (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDisableiOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDisableiOES)] = chain_next->next;
    ((MEOW_fp_glDisableiOES) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glDiscardFramebufferEXT (GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDiscardFramebufferEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDiscardFramebufferEXT)] = chain_next->next;
    ((MEOW_fp_glDiscardFramebufferEXT) (chain_next->func)) (target, numAttachments, attachments);
}


inline void fast_call_chain_caller_glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDispatchCompute)];
    chain->chain_next.chain[MEOW_API_INDEX(glDispatchCompute)] = chain_next->next;
    ((MEOW_fp_glDispatchCompute) (chain_next->func)) (num_groups_x, num_groups_y, num_groups_z);
}


inline void fast_call_chain_caller_glDispatchComputeIndirect (GLintptr indirect)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDispatchComputeIndirect)];
    chain->chain_next.chain[MEOW_API_INDEX(glDispatchComputeIndirect)] = chain_next->next;
    ((MEOW_fp_glDispatchComputeIndirect) (chain_next->func)) (indirect);
}


inline void fast_call_chain_caller_glDrawArrays (GLenum mode, GLint first, GLsizei count)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawArrays)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawArrays)] = chain_next->next;
    ((MEOW_fp_glDrawArrays) (chain_next->func)) (mode, first, count);
}


inline void fast_call_chain_caller_glDrawArraysIndirect (GLenum mode, const void *indirect)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysIndirect)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysIndirect)] = chain_next->next;
    ((MEOW_fp_glDrawArraysIndirect) (chain_next->func)) (mode, indirect);
}


inline void fast_call_chain_caller_glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstanced)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstanced)] = chain_next->next;
    ((MEOW_fp_glDrawArraysInstanced) (chain_next->func)) (mode, first, count, instancecount);
}


inline void fast_call_chain_caller_glDrawArraysInstancedANGLE (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedANGLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedANGLE)] = chain_next->next;
    ((MEOW_fp_glDrawArraysInstancedANGLE) (chain_next->func)) (mode, first, count, primcount);
}


inline void fast_call_chain_caller_glDrawArraysInstancedBaseInstanceEXT (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedBaseInstanceEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedBaseInstanceEXT)] = chain_next->next;
    ((MEOW_fp_glDrawArraysInstancedBaseInstanceEXT) (chain_next->func)) (mode, first, count, instancecount, baseinstance);
}


inline void fast_call_chain_caller_glDrawArraysInstancedEXT (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedEXT)] = chain_next->next;
    ((MEOW_fp_glDrawArraysInstancedEXT) (chain_next->func)) (mode, first, count, primcount);
}


inline void fast_call_chain_caller_glDrawArraysInstancedNV (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawArraysInstancedNV)] = chain_next->next;
    ((MEOW_fp_glDrawArraysInstancedNV) (chain_next->func)) (mode, first, count, primcount);
}


inline void fast_call_chain_caller_glDrawBuffers (GLsizei n, const GLenum *bufs)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffers)] = chain_next->next;
    ((MEOW_fp_glDrawBuffers) (chain_next->func)) (n, bufs);
}


inline void fast_call_chain_caller_glDrawBuffersEXT (GLsizei n, const GLenum *bufs)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffersEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffersEXT)] = chain_next->next;
    ((MEOW_fp_glDrawBuffersEXT) (chain_next->func)) (n, bufs);
}


inline void fast_call_chain_caller_glDrawBuffersIndexedEXT (GLint n, const GLenum *location, const GLint *indices)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffersIndexedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffersIndexedEXT)] = chain_next->next;
    ((MEOW_fp_glDrawBuffersIndexedEXT) (chain_next->func)) (n, location, indices);
}


inline void fast_call_chain_caller_glDrawBuffersNV (GLsizei n, const GLenum *bufs)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffersNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawBuffersNV)] = chain_next->next;
    ((MEOW_fp_glDrawBuffersNV) (chain_next->func)) (n, bufs);
}


inline void fast_call_chain_caller_glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElements)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElements)] = chain_next->next;
    ((MEOW_fp_glDrawElements) (chain_next->func)) (mode, count, type, indices);
}


inline void fast_call_chain_caller_glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsBaseVertex)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsBaseVertex)] = chain_next->next;
    ((MEOW_fp_glDrawElementsBaseVertex) (chain_next->func)) (mode, count, type, indices, basevertex);
}


inline void fast_call_chain_caller_glDrawElementsBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsBaseVertexEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsBaseVertexEXT)] = chain_next->next;
    ((MEOW_fp_glDrawElementsBaseVertexEXT) (chain_next->func)) (mode, count, type, indices, basevertex);
}


inline void fast_call_chain_caller_glDrawElementsBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsBaseVertexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsBaseVertexOES)] = chain_next->next;
    ((MEOW_fp_glDrawElementsBaseVertexOES) (chain_next->func)) (mode, count, type, indices, basevertex);
}


inline void fast_call_chain_caller_glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsIndirect)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsIndirect)] = chain_next->next;
    ((MEOW_fp_glDrawElementsIndirect) (chain_next->func)) (mode, type, indirect);
}


inline void fast_call_chain_caller_glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstanced)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstanced)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstanced) (chain_next->func)) (mode, count, type, indices, instancecount);
}


inline void fast_call_chain_caller_glDrawElementsInstancedANGLE (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedANGLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedANGLE)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedANGLE) (chain_next->func)) (mode, count, type, indices, primcount);
}


inline void fast_call_chain_caller_glDrawElementsInstancedBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseInstanceEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseInstanceEXT)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedBaseInstanceEXT) (chain_next->func)) (mode, count, type, indices, instancecount, baseinstance);
}


inline void fast_call_chain_caller_glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertex)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertex)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedBaseVertex) (chain_next->func)) (mode, count, type, indices, instancecount, basevertex);
}


inline void fast_call_chain_caller_glDrawElementsInstancedBaseVertexBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertexBaseInstanceEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertexBaseInstanceEXT)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedBaseVertexBaseInstanceEXT) (chain_next->func)) (mode, count, type, indices, instancecount, basevertex, baseinstance);
}


inline void fast_call_chain_caller_glDrawElementsInstancedBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertexEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertexEXT)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedBaseVertexEXT) (chain_next->func)) (mode, count, type, indices, instancecount, basevertex);
}


inline void fast_call_chain_caller_glDrawElementsInstancedBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedBaseVertexOES)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedBaseVertexOES) (chain_next->func)) (mode, count, type, indices, instancecount, basevertex);
}


inline void fast_call_chain_caller_glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedEXT)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedEXT) (chain_next->func)) (mode, count, type, indices, primcount);
}


inline void fast_call_chain_caller_glDrawElementsInstancedNV (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawElementsInstancedNV)] = chain_next->next;
    ((MEOW_fp_glDrawElementsInstancedNV) (chain_next->func)) (mode, count, type, indices, primcount);
}


inline void fast_call_chain_caller_glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElements)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElements)] = chain_next->next;
    ((MEOW_fp_glDrawRangeElements) (chain_next->func)) (mode, start, end, count, type, indices);
}


inline void fast_call_chain_caller_glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElementsBaseVertex)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElementsBaseVertex)] = chain_next->next;
    ((MEOW_fp_glDrawRangeElementsBaseVertex) (chain_next->func)) (mode, start, end, count, type, indices, basevertex);
}


inline void fast_call_chain_caller_glDrawRangeElementsBaseVertexEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElementsBaseVertexEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElementsBaseVertexEXT)] = chain_next->next;
    ((MEOW_fp_glDrawRangeElementsBaseVertexEXT) (chain_next->func)) (mode, start, end, count, type, indices, basevertex);
}


inline void fast_call_chain_caller_glDrawRangeElementsBaseVertexOES (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElementsBaseVertexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawRangeElementsBaseVertexOES)] = chain_next->next;
    ((MEOW_fp_glDrawRangeElementsBaseVertexOES) (chain_next->func)) (mode, start, end, count, type, indices, basevertex);
}


inline void fast_call_chain_caller_glDrawTexfOES (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexfOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexfOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexfOES) (chain_next->func)) (x, y, z, width, height);
}


inline void fast_call_chain_caller_glDrawTexfvOES (const GLfloat *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexfvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexfvOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexfvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glDrawTexiOES (GLint x, GLint y, GLint z, GLint width, GLint height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexiOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexiOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexiOES) (chain_next->func)) (x, y, z, width, height);
}


inline void fast_call_chain_caller_glDrawTexivOES (const GLint *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexivOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexivOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glDrawTexsOES (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexsOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexsOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexsOES) (chain_next->func)) (x, y, z, width, height);
}


inline void fast_call_chain_caller_glDrawTexsvOES (const GLshort *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexsvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexsvOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexsvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glDrawTexxOES (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexxOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexxOES) (chain_next->func)) (x, y, z, width, height);
}


inline void fast_call_chain_caller_glDrawTexxvOES (const GLfixed *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTexxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTexxvOES)] = chain_next->next;
    ((MEOW_fp_glDrawTexxvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glDrawTransformFeedbackEXT (GLenum mode, GLuint id)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTransformFeedbackEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTransformFeedbackEXT)] = chain_next->next;
    ((MEOW_fp_glDrawTransformFeedbackEXT) (chain_next->func)) (mode, id);
}


inline void fast_call_chain_caller_glDrawTransformFeedbackInstancedEXT (GLenum mode, GLuint id, GLsizei instancecount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawTransformFeedbackInstancedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawTransformFeedbackInstancedEXT)] = chain_next->next;
    ((MEOW_fp_glDrawTransformFeedbackInstancedEXT) (chain_next->func)) (mode, id, instancecount);
}


inline void fast_call_chain_caller_glDrawVkImageNV (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glDrawVkImageNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glDrawVkImageNV)] = chain_next->next;
    ((MEOW_fp_glDrawVkImageNV) (chain_next->func)) (vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}


inline void fast_call_chain_caller_glEGLImageTargetRenderbufferStorageOES (GLenum target, GLeglImageOES image)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetRenderbufferStorageOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetRenderbufferStorageOES)] = chain_next->next;
    ((MEOW_fp_glEGLImageTargetRenderbufferStorageOES) (chain_next->func)) (target, image);
}


inline void fast_call_chain_caller_glEGLImageTargetTexStorageEXT (GLenum target, GLeglImageOES image, const GLint* attrib_list)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetTexStorageEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetTexStorageEXT)] = chain_next->next;
    ((MEOW_fp_glEGLImageTargetTexStorageEXT) (chain_next->func)) (target, image, attrib_list);
}


inline void fast_call_chain_caller_glEGLImageTargetTexture2DOES (GLenum target, GLeglImageOES image)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetTexture2DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetTexture2DOES)] = chain_next->next;
    ((MEOW_fp_glEGLImageTargetTexture2DOES) (chain_next->func)) (target, image);
}


inline void fast_call_chain_caller_glEGLImageTargetTextureStorageEXT (GLuint texture, GLeglImageOES image, const GLint* attrib_list)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetTextureStorageEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glEGLImageTargetTextureStorageEXT)] = chain_next->next;
    ((MEOW_fp_glEGLImageTargetTextureStorageEXT) (chain_next->func)) (texture, image, attrib_list);
}


inline void fast_call_chain_caller_glEnable (GLenum cap)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnable)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnable)] = chain_next->next;
    ((MEOW_fp_glEnable) (chain_next->func)) (cap);
}


inline void fast_call_chain_caller_glEnableClientState (GLenum array)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnableClientState)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnableClientState)] = chain_next->next;
    ((MEOW_fp_glEnableClientState) (chain_next->func)) (array);
}


inline void fast_call_chain_caller_glEnableDriverControlQCOM (GLuint driverControl)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnableDriverControlQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnableDriverControlQCOM)] = chain_next->next;
    ((MEOW_fp_glEnableDriverControlQCOM) (chain_next->func)) (driverControl);
}


inline void fast_call_chain_caller_glEnableVertexAttribArray (GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnableVertexAttribArray)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnableVertexAttribArray)] = chain_next->next;
    ((MEOW_fp_glEnableVertexAttribArray) (chain_next->func)) (index);
}


inline void fast_call_chain_caller_glEnablei (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnablei)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnablei)] = chain_next->next;
    ((MEOW_fp_glEnablei) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glEnableiEXT (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnableiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnableiEXT)] = chain_next->next;
    ((MEOW_fp_glEnableiEXT) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glEnableiNV (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnableiNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnableiNV)] = chain_next->next;
    ((MEOW_fp_glEnableiNV) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glEnableiOES (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEnableiOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glEnableiOES)] = chain_next->next;
    ((MEOW_fp_glEnableiOES) (chain_next->func)) (target, index);
}


inline void fast_call_chain_caller_glEndConditionalRenderNV (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEndConditionalRenderNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glEndConditionalRenderNV)] = chain_next->next;
    ((MEOW_fp_glEndConditionalRenderNV) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glEndPerfMonitorAMD (GLuint monitor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEndPerfMonitorAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glEndPerfMonitorAMD)] = chain_next->next;
    ((MEOW_fp_glEndPerfMonitorAMD) (chain_next->func)) (monitor);
}


inline void fast_call_chain_caller_glEndPerfQueryINTEL (GLuint queryHandle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEndPerfQueryINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glEndPerfQueryINTEL)] = chain_next->next;
    ((MEOW_fp_glEndPerfQueryINTEL) (chain_next->func)) (queryHandle);
}


inline void fast_call_chain_caller_glEndQuery (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEndQuery)];
    chain->chain_next.chain[MEOW_API_INDEX(glEndQuery)] = chain_next->next;
    ((MEOW_fp_glEndQuery) (chain_next->func)) (target);
}


inline void fast_call_chain_caller_glEndQueryEXT (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEndQueryEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glEndQueryEXT)] = chain_next->next;
    ((MEOW_fp_glEndQueryEXT) (chain_next->func)) (target);
}


inline void fast_call_chain_caller_glEndTilingQCOM (GLbitfield preserveMask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEndTilingQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glEndTilingQCOM)] = chain_next->next;
    ((MEOW_fp_glEndTilingQCOM) (chain_next->func)) (preserveMask);
}


inline void fast_call_chain_caller_glEndTransformFeedback (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glEndTransformFeedback)];
    chain->chain_next.chain[MEOW_API_INDEX(glEndTransformFeedback)] = chain_next->next;
    ((MEOW_fp_glEndTransformFeedback) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glExtGetBufferPointervQCOM (GLenum target, void **params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetBufferPointervQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetBufferPointervQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetBufferPointervQCOM) (chain_next->func)) (target, params);
}


inline void fast_call_chain_caller_glExtGetBuffersQCOM (GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetBuffersQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetBuffersQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetBuffersQCOM) (chain_next->func)) (buffers, maxBuffers, numBuffers);
}


inline void fast_call_chain_caller_glExtGetFramebuffersQCOM (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetFramebuffersQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetFramebuffersQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetFramebuffersQCOM) (chain_next->func)) (framebuffers, maxFramebuffers, numFramebuffers);
}


inline void fast_call_chain_caller_glExtGetProgramBinarySourceQCOM (GLuint program, GLenum shadertype, GLchar *source, GLint *length)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetProgramBinarySourceQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetProgramBinarySourceQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetProgramBinarySourceQCOM) (chain_next->func)) (program, shadertype, source, length);
}


inline void fast_call_chain_caller_glExtGetProgramsQCOM (GLuint *programs, GLint maxPrograms, GLint *numPrograms)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetProgramsQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetProgramsQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetProgramsQCOM) (chain_next->func)) (programs, maxPrograms, numPrograms);
}


inline void fast_call_chain_caller_glExtGetRenderbuffersQCOM (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetRenderbuffersQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetRenderbuffersQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetRenderbuffersQCOM) (chain_next->func)) (renderbuffers, maxRenderbuffers, numRenderbuffers);
}


inline void fast_call_chain_caller_glExtGetShadersQCOM (GLuint *shaders, GLint maxShaders, GLint *numShaders)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetShadersQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetShadersQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetShadersQCOM) (chain_next->func)) (shaders, maxShaders, numShaders);
}


inline void fast_call_chain_caller_glExtGetTexLevelParameterivQCOM (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetTexLevelParameterivQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetTexLevelParameterivQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetTexLevelParameterivQCOM) (chain_next->func)) (texture, face, level, pname, params);
}


inline void fast_call_chain_caller_glExtGetTexSubImageQCOM (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetTexSubImageQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetTexSubImageQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetTexSubImageQCOM) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}


inline void fast_call_chain_caller_glExtGetTexturesQCOM (GLuint *textures, GLint maxTextures, GLint *numTextures)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtGetTexturesQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtGetTexturesQCOM)] = chain_next->next;
    ((MEOW_fp_glExtGetTexturesQCOM) (chain_next->func)) (textures, maxTextures, numTextures);
}



inline GLboolean fast_call_chain_caller_glExtIsProgramBinaryQCOM (GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtIsProgramBinaryQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtIsProgramBinaryQCOM)] = chain_next->next;
    return ((MEOW_fp_glExtIsProgramBinaryQCOM) (chain_next->func)) (program);

}


inline void fast_call_chain_caller_glExtTexObjectStateOverrideiQCOM (GLenum target, GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glExtTexObjectStateOverrideiQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glExtTexObjectStateOverrideiQCOM)] = chain_next->next;
    ((MEOW_fp_glExtTexObjectStateOverrideiQCOM) (chain_next->func)) (target, pname, param);
}



inline GLsync fast_call_chain_caller_glFenceSync (GLenum condition, GLbitfield flags)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFenceSync)];
    chain->chain_next.chain[MEOW_API_INDEX(glFenceSync)] = chain_next->next;
    return ((MEOW_fp_glFenceSync) (chain_next->func)) (condition, flags);

}



inline GLsync fast_call_chain_caller_glFenceSyncAPPLE (GLenum condition, GLbitfield flags)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFenceSyncAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glFenceSyncAPPLE)] = chain_next->next;
    return ((MEOW_fp_glFenceSyncAPPLE) (chain_next->func)) (condition, flags);

}


inline void fast_call_chain_caller_glFinish (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFinish)];
    chain->chain_next.chain[MEOW_API_INDEX(glFinish)] = chain_next->next;
    ((MEOW_fp_glFinish) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glFinishFenceNV (GLuint fence)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFinishFenceNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glFinishFenceNV)] = chain_next->next;
    ((MEOW_fp_glFinishFenceNV) (chain_next->func)) (fence);
}


inline void fast_call_chain_caller_glFlush (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFlush)];
    chain->chain_next.chain[MEOW_API_INDEX(glFlush)] = chain_next->next;
    ((MEOW_fp_glFlush) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFlushMappedBufferRange)];
    chain->chain_next.chain[MEOW_API_INDEX(glFlushMappedBufferRange)] = chain_next->next;
    ((MEOW_fp_glFlushMappedBufferRange) (chain_next->func)) (target, offset, length);
}


inline void fast_call_chain_caller_glFlushMappedBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFlushMappedBufferRangeEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glFlushMappedBufferRangeEXT)] = chain_next->next;
    ((MEOW_fp_glFlushMappedBufferRangeEXT) (chain_next->func)) (target, offset, length);
}


inline void fast_call_chain_caller_glFogf (GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFogf)];
    chain->chain_next.chain[MEOW_API_INDEX(glFogf)] = chain_next->next;
    ((MEOW_fp_glFogf) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glFogfv (GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFogfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glFogfv)] = chain_next->next;
    ((MEOW_fp_glFogfv) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glFogx (GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFogx)];
    chain->chain_next.chain[MEOW_API_INDEX(glFogx)] = chain_next->next;
    ((MEOW_fp_glFogx) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glFogxOES (GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFogxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFogxOES)] = chain_next->next;
    ((MEOW_fp_glFogxOES) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glFogxv (GLenum pname, const GLfixed *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFogxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glFogxv)] = chain_next->next;
    ((MEOW_fp_glFogxv) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glFogxvOES (GLenum pname, const GLfixed *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFogxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFogxvOES)] = chain_next->next;
    ((MEOW_fp_glFogxvOES) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glFragmentCoverageColorNV (GLuint color)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFragmentCoverageColorNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glFragmentCoverageColorNV)] = chain_next->next;
    ((MEOW_fp_glFragmentCoverageColorNV) (chain_next->func)) (color);
}


inline void fast_call_chain_caller_glFramebufferFetchBarrierEXT (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFetchBarrierEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFetchBarrierEXT)] = chain_next->next;
    ((MEOW_fp_glFramebufferFetchBarrierEXT) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glFramebufferFetchBarrierQCOM (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFetchBarrierQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFetchBarrierQCOM)] = chain_next->next;
    ((MEOW_fp_glFramebufferFetchBarrierQCOM) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glFramebufferFoveationConfigQCOM (GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFoveationConfigQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFoveationConfigQCOM)] = chain_next->next;
    ((MEOW_fp_glFramebufferFoveationConfigQCOM) (chain_next->func)) (framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
}


inline void fast_call_chain_caller_glFramebufferFoveationParametersQCOM (GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFoveationParametersQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferFoveationParametersQCOM)] = chain_next->next;
    ((MEOW_fp_glFramebufferFoveationParametersQCOM) (chain_next->func)) (framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}


inline void fast_call_chain_caller_glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferParameteri)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferParameteri)] = chain_next->next;
    ((MEOW_fp_glFramebufferParameteri) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glFramebufferPixelLocalStorageSizeEXT (GLuint target, GLsizei size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferPixelLocalStorageSizeEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferPixelLocalStorageSizeEXT)] = chain_next->next;
    ((MEOW_fp_glFramebufferPixelLocalStorageSizeEXT) (chain_next->func)) (target, size);
}


inline void fast_call_chain_caller_glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferRenderbuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferRenderbuffer)] = chain_next->next;
    ((MEOW_fp_glFramebufferRenderbuffer) (chain_next->func)) (target, attachment, renderbuffertarget, renderbuffer);
}


inline void fast_call_chain_caller_glFramebufferRenderbufferOES (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferRenderbufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferRenderbufferOES)] = chain_next->next;
    ((MEOW_fp_glFramebufferRenderbufferOES) (chain_next->func)) (target, attachment, renderbuffertarget, renderbuffer);
}


inline void fast_call_chain_caller_glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferSampleLocationsfvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferSampleLocationsfvNV)] = chain_next->next;
    ((MEOW_fp_glFramebufferSampleLocationsfvNV) (chain_next->func)) (target, start, count, v);
}


inline void fast_call_chain_caller_glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture)] = chain_next->next;
    ((MEOW_fp_glFramebufferTexture) (chain_next->func)) (target, attachment, texture, level);
}


inline void fast_call_chain_caller_glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2D)] = chain_next->next;
    ((MEOW_fp_glFramebufferTexture2D) (chain_next->func)) (target, attachment, textarget, texture, level);
}


inline void fast_call_chain_caller_glFramebufferTexture2DDownsampleIMG (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DDownsampleIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DDownsampleIMG)] = chain_next->next;
    ((MEOW_fp_glFramebufferTexture2DDownsampleIMG) (chain_next->func)) (target, attachment, textarget, texture, level, xscale, yscale);
}


inline void fast_call_chain_caller_glFramebufferTexture2DMultisampleEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DMultisampleEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DMultisampleEXT)] = chain_next->next;
    ((MEOW_fp_glFramebufferTexture2DMultisampleEXT) (chain_next->func)) (target, attachment, textarget, texture, level, samples);
}


inline void fast_call_chain_caller_glFramebufferTexture2DMultisampleIMG (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DMultisampleIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DMultisampleIMG)] = chain_next->next;
    ((MEOW_fp_glFramebufferTexture2DMultisampleIMG) (chain_next->func)) (target, attachment, textarget, texture, level, samples);
}


inline void fast_call_chain_caller_glFramebufferTexture2DOES (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture2DOES)] = chain_next->next;
    ((MEOW_fp_glFramebufferTexture2DOES) (chain_next->func)) (target, attachment, textarget, texture, level);
}


inline void fast_call_chain_caller_glFramebufferTexture3DOES (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture3DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTexture3DOES)] = chain_next->next;
    ((MEOW_fp_glFramebufferTexture3DOES) (chain_next->func)) (target, attachment, textarget, texture, level, zoffset);
}


inline void fast_call_chain_caller_glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureEXT)] = chain_next->next;
    ((MEOW_fp_glFramebufferTextureEXT) (chain_next->func)) (target, attachment, texture, level);
}


inline void fast_call_chain_caller_glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureLayer)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureLayer)] = chain_next->next;
    ((MEOW_fp_glFramebufferTextureLayer) (chain_next->func)) (target, attachment, texture, level, layer);
}


inline void fast_call_chain_caller_glFramebufferTextureLayerDownsampleIMG (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureLayerDownsampleIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureLayerDownsampleIMG)] = chain_next->next;
    ((MEOW_fp_glFramebufferTextureLayerDownsampleIMG) (chain_next->func)) (target, attachment, texture, level, layer, xscale, yscale);
}


inline void fast_call_chain_caller_glFramebufferTextureMultisampleMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureMultisampleMultiviewOVR)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureMultisampleMultiviewOVR)] = chain_next->next;
    ((MEOW_fp_glFramebufferTextureMultisampleMultiviewOVR) (chain_next->func)) (target, attachment, texture, level, samples, baseViewIndex, numViews);
}


inline void fast_call_chain_caller_glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureMultiviewOVR)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureMultiviewOVR)] = chain_next->next;
    ((MEOW_fp_glFramebufferTextureMultiviewOVR) (chain_next->func)) (target, attachment, texture, level, baseViewIndex, numViews);
}


inline void fast_call_chain_caller_glFramebufferTextureOES (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFramebufferTextureOES)] = chain_next->next;
    ((MEOW_fp_glFramebufferTextureOES) (chain_next->func)) (target, attachment, texture, level);
}


inline void fast_call_chain_caller_glFrontFace (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFrontFace)];
    chain->chain_next.chain[MEOW_API_INDEX(glFrontFace)] = chain_next->next;
    ((MEOW_fp_glFrontFace) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glFrustumf (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFrustumf)];
    chain->chain_next.chain[MEOW_API_INDEX(glFrustumf)] = chain_next->next;
    ((MEOW_fp_glFrustumf) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glFrustumfOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFrustumfOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFrustumfOES)] = chain_next->next;
    ((MEOW_fp_glFrustumfOES) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glFrustumx (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFrustumx)];
    chain->chain_next.chain[MEOW_API_INDEX(glFrustumx)] = chain_next->next;
    ((MEOW_fp_glFrustumx) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glFrustumxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glFrustumxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glFrustumxOES)] = chain_next->next;
    ((MEOW_fp_glFrustumxOES) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glGenBuffers (GLsizei n, GLuint *buffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenBuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenBuffers)] = chain_next->next;
    ((MEOW_fp_glGenBuffers) (chain_next->func)) (n, buffers);
}


inline void fast_call_chain_caller_glGenFencesNV (GLsizei n, GLuint *fences)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenFencesNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenFencesNV)] = chain_next->next;
    ((MEOW_fp_glGenFencesNV) (chain_next->func)) (n, fences);
}


inline void fast_call_chain_caller_glGenFramebuffers (GLsizei n, GLuint *framebuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenFramebuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenFramebuffers)] = chain_next->next;
    ((MEOW_fp_glGenFramebuffers) (chain_next->func)) (n, framebuffers);
}


inline void fast_call_chain_caller_glGenFramebuffersOES (GLsizei n, GLuint *framebuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenFramebuffersOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenFramebuffersOES)] = chain_next->next;
    ((MEOW_fp_glGenFramebuffersOES) (chain_next->func)) (n, framebuffers);
}



inline GLuint fast_call_chain_caller_glGenPathsNV (GLsizei range)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenPathsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenPathsNV)] = chain_next->next;
    return ((MEOW_fp_glGenPathsNV) (chain_next->func)) (range);

}


inline void fast_call_chain_caller_glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenPerfMonitorsAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenPerfMonitorsAMD)] = chain_next->next;
    ((MEOW_fp_glGenPerfMonitorsAMD) (chain_next->func)) (n, monitors);
}


inline void fast_call_chain_caller_glGenProgramPipelines (GLsizei n, GLuint *pipelines)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenProgramPipelines)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenProgramPipelines)] = chain_next->next;
    ((MEOW_fp_glGenProgramPipelines) (chain_next->func)) (n, pipelines);
}


inline void fast_call_chain_caller_glGenProgramPipelinesEXT (GLsizei n, GLuint *pipelines)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenProgramPipelinesEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenProgramPipelinesEXT)] = chain_next->next;
    ((MEOW_fp_glGenProgramPipelinesEXT) (chain_next->func)) (n, pipelines);
}


inline void fast_call_chain_caller_glGenQueries (GLsizei n, GLuint *ids)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenQueries)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenQueries)] = chain_next->next;
    ((MEOW_fp_glGenQueries) (chain_next->func)) (n, ids);
}


inline void fast_call_chain_caller_glGenQueriesEXT (GLsizei n, GLuint *ids)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenQueriesEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenQueriesEXT)] = chain_next->next;
    ((MEOW_fp_glGenQueriesEXT) (chain_next->func)) (n, ids);
}


inline void fast_call_chain_caller_glGenRenderbuffers (GLsizei n, GLuint *renderbuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenRenderbuffers)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenRenderbuffers)] = chain_next->next;
    ((MEOW_fp_glGenRenderbuffers) (chain_next->func)) (n, renderbuffers);
}


inline void fast_call_chain_caller_glGenRenderbuffersOES (GLsizei n, GLuint *renderbuffers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenRenderbuffersOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenRenderbuffersOES)] = chain_next->next;
    ((MEOW_fp_glGenRenderbuffersOES) (chain_next->func)) (n, renderbuffers);
}


inline void fast_call_chain_caller_glGenSamplers (GLsizei count, GLuint *samplers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenSamplers)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenSamplers)] = chain_next->next;
    ((MEOW_fp_glGenSamplers) (chain_next->func)) (count, samplers);
}


inline void fast_call_chain_caller_glGenSemaphoresEXT (GLsizei n, GLuint *semaphores)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenSemaphoresEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenSemaphoresEXT)] = chain_next->next;
    ((MEOW_fp_glGenSemaphoresEXT) (chain_next->func)) (n, semaphores);
}


inline void fast_call_chain_caller_glGenTextures (GLsizei n, GLuint *textures)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenTextures)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenTextures)] = chain_next->next;
    ((MEOW_fp_glGenTextures) (chain_next->func)) (n, textures);
}


inline void fast_call_chain_caller_glGenTransformFeedbacks (GLsizei n, GLuint *ids)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenTransformFeedbacks)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenTransformFeedbacks)] = chain_next->next;
    ((MEOW_fp_glGenTransformFeedbacks) (chain_next->func)) (n, ids);
}


inline void fast_call_chain_caller_glGenVertexArrays (GLsizei n, GLuint *arrays)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenVertexArrays)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenVertexArrays)] = chain_next->next;
    ((MEOW_fp_glGenVertexArrays) (chain_next->func)) (n, arrays);
}


inline void fast_call_chain_caller_glGenVertexArraysOES (GLsizei n, GLuint *arrays)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenVertexArraysOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenVertexArraysOES)] = chain_next->next;
    ((MEOW_fp_glGenVertexArraysOES) (chain_next->func)) (n, arrays);
}


inline void fast_call_chain_caller_glGenerateMipmap (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenerateMipmap)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenerateMipmap)] = chain_next->next;
    ((MEOW_fp_glGenerateMipmap) (chain_next->func)) (target);
}


inline void fast_call_chain_caller_glGenerateMipmapOES (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGenerateMipmapOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGenerateMipmapOES)] = chain_next->next;
    ((MEOW_fp_glGenerateMipmapOES) (chain_next->func)) (target);
}


inline void fast_call_chain_caller_glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetActiveAttrib)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetActiveAttrib)] = chain_next->next;
    ((MEOW_fp_glGetActiveAttrib) (chain_next->func)) (program, index, bufSize, length, size, type, name);
}


inline void fast_call_chain_caller_glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniform)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniform)] = chain_next->next;
    ((MEOW_fp_glGetActiveUniform) (chain_next->func)) (program, index, bufSize, length, size, type, name);
}


inline void fast_call_chain_caller_glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniformBlockName)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniformBlockName)] = chain_next->next;
    ((MEOW_fp_glGetActiveUniformBlockName) (chain_next->func)) (program, uniformBlockIndex, bufSize, length, uniformBlockName);
}


inline void fast_call_chain_caller_glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniformBlockiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniformBlockiv)] = chain_next->next;
    ((MEOW_fp_glGetActiveUniformBlockiv) (chain_next->func)) (program, uniformBlockIndex, pname, params);
}


inline void fast_call_chain_caller_glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniformsiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetActiveUniformsiv)] = chain_next->next;
    ((MEOW_fp_glGetActiveUniformsiv) (chain_next->func)) (program, uniformCount, uniformIndices, pname, params);
}


inline void fast_call_chain_caller_glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetAttachedShaders)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetAttachedShaders)] = chain_next->next;
    ((MEOW_fp_glGetAttachedShaders) (chain_next->func)) (program, maxCount, count, shaders);
}



inline GLint fast_call_chain_caller_glGetAttribLocation (GLuint program, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetAttribLocation)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetAttribLocation)] = chain_next->next;
    return ((MEOW_fp_glGetAttribLocation) (chain_next->func)) (program, name);

}


inline void fast_call_chain_caller_glGetBooleani_v (GLenum target, GLuint index, GLboolean *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetBooleani_v)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetBooleani_v)] = chain_next->next;
    ((MEOW_fp_glGetBooleani_v) (chain_next->func)) (target, index, data);
}


inline void fast_call_chain_caller_glGetBooleanv (GLenum pname, GLboolean *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetBooleanv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetBooleanv)] = chain_next->next;
    ((MEOW_fp_glGetBooleanv) (chain_next->func)) (pname, data);
}


inline void fast_call_chain_caller_glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetBufferParameteri64v)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetBufferParameteri64v)] = chain_next->next;
    ((MEOW_fp_glGetBufferParameteri64v) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetBufferParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetBufferParameteriv)] = chain_next->next;
    ((MEOW_fp_glGetBufferParameteriv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetBufferPointerv (GLenum target, GLenum pname, void **params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetBufferPointerv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetBufferPointerv)] = chain_next->next;
    ((MEOW_fp_glGetBufferPointerv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetBufferPointervOES (GLenum target, GLenum pname, void **params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetBufferPointervOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetBufferPointervOES)] = chain_next->next;
    ((MEOW_fp_glGetBufferPointervOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetClipPlanef (GLenum plane, GLfloat *equation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanef)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanef)] = chain_next->next;
    ((MEOW_fp_glGetClipPlanef) (chain_next->func)) (plane, equation);
}


inline void fast_call_chain_caller_glGetClipPlanefOES (GLenum plane, GLfloat *equation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanefOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanefOES)] = chain_next->next;
    ((MEOW_fp_glGetClipPlanefOES) (chain_next->func)) (plane, equation);
}


inline void fast_call_chain_caller_glGetClipPlanex (GLenum plane, GLfixed *equation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanex)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanex)] = chain_next->next;
    ((MEOW_fp_glGetClipPlanex) (chain_next->func)) (plane, equation);
}


inline void fast_call_chain_caller_glGetClipPlanexOES (GLenum plane, GLfixed *equation)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetClipPlanexOES)] = chain_next->next;
    ((MEOW_fp_glGetClipPlanexOES) (chain_next->func)) (plane, equation);
}


inline void fast_call_chain_caller_glGetCoverageModulationTableNV (GLsizei bufsize, GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetCoverageModulationTableNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetCoverageModulationTableNV)] = chain_next->next;
    ((MEOW_fp_glGetCoverageModulationTableNV) (chain_next->func)) (bufsize, v);
}



inline GLuint fast_call_chain_caller_glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetDebugMessageLog)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetDebugMessageLog)] = chain_next->next;
    return ((MEOW_fp_glGetDebugMessageLog) (chain_next->func)) (count, bufSize, sources, types, ids, severities, lengths, messageLog);

}



inline GLuint fast_call_chain_caller_glGetDebugMessageLogKHR (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetDebugMessageLogKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetDebugMessageLogKHR)] = chain_next->next;
    return ((MEOW_fp_glGetDebugMessageLogKHR) (chain_next->func)) (count, bufSize, sources, types, ids, severities, lengths, messageLog);

}


inline void fast_call_chain_caller_glGetDriverControlStringQCOM (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetDriverControlStringQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetDriverControlStringQCOM)] = chain_next->next;
    ((MEOW_fp_glGetDriverControlStringQCOM) (chain_next->func)) (driverControl, bufSize, length, driverControlString);
}


inline void fast_call_chain_caller_glGetDriverControlsQCOM (GLint *num, GLsizei size, GLuint *driverControls)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetDriverControlsQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetDriverControlsQCOM)] = chain_next->next;
    ((MEOW_fp_glGetDriverControlsQCOM) (chain_next->func)) (num, size, driverControls);
}



inline GLenum fast_call_chain_caller_glGetError (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetError)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetError)] = chain_next->next;
    return ((MEOW_fp_glGetError) (chain_next->func)) ();

}


inline void fast_call_chain_caller_glGetFenceivNV (GLuint fence, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFenceivNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFenceivNV)] = chain_next->next;
    ((MEOW_fp_glGetFenceivNV) (chain_next->func)) (fence, pname, params);
}


inline void fast_call_chain_caller_glGetFirstPerfQueryIdINTEL (GLuint *queryId)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFirstPerfQueryIdINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFirstPerfQueryIdINTEL)] = chain_next->next;
    ((MEOW_fp_glGetFirstPerfQueryIdINTEL) (chain_next->func)) (queryId);
}


inline void fast_call_chain_caller_glGetFixedv (GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFixedv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFixedv)] = chain_next->next;
    ((MEOW_fp_glGetFixedv) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glGetFixedvOES (GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFixedvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFixedvOES)] = chain_next->next;
    ((MEOW_fp_glGetFixedvOES) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glGetFloati_vNV (GLenum target, GLuint index, GLfloat *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFloati_vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFloati_vNV)] = chain_next->next;
    ((MEOW_fp_glGetFloati_vNV) (chain_next->func)) (target, index, data);
}


inline void fast_call_chain_caller_glGetFloati_vOES (GLenum target, GLuint index, GLfloat *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFloati_vOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFloati_vOES)] = chain_next->next;
    ((MEOW_fp_glGetFloati_vOES) (chain_next->func)) (target, index, data);
}


inline void fast_call_chain_caller_glGetFloatv (GLenum pname, GLfloat *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFloatv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFloatv)] = chain_next->next;
    ((MEOW_fp_glGetFloatv) (chain_next->func)) (pname, data);
}



inline GLint fast_call_chain_caller_glGetFragDataIndexEXT (GLuint program, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFragDataIndexEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFragDataIndexEXT)] = chain_next->next;
    return ((MEOW_fp_glGetFragDataIndexEXT) (chain_next->func)) (program, name);

}



inline GLint fast_call_chain_caller_glGetFragDataLocation (GLuint program, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFragDataLocation)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFragDataLocation)] = chain_next->next;
    return ((MEOW_fp_glGetFragDataLocation) (chain_next->func)) (program, name);

}


inline void fast_call_chain_caller_glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferAttachmentParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferAttachmentParameteriv)] = chain_next->next;
    ((MEOW_fp_glGetFramebufferAttachmentParameteriv) (chain_next->func)) (target, attachment, pname, params);
}


inline void fast_call_chain_caller_glGetFramebufferAttachmentParameterivOES (GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferAttachmentParameterivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferAttachmentParameterivOES)] = chain_next->next;
    ((MEOW_fp_glGetFramebufferAttachmentParameterivOES) (chain_next->func)) (target, attachment, pname, params);
}


inline void fast_call_chain_caller_glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferParameteriv)] = chain_next->next;
    ((MEOW_fp_glGetFramebufferParameteriv) (chain_next->func)) (target, pname, params);
}



inline GLsizei fast_call_chain_caller_glGetFramebufferPixelLocalStorageSizeEXT (GLuint target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferPixelLocalStorageSizeEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetFramebufferPixelLocalStorageSizeEXT)] = chain_next->next;
    return ((MEOW_fp_glGetFramebufferPixelLocalStorageSizeEXT) (chain_next->func)) (target);

}



inline GLenum fast_call_chain_caller_glGetGraphicsResetStatus (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetGraphicsResetStatus)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetGraphicsResetStatus)] = chain_next->next;
    return ((MEOW_fp_glGetGraphicsResetStatus) (chain_next->func)) ();

}



inline GLenum fast_call_chain_caller_glGetGraphicsResetStatusEXT (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetGraphicsResetStatusEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetGraphicsResetStatusEXT)] = chain_next->next;
    return ((MEOW_fp_glGetGraphicsResetStatusEXT) (chain_next->func)) ();

}



inline GLenum fast_call_chain_caller_glGetGraphicsResetStatusKHR (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetGraphicsResetStatusKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetGraphicsResetStatusKHR)] = chain_next->next;
    return ((MEOW_fp_glGetGraphicsResetStatusKHR) (chain_next->func)) ();

}



inline GLuint64 fast_call_chain_caller_glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetImageHandleNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetImageHandleNV)] = chain_next->next;
    return ((MEOW_fp_glGetImageHandleNV) (chain_next->func)) (texture, level, layered, layer, format);

}


inline void fast_call_chain_caller_glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetInteger64i_v)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetInteger64i_v)] = chain_next->next;
    ((MEOW_fp_glGetInteger64i_v) (chain_next->func)) (target, index, data);
}


inline void fast_call_chain_caller_glGetInteger64v (GLenum pname, GLint64 *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetInteger64v)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetInteger64v)] = chain_next->next;
    ((MEOW_fp_glGetInteger64v) (chain_next->func)) (pname, data);
}


inline void fast_call_chain_caller_glGetInteger64vAPPLE (GLenum pname, GLint64 *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetInteger64vAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetInteger64vAPPLE)] = chain_next->next;
    ((MEOW_fp_glGetInteger64vAPPLE) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glGetIntegeri_v (GLenum target, GLuint index, GLint *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetIntegeri_v)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetIntegeri_v)] = chain_next->next;
    ((MEOW_fp_glGetIntegeri_v) (chain_next->func)) (target, index, data);
}


inline void fast_call_chain_caller_glGetIntegeri_vEXT (GLenum target, GLuint index, GLint *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetIntegeri_vEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetIntegeri_vEXT)] = chain_next->next;
    ((MEOW_fp_glGetIntegeri_vEXT) (chain_next->func)) (target, index, data);
}


inline void fast_call_chain_caller_glGetIntegerv (GLenum pname, GLint *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetIntegerv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetIntegerv)] = chain_next->next;
    ((MEOW_fp_glGetIntegerv) (chain_next->func)) (pname, data);
}


inline void fast_call_chain_caller_glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetInternalformatSampleivNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetInternalformatSampleivNV)] = chain_next->next;
    ((MEOW_fp_glGetInternalformatSampleivNV) (chain_next->func)) (target, internalformat, samples, pname, bufSize, params);
}


inline void fast_call_chain_caller_glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetInternalformativ)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetInternalformativ)] = chain_next->next;
    ((MEOW_fp_glGetInternalformativ) (chain_next->func)) (target, internalformat, pname, bufSize, params);
}


inline void fast_call_chain_caller_glGetLightfv (GLenum light, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetLightfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetLightfv)] = chain_next->next;
    ((MEOW_fp_glGetLightfv) (chain_next->func)) (light, pname, params);
}


inline void fast_call_chain_caller_glGetLightxv (GLenum light, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetLightxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetLightxv)] = chain_next->next;
    ((MEOW_fp_glGetLightxv) (chain_next->func)) (light, pname, params);
}


inline void fast_call_chain_caller_glGetLightxvOES (GLenum light, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetLightxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetLightxvOES)] = chain_next->next;
    ((MEOW_fp_glGetLightxvOES) (chain_next->func)) (light, pname, params);
}


inline void fast_call_chain_caller_glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetMaterialfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetMaterialfv)] = chain_next->next;
    ((MEOW_fp_glGetMaterialfv) (chain_next->func)) (face, pname, params);
}


inline void fast_call_chain_caller_glGetMaterialxv (GLenum face, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetMaterialxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetMaterialxv)] = chain_next->next;
    ((MEOW_fp_glGetMaterialxv) (chain_next->func)) (face, pname, params);
}


inline void fast_call_chain_caller_glGetMaterialxvOES (GLenum face, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetMaterialxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetMaterialxvOES)] = chain_next->next;
    ((MEOW_fp_glGetMaterialxvOES) (chain_next->func)) (face, pname, params);
}


inline void fast_call_chain_caller_glGetMemoryObjectParameterivEXT (GLuint memoryObject, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetMemoryObjectParameterivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetMemoryObjectParameterivEXT)] = chain_next->next;
    ((MEOW_fp_glGetMemoryObjectParameterivEXT) (chain_next->func)) (memoryObject, pname, params);
}


inline void fast_call_chain_caller_glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetMultisamplefv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetMultisamplefv)] = chain_next->next;
    ((MEOW_fp_glGetMultisamplefv) (chain_next->func)) (pname, index, val);
}


inline void fast_call_chain_caller_glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint *nextQueryId)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetNextPerfQueryIdINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetNextPerfQueryIdINTEL)] = chain_next->next;
    ((MEOW_fp_glGetNextPerfQueryIdINTEL) (chain_next->func)) (queryId, nextQueryId);
}


inline void fast_call_chain_caller_glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetObjectLabel)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetObjectLabel)] = chain_next->next;
    ((MEOW_fp_glGetObjectLabel) (chain_next->func)) (identifier, name, bufSize, length, label);
}


inline void fast_call_chain_caller_glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetObjectLabelEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetObjectLabelEXT)] = chain_next->next;
    ((MEOW_fp_glGetObjectLabelEXT) (chain_next->func)) (type, object, bufSize, length, label);
}


inline void fast_call_chain_caller_glGetObjectLabelKHR (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetObjectLabelKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetObjectLabelKHR)] = chain_next->next;
    ((MEOW_fp_glGetObjectLabelKHR) (chain_next->func)) (identifier, name, bufSize, length, label);
}


inline void fast_call_chain_caller_glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetObjectPtrLabel)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetObjectPtrLabel)] = chain_next->next;
    ((MEOW_fp_glGetObjectPtrLabel) (chain_next->func)) (ptr, bufSize, length, label);
}


inline void fast_call_chain_caller_glGetObjectPtrLabelKHR (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetObjectPtrLabelKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetObjectPtrLabelKHR)] = chain_next->next;
    ((MEOW_fp_glGetObjectPtrLabelKHR) (chain_next->func)) (ptr, bufSize, length, label);
}


inline void fast_call_chain_caller_glGetPathCommandsNV (GLuint path, GLubyte *commands)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathCommandsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathCommandsNV)] = chain_next->next;
    ((MEOW_fp_glGetPathCommandsNV) (chain_next->func)) (path, commands);
}


inline void fast_call_chain_caller_glGetPathCoordsNV (GLuint path, GLfloat *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathCoordsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathCoordsNV)] = chain_next->next;
    ((MEOW_fp_glGetPathCoordsNV) (chain_next->func)) (path, coords);
}


inline void fast_call_chain_caller_glGetPathDashArrayNV (GLuint path, GLfloat *dashArray)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathDashArrayNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathDashArrayNV)] = chain_next->next;
    ((MEOW_fp_glGetPathDashArrayNV) (chain_next->func)) (path, dashArray);
}



inline GLfloat fast_call_chain_caller_glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathLengthNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathLengthNV)] = chain_next->next;
    return ((MEOW_fp_glGetPathLengthNV) (chain_next->func)) (path, startSegment, numSegments);

}


inline void fast_call_chain_caller_glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathMetricRangeNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathMetricRangeNV)] = chain_next->next;
    ((MEOW_fp_glGetPathMetricRangeNV) (chain_next->func)) (metricQueryMask, firstPathName, numPaths, stride, metrics);
}


inline void fast_call_chain_caller_glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathMetricsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathMetricsNV)] = chain_next->next;
    ((MEOW_fp_glGetPathMetricsNV) (chain_next->func)) (metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}


inline void fast_call_chain_caller_glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathParameterfvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathParameterfvNV)] = chain_next->next;
    ((MEOW_fp_glGetPathParameterfvNV) (chain_next->func)) (path, pname, value);
}


inline void fast_call_chain_caller_glGetPathParameterivNV (GLuint path, GLenum pname, GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathParameterivNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathParameterivNV)] = chain_next->next;
    ((MEOW_fp_glGetPathParameterivNV) (chain_next->func)) (path, pname, value);
}


inline void fast_call_chain_caller_glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPathSpacingNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPathSpacingNV)] = chain_next->next;
    ((MEOW_fp_glGetPathSpacingNV) (chain_next->func)) (pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}


inline void fast_call_chain_caller_glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfCounterInfoINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfCounterInfoINTEL)] = chain_next->next;
    ((MEOW_fp_glGetPerfCounterInfoINTEL) (chain_next->func)) (queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}


inline void fast_call_chain_caller_glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCounterDataAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCounterDataAMD)] = chain_next->next;
    ((MEOW_fp_glGetPerfMonitorCounterDataAMD) (chain_next->func)) (monitor, pname, dataSize, data, bytesWritten);
}


inline void fast_call_chain_caller_glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCounterInfoAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCounterInfoAMD)] = chain_next->next;
    ((MEOW_fp_glGetPerfMonitorCounterInfoAMD) (chain_next->func)) (group, counter, pname, data);
}


inline void fast_call_chain_caller_glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCounterStringAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCounterStringAMD)] = chain_next->next;
    ((MEOW_fp_glGetPerfMonitorCounterStringAMD) (chain_next->func)) (group, counter, bufSize, length, counterString);
}


inline void fast_call_chain_caller_glGetPerfMonitorCountersAMD (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCountersAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorCountersAMD)] = chain_next->next;
    ((MEOW_fp_glGetPerfMonitorCountersAMD) (chain_next->func)) (group, numCounters, maxActiveCounters, counterSize, counters);
}


inline void fast_call_chain_caller_glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorGroupStringAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorGroupStringAMD)] = chain_next->next;
    ((MEOW_fp_glGetPerfMonitorGroupStringAMD) (chain_next->func)) (group, bufSize, length, groupString);
}


inline void fast_call_chain_caller_glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorGroupsAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfMonitorGroupsAMD)] = chain_next->next;
    ((MEOW_fp_glGetPerfMonitorGroupsAMD) (chain_next->func)) (numGroups, groupsSize, groups);
}


inline void fast_call_chain_caller_glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfQueryDataINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfQueryDataINTEL)] = chain_next->next;
    ((MEOW_fp_glGetPerfQueryDataINTEL) (chain_next->func)) (queryHandle, flags, dataSize, data, bytesWritten);
}


inline void fast_call_chain_caller_glGetPerfQueryIdByNameINTEL (GLchar *queryName, GLuint *queryId)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfQueryIdByNameINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfQueryIdByNameINTEL)] = chain_next->next;
    ((MEOW_fp_glGetPerfQueryIdByNameINTEL) (chain_next->func)) (queryName, queryId);
}


inline void fast_call_chain_caller_glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPerfQueryInfoINTEL)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPerfQueryInfoINTEL)] = chain_next->next;
    ((MEOW_fp_glGetPerfQueryInfoINTEL) (chain_next->func)) (queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}


inline void fast_call_chain_caller_glGetPointerv (GLenum pname, void **params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPointerv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPointerv)] = chain_next->next;
    ((MEOW_fp_glGetPointerv) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glGetPointervKHR (GLenum pname, void **params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetPointervKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetPointervKHR)] = chain_next->next;
    ((MEOW_fp_glGetPointervKHR) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramBinary)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramBinary)] = chain_next->next;
    ((MEOW_fp_glGetProgramBinary) (chain_next->func)) (program, bufSize, length, binaryFormat, binary);
}


inline void fast_call_chain_caller_glGetProgramBinaryOES (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramBinaryOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramBinaryOES)] = chain_next->next;
    ((MEOW_fp_glGetProgramBinaryOES) (chain_next->func)) (program, bufSize, length, binaryFormat, binary);
}


inline void fast_call_chain_caller_glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramInfoLog)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramInfoLog)] = chain_next->next;
    ((MEOW_fp_glGetProgramInfoLog) (chain_next->func)) (program, bufSize, length, infoLog);
}


inline void fast_call_chain_caller_glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramInterfaceiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramInterfaceiv)] = chain_next->next;
    ((MEOW_fp_glGetProgramInterfaceiv) (chain_next->func)) (program, programInterface, pname, params);
}


inline void fast_call_chain_caller_glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineInfoLog)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineInfoLog)] = chain_next->next;
    ((MEOW_fp_glGetProgramPipelineInfoLog) (chain_next->func)) (pipeline, bufSize, length, infoLog);
}


inline void fast_call_chain_caller_glGetProgramPipelineInfoLogEXT (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineInfoLogEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineInfoLogEXT)] = chain_next->next;
    ((MEOW_fp_glGetProgramPipelineInfoLogEXT) (chain_next->func)) (pipeline, bufSize, length, infoLog);
}


inline void fast_call_chain_caller_glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineiv)] = chain_next->next;
    ((MEOW_fp_glGetProgramPipelineiv) (chain_next->func)) (pipeline, pname, params);
}


inline void fast_call_chain_caller_glGetProgramPipelineivEXT (GLuint pipeline, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramPipelineivEXT)] = chain_next->next;
    ((MEOW_fp_glGetProgramPipelineivEXT) (chain_next->func)) (pipeline, pname, params);
}



inline GLuint fast_call_chain_caller_glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceIndex)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceIndex)] = chain_next->next;
    return ((MEOW_fp_glGetProgramResourceIndex) (chain_next->func)) (program, programInterface, name);

}



inline GLint fast_call_chain_caller_glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceLocation)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceLocation)] = chain_next->next;
    return ((MEOW_fp_glGetProgramResourceLocation) (chain_next->func)) (program, programInterface, name);

}



inline GLint fast_call_chain_caller_glGetProgramResourceLocationIndexEXT (GLuint program, GLenum programInterface, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceLocationIndexEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceLocationIndexEXT)] = chain_next->next;
    return ((MEOW_fp_glGetProgramResourceLocationIndexEXT) (chain_next->func)) (program, programInterface, name);

}


inline void fast_call_chain_caller_glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceName)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceName)] = chain_next->next;
    ((MEOW_fp_glGetProgramResourceName) (chain_next->func)) (program, programInterface, index, bufSize, length, name);
}


inline void fast_call_chain_caller_glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourcefvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourcefvNV)] = chain_next->next;
    ((MEOW_fp_glGetProgramResourcefvNV) (chain_next->func)) (program, programInterface, index, propCount, props, bufSize, length, params);
}


inline void fast_call_chain_caller_glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramResourceiv)] = chain_next->next;
    ((MEOW_fp_glGetProgramResourceiv) (chain_next->func)) (program, programInterface, index, propCount, props, bufSize, length, params);
}


inline void fast_call_chain_caller_glGetProgramiv (GLuint program, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetProgramiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetProgramiv)] = chain_next->next;
    ((MEOW_fp_glGetProgramiv) (chain_next->func)) (program, pname, params);
}


inline void fast_call_chain_caller_glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjecti64vEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjecti64vEXT)] = chain_next->next;
    ((MEOW_fp_glGetQueryObjecti64vEXT) (chain_next->func)) (id, pname, params);
}


inline void fast_call_chain_caller_glGetQueryObjectivEXT (GLuint id, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectivEXT)] = chain_next->next;
    ((MEOW_fp_glGetQueryObjectivEXT) (chain_next->func)) (id, pname, params);
}


inline void fast_call_chain_caller_glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectui64vEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectui64vEXT)] = chain_next->next;
    ((MEOW_fp_glGetQueryObjectui64vEXT) (chain_next->func)) (id, pname, params);
}


inline void fast_call_chain_caller_glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectuiv)] = chain_next->next;
    ((MEOW_fp_glGetQueryObjectuiv) (chain_next->func)) (id, pname, params);
}


inline void fast_call_chain_caller_glGetQueryObjectuivEXT (GLuint id, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectuivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetQueryObjectuivEXT)] = chain_next->next;
    ((MEOW_fp_glGetQueryObjectuivEXT) (chain_next->func)) (id, pname, params);
}


inline void fast_call_chain_caller_glGetQueryiv (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetQueryiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetQueryiv)] = chain_next->next;
    ((MEOW_fp_glGetQueryiv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetQueryivEXT (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetQueryivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetQueryivEXT)] = chain_next->next;
    ((MEOW_fp_glGetQueryivEXT) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetRenderbufferParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetRenderbufferParameteriv)] = chain_next->next;
    ((MEOW_fp_glGetRenderbufferParameteriv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetRenderbufferParameterivOES (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetRenderbufferParameterivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetRenderbufferParameterivOES)] = chain_next->next;
    ((MEOW_fp_glGetRenderbufferParameterivOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIiv)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameterIiv) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameterIivEXT (GLuint sampler, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIivEXT)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameterIivEXT) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameterIivOES (GLuint sampler, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIivOES)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameterIivOES) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIuiv)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameterIuiv) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameterIuivEXT (GLuint sampler, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIuivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIuivEXT)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameterIuivEXT) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameterIuivOES (GLuint sampler, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIuivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterIuivOES)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameterIuivOES) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameterfv)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameterfv) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSamplerParameteriv)] = chain_next->next;
    ((MEOW_fp_glGetSamplerParameteriv) (chain_next->func)) (sampler, pname, params);
}


inline void fast_call_chain_caller_glGetSemaphoreParameterui64vEXT (GLuint semaphore, GLenum pname, GLuint64 *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSemaphoreParameterui64vEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSemaphoreParameterui64vEXT)] = chain_next->next;
    ((MEOW_fp_glGetSemaphoreParameterui64vEXT) (chain_next->func)) (semaphore, pname, params);
}


inline void fast_call_chain_caller_glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetShaderInfoLog)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetShaderInfoLog)] = chain_next->next;
    ((MEOW_fp_glGetShaderInfoLog) (chain_next->func)) (shader, bufSize, length, infoLog);
}


inline void fast_call_chain_caller_glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetShaderPrecisionFormat)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetShaderPrecisionFormat)] = chain_next->next;
    ((MEOW_fp_glGetShaderPrecisionFormat) (chain_next->func)) (shadertype, precisiontype, range, precision);
}


inline void fast_call_chain_caller_glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetShaderSource)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetShaderSource)] = chain_next->next;
    ((MEOW_fp_glGetShaderSource) (chain_next->func)) (shader, bufSize, length, source);
}


inline void fast_call_chain_caller_glGetShaderiv (GLuint shader, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetShaderiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetShaderiv)] = chain_next->next;
    ((MEOW_fp_glGetShaderiv) (chain_next->func)) (shader, pname, params);
}



inline const GLubyte * fast_call_chain_caller_glGetString (GLenum name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetString)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetString)] = chain_next->next;
    return ((MEOW_fp_glGetString) (chain_next->func)) (name);

}



inline const GLubyte * fast_call_chain_caller_glGetStringi (GLenum name, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetStringi)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetStringi)] = chain_next->next;
    return ((MEOW_fp_glGetStringi) (chain_next->func)) (name, index);

}


inline void fast_call_chain_caller_glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSynciv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSynciv)] = chain_next->next;
    ((MEOW_fp_glGetSynciv) (chain_next->func)) (sync, pname, bufSize, length, values);
}


inline void fast_call_chain_caller_glGetSyncivAPPLE (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetSyncivAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetSyncivAPPLE)] = chain_next->next;
    ((MEOW_fp_glGetSyncivAPPLE) (chain_next->func)) (sync, pname, bufSize, length, values);
}


inline void fast_call_chain_caller_glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnvfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnvfv)] = chain_next->next;
    ((MEOW_fp_glGetTexEnvfv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexEnviv (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnviv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnviv)] = chain_next->next;
    ((MEOW_fp_glGetTexEnviv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexEnvxv (GLenum target, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnvxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnvxv)] = chain_next->next;
    ((MEOW_fp_glGetTexEnvxv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexEnvxvOES (GLenum target, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnvxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexEnvxvOES)] = chain_next->next;
    ((MEOW_fp_glGetTexEnvxvOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexGenfvOES (GLenum coord, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexGenfvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexGenfvOES)] = chain_next->next;
    ((MEOW_fp_glGetTexGenfvOES) (chain_next->func)) (coord, pname, params);
}


inline void fast_call_chain_caller_glGetTexGenivOES (GLenum coord, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexGenivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexGenivOES)] = chain_next->next;
    ((MEOW_fp_glGetTexGenivOES) (chain_next->func)) (coord, pname, params);
}


inline void fast_call_chain_caller_glGetTexGenxvOES (GLenum coord, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexGenxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexGenxvOES)] = chain_next->next;
    ((MEOW_fp_glGetTexGenxvOES) (chain_next->func)) (coord, pname, params);
}


inline void fast_call_chain_caller_glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexLevelParameterfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexLevelParameterfv)] = chain_next->next;
    ((MEOW_fp_glGetTexLevelParameterfv) (chain_next->func)) (target, level, pname, params);
}


inline void fast_call_chain_caller_glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexLevelParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexLevelParameteriv)] = chain_next->next;
    ((MEOW_fp_glGetTexLevelParameteriv) (chain_next->func)) (target, level, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIiv)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterIiv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIivEXT)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterIivEXT) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterIivOES (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIivOES)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterIivOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIuiv)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterIuiv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIuivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIuivEXT)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterIuivEXT) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterIuivOES (GLenum target, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIuivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterIuivOES)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterIuivOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterfv)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterfv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameteriv (GLenum target, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameteriv)] = chain_next->next;
    ((MEOW_fp_glGetTexParameteriv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterxv (GLenum target, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterxv)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterxv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glGetTexParameterxvOES (GLenum target, GLenum pname, GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTexParameterxvOES)] = chain_next->next;
    ((MEOW_fp_glGetTexParameterxvOES) (chain_next->func)) (target, pname, params);
}



inline GLuint64 fast_call_chain_caller_glGetTextureHandleIMG (GLuint texture)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTextureHandleIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTextureHandleIMG)] = chain_next->next;
    return ((MEOW_fp_glGetTextureHandleIMG) (chain_next->func)) (texture);

}



inline GLuint64 fast_call_chain_caller_glGetTextureHandleNV (GLuint texture)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTextureHandleNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTextureHandleNV)] = chain_next->next;
    return ((MEOW_fp_glGetTextureHandleNV) (chain_next->func)) (texture);

}



inline GLuint64 fast_call_chain_caller_glGetTextureSamplerHandleIMG (GLuint texture, GLuint sampler)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTextureSamplerHandleIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTextureSamplerHandleIMG)] = chain_next->next;
    return ((MEOW_fp_glGetTextureSamplerHandleIMG) (chain_next->func)) (texture, sampler);

}



inline GLuint64 fast_call_chain_caller_glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTextureSamplerHandleNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTextureSamplerHandleNV)] = chain_next->next;
    return ((MEOW_fp_glGetTextureSamplerHandleNV) (chain_next->func)) (texture, sampler);

}


inline void fast_call_chain_caller_glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTransformFeedbackVarying)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTransformFeedbackVarying)] = chain_next->next;
    ((MEOW_fp_glGetTransformFeedbackVarying) (chain_next->func)) (program, index, bufSize, length, size, type, name);
}


inline void fast_call_chain_caller_glGetTranslatedShaderSourceANGLE (GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetTranslatedShaderSourceANGLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetTranslatedShaderSourceANGLE)] = chain_next->next;
    ((MEOW_fp_glGetTranslatedShaderSourceANGLE) (chain_next->func)) (shader, bufsize, length, source);
}



inline GLuint fast_call_chain_caller_glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUniformBlockIndex)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUniformBlockIndex)] = chain_next->next;
    return ((MEOW_fp_glGetUniformBlockIndex) (chain_next->func)) (program, uniformBlockName);

}


inline void fast_call_chain_caller_glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUniformIndices)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUniformIndices)] = chain_next->next;
    ((MEOW_fp_glGetUniformIndices) (chain_next->func)) (program, uniformCount, uniformNames, uniformIndices);
}



inline GLint fast_call_chain_caller_glGetUniformLocation (GLuint program, const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUniformLocation)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUniformLocation)] = chain_next->next;
    return ((MEOW_fp_glGetUniformLocation) (chain_next->func)) (program, name);

}


inline void fast_call_chain_caller_glGetUniformfv (GLuint program, GLint location, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUniformfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUniformfv)] = chain_next->next;
    ((MEOW_fp_glGetUniformfv) (chain_next->func)) (program, location, params);
}


inline void fast_call_chain_caller_glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUniformi64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUniformi64vNV)] = chain_next->next;
    ((MEOW_fp_glGetUniformi64vNV) (chain_next->func)) (program, location, params);
}


inline void fast_call_chain_caller_glGetUniformiv (GLuint program, GLint location, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUniformiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUniformiv)] = chain_next->next;
    ((MEOW_fp_glGetUniformiv) (chain_next->func)) (program, location, params);
}


inline void fast_call_chain_caller_glGetUniformuiv (GLuint program, GLint location, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUniformuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUniformuiv)] = chain_next->next;
    ((MEOW_fp_glGetUniformuiv) (chain_next->func)) (program, location, params);
}


inline void fast_call_chain_caller_glGetUnsignedBytei_vEXT (GLenum target, GLuint index, GLubyte *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUnsignedBytei_vEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUnsignedBytei_vEXT)] = chain_next->next;
    ((MEOW_fp_glGetUnsignedBytei_vEXT) (chain_next->func)) (target, index, data);
}


inline void fast_call_chain_caller_glGetUnsignedBytevEXT (GLenum pname, GLubyte *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetUnsignedBytevEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetUnsignedBytevEXT)] = chain_next->next;
    ((MEOW_fp_glGetUnsignedBytevEXT) (chain_next->func)) (pname, data);
}


inline void fast_call_chain_caller_glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribIiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribIiv)] = chain_next->next;
    ((MEOW_fp_glGetVertexAttribIiv) (chain_next->func)) (index, pname, params);
}


inline void fast_call_chain_caller_glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribIuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribIuiv)] = chain_next->next;
    ((MEOW_fp_glGetVertexAttribIuiv) (chain_next->func)) (index, pname, params);
}


inline void fast_call_chain_caller_glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribPointerv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribPointerv)] = chain_next->next;
    ((MEOW_fp_glGetVertexAttribPointerv) (chain_next->func)) (index, pname, pointer);
}


inline void fast_call_chain_caller_glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribfv)] = chain_next->next;
    ((MEOW_fp_glGetVertexAttribfv) (chain_next->func)) (index, pname, params);
}


inline void fast_call_chain_caller_glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetVertexAttribiv)] = chain_next->next;
    ((MEOW_fp_glGetVertexAttribiv) (chain_next->func)) (index, pname, params);
}



inline GLVULKANPROCNV fast_call_chain_caller_glGetVkProcAddrNV (const GLchar *name)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetVkProcAddrNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetVkProcAddrNV)] = chain_next->next;
    return ((MEOW_fp_glGetVkProcAddrNV) (chain_next->func)) (name);

}


inline void fast_call_chain_caller_glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformfv)] = chain_next->next;
    ((MEOW_fp_glGetnUniformfv) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glGetnUniformfvEXT (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformfvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformfvEXT)] = chain_next->next;
    ((MEOW_fp_glGetnUniformfvEXT) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glGetnUniformfvKHR (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformfvKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformfvKHR)] = chain_next->next;
    ((MEOW_fp_glGetnUniformfvKHR) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformiv)] = chain_next->next;
    ((MEOW_fp_glGetnUniformiv) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glGetnUniformivEXT (GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformivEXT)] = chain_next->next;
    ((MEOW_fp_glGetnUniformivEXT) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glGetnUniformivKHR (GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformivKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformivKHR)] = chain_next->next;
    ((MEOW_fp_glGetnUniformivKHR) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformuiv)] = chain_next->next;
    ((MEOW_fp_glGetnUniformuiv) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glGetnUniformuivKHR (GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformuivKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glGetnUniformuivKHR)] = chain_next->next;
    ((MEOW_fp_glGetnUniformuivKHR) (chain_next->func)) (program, location, bufSize, params);
}


inline void fast_call_chain_caller_glHint (GLenum target, GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glHint)];
    chain->chain_next.chain[MEOW_API_INDEX(glHint)] = chain_next->next;
    ((MEOW_fp_glHint) (chain_next->func)) (target, mode);
}


inline void fast_call_chain_caller_glImportMemoryFdEXT (GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glImportMemoryFdEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glImportMemoryFdEXT)] = chain_next->next;
    ((MEOW_fp_glImportMemoryFdEXT) (chain_next->func)) (memory, size, handleType, fd);
}


inline void fast_call_chain_caller_glImportSemaphoreFdEXT (GLuint semaphore, GLenum handleType, GLint fd)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glImportSemaphoreFdEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glImportSemaphoreFdEXT)] = chain_next->next;
    ((MEOW_fp_glImportSemaphoreFdEXT) (chain_next->func)) (semaphore, handleType, fd);
}


inline void fast_call_chain_caller_glInsertEventMarkerEXT (GLsizei length, const GLchar *marker)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glInsertEventMarkerEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glInsertEventMarkerEXT)] = chain_next->next;
    ((MEOW_fp_glInsertEventMarkerEXT) (chain_next->func)) (length, marker);
}


inline void fast_call_chain_caller_glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glInterpolatePathsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glInterpolatePathsNV)] = chain_next->next;
    ((MEOW_fp_glInterpolatePathsNV) (chain_next->func)) (resultPath, pathA, pathB, weight);
}


inline void fast_call_chain_caller_glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glInvalidateFramebuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glInvalidateFramebuffer)] = chain_next->next;
    ((MEOW_fp_glInvalidateFramebuffer) (chain_next->func)) (target, numAttachments, attachments);
}


inline void fast_call_chain_caller_glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glInvalidateSubFramebuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glInvalidateSubFramebuffer)] = chain_next->next;
    ((MEOW_fp_glInvalidateSubFramebuffer) (chain_next->func)) (target, numAttachments, attachments, x, y, width, height);
}



inline GLboolean fast_call_chain_caller_glIsBuffer (GLuint buffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsBuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsBuffer)] = chain_next->next;
    return ((MEOW_fp_glIsBuffer) (chain_next->func)) (buffer);

}



inline GLboolean fast_call_chain_caller_glIsEnabled (GLenum cap)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsEnabled)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsEnabled)] = chain_next->next;
    return ((MEOW_fp_glIsEnabled) (chain_next->func)) (cap);

}



inline GLboolean fast_call_chain_caller_glIsEnabledi (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsEnabledi)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsEnabledi)] = chain_next->next;
    return ((MEOW_fp_glIsEnabledi) (chain_next->func)) (target, index);

}



inline GLboolean fast_call_chain_caller_glIsEnablediEXT (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsEnablediEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsEnablediEXT)] = chain_next->next;
    return ((MEOW_fp_glIsEnablediEXT) (chain_next->func)) (target, index);

}



inline GLboolean fast_call_chain_caller_glIsEnablediNV (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsEnablediNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsEnablediNV)] = chain_next->next;
    return ((MEOW_fp_glIsEnablediNV) (chain_next->func)) (target, index);

}



inline GLboolean fast_call_chain_caller_glIsEnablediOES (GLenum target, GLuint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsEnablediOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsEnablediOES)] = chain_next->next;
    return ((MEOW_fp_glIsEnablediOES) (chain_next->func)) (target, index);

}



inline GLboolean fast_call_chain_caller_glIsFenceNV (GLuint fence)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsFenceNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsFenceNV)] = chain_next->next;
    return ((MEOW_fp_glIsFenceNV) (chain_next->func)) (fence);

}



inline GLboolean fast_call_chain_caller_glIsFramebuffer (GLuint framebuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsFramebuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsFramebuffer)] = chain_next->next;
    return ((MEOW_fp_glIsFramebuffer) (chain_next->func)) (framebuffer);

}



inline GLboolean fast_call_chain_caller_glIsFramebufferOES (GLuint framebuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsFramebufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsFramebufferOES)] = chain_next->next;
    return ((MEOW_fp_glIsFramebufferOES) (chain_next->func)) (framebuffer);

}



inline GLboolean fast_call_chain_caller_glIsImageHandleResidentNV (GLuint64 handle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsImageHandleResidentNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsImageHandleResidentNV)] = chain_next->next;
    return ((MEOW_fp_glIsImageHandleResidentNV) (chain_next->func)) (handle);

}



inline GLboolean fast_call_chain_caller_glIsMemoryObjectEXT (GLuint memoryObject)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsMemoryObjectEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsMemoryObjectEXT)] = chain_next->next;
    return ((MEOW_fp_glIsMemoryObjectEXT) (chain_next->func)) (memoryObject);

}



inline GLboolean fast_call_chain_caller_glIsPathNV (GLuint path)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsPathNV)] = chain_next->next;
    return ((MEOW_fp_glIsPathNV) (chain_next->func)) (path);

}



inline GLboolean fast_call_chain_caller_glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsPointInFillPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsPointInFillPathNV)] = chain_next->next;
    return ((MEOW_fp_glIsPointInFillPathNV) (chain_next->func)) (path, mask, x, y);

}



inline GLboolean fast_call_chain_caller_glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsPointInStrokePathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsPointInStrokePathNV)] = chain_next->next;
    return ((MEOW_fp_glIsPointInStrokePathNV) (chain_next->func)) (path, x, y);

}



inline GLboolean fast_call_chain_caller_glIsProgram (GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsProgram)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsProgram)] = chain_next->next;
    return ((MEOW_fp_glIsProgram) (chain_next->func)) (program);

}



inline GLboolean fast_call_chain_caller_glIsProgramPipeline (GLuint pipeline)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsProgramPipeline)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsProgramPipeline)] = chain_next->next;
    return ((MEOW_fp_glIsProgramPipeline) (chain_next->func)) (pipeline);

}



inline GLboolean fast_call_chain_caller_glIsProgramPipelineEXT (GLuint pipeline)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsProgramPipelineEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsProgramPipelineEXT)] = chain_next->next;
    return ((MEOW_fp_glIsProgramPipelineEXT) (chain_next->func)) (pipeline);

}



inline GLboolean fast_call_chain_caller_glIsQuery (GLuint id)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsQuery)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsQuery)] = chain_next->next;
    return ((MEOW_fp_glIsQuery) (chain_next->func)) (id);

}



inline GLboolean fast_call_chain_caller_glIsQueryEXT (GLuint id)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsQueryEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsQueryEXT)] = chain_next->next;
    return ((MEOW_fp_glIsQueryEXT) (chain_next->func)) (id);

}



inline GLboolean fast_call_chain_caller_glIsRenderbuffer (GLuint renderbuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsRenderbuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsRenderbuffer)] = chain_next->next;
    return ((MEOW_fp_glIsRenderbuffer) (chain_next->func)) (renderbuffer);

}



inline GLboolean fast_call_chain_caller_glIsRenderbufferOES (GLuint renderbuffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsRenderbufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsRenderbufferOES)] = chain_next->next;
    return ((MEOW_fp_glIsRenderbufferOES) (chain_next->func)) (renderbuffer);

}



inline GLboolean fast_call_chain_caller_glIsSampler (GLuint sampler)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsSampler)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsSampler)] = chain_next->next;
    return ((MEOW_fp_glIsSampler) (chain_next->func)) (sampler);

}



inline GLboolean fast_call_chain_caller_glIsSemaphoreEXT (GLuint semaphore)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsSemaphoreEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsSemaphoreEXT)] = chain_next->next;
    return ((MEOW_fp_glIsSemaphoreEXT) (chain_next->func)) (semaphore);

}



inline GLboolean fast_call_chain_caller_glIsShader (GLuint shader)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsShader)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsShader)] = chain_next->next;
    return ((MEOW_fp_glIsShader) (chain_next->func)) (shader);

}



inline GLboolean fast_call_chain_caller_glIsSync (GLsync sync)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsSync)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsSync)] = chain_next->next;
    return ((MEOW_fp_glIsSync) (chain_next->func)) (sync);

}



inline GLboolean fast_call_chain_caller_glIsSyncAPPLE (GLsync sync)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsSyncAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsSyncAPPLE)] = chain_next->next;
    return ((MEOW_fp_glIsSyncAPPLE) (chain_next->func)) (sync);

}



inline GLboolean fast_call_chain_caller_glIsTexture (GLuint texture)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsTexture)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsTexture)] = chain_next->next;
    return ((MEOW_fp_glIsTexture) (chain_next->func)) (texture);

}



inline GLboolean fast_call_chain_caller_glIsTextureHandleResidentNV (GLuint64 handle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsTextureHandleResidentNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsTextureHandleResidentNV)] = chain_next->next;
    return ((MEOW_fp_glIsTextureHandleResidentNV) (chain_next->func)) (handle);

}



inline GLboolean fast_call_chain_caller_glIsTransformFeedback (GLuint id)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsTransformFeedback)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsTransformFeedback)] = chain_next->next;
    return ((MEOW_fp_glIsTransformFeedback) (chain_next->func)) (id);

}



inline GLboolean fast_call_chain_caller_glIsVertexArray (GLuint array)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsVertexArray)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsVertexArray)] = chain_next->next;
    return ((MEOW_fp_glIsVertexArray) (chain_next->func)) (array);

}



inline GLboolean fast_call_chain_caller_glIsVertexArrayOES (GLuint array)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glIsVertexArrayOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glIsVertexArrayOES)] = chain_next->next;
    return ((MEOW_fp_glIsVertexArrayOES) (chain_next->func)) (array);

}


inline void fast_call_chain_caller_glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLabelObjectEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glLabelObjectEXT)] = chain_next->next;
    ((MEOW_fp_glLabelObjectEXT) (chain_next->func)) (type, object, length, label);
}


inline void fast_call_chain_caller_glLightModelf (GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightModelf)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightModelf)] = chain_next->next;
    ((MEOW_fp_glLightModelf) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glLightModelfv (GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightModelfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightModelfv)] = chain_next->next;
    ((MEOW_fp_glLightModelfv) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glLightModelx (GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightModelx)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightModelx)] = chain_next->next;
    ((MEOW_fp_glLightModelx) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glLightModelxOES (GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightModelxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightModelxOES)] = chain_next->next;
    ((MEOW_fp_glLightModelxOES) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glLightModelxv (GLenum pname, const GLfixed *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightModelxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightModelxv)] = chain_next->next;
    ((MEOW_fp_glLightModelxv) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glLightModelxvOES (GLenum pname, const GLfixed *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightModelxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightModelxvOES)] = chain_next->next;
    ((MEOW_fp_glLightModelxvOES) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glLightf (GLenum light, GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightf)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightf)] = chain_next->next;
    ((MEOW_fp_glLightf) (chain_next->func)) (light, pname, param);
}


inline void fast_call_chain_caller_glLightfv (GLenum light, GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightfv)] = chain_next->next;
    ((MEOW_fp_glLightfv) (chain_next->func)) (light, pname, params);
}


inline void fast_call_chain_caller_glLightx (GLenum light, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightx)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightx)] = chain_next->next;
    ((MEOW_fp_glLightx) (chain_next->func)) (light, pname, param);
}


inline void fast_call_chain_caller_glLightxOES (GLenum light, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightxOES)] = chain_next->next;
    ((MEOW_fp_glLightxOES) (chain_next->func)) (light, pname, param);
}


inline void fast_call_chain_caller_glLightxv (GLenum light, GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightxv)] = chain_next->next;
    ((MEOW_fp_glLightxv) (chain_next->func)) (light, pname, params);
}


inline void fast_call_chain_caller_glLightxvOES (GLenum light, GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLightxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glLightxvOES)] = chain_next->next;
    ((MEOW_fp_glLightxvOES) (chain_next->func)) (light, pname, params);
}


inline void fast_call_chain_caller_glLineWidth (GLfloat width)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLineWidth)];
    chain->chain_next.chain[MEOW_API_INDEX(glLineWidth)] = chain_next->next;
    ((MEOW_fp_glLineWidth) (chain_next->func)) (width);
}


inline void fast_call_chain_caller_glLineWidthx (GLfixed width)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLineWidthx)];
    chain->chain_next.chain[MEOW_API_INDEX(glLineWidthx)] = chain_next->next;
    ((MEOW_fp_glLineWidthx) (chain_next->func)) (width);
}


inline void fast_call_chain_caller_glLineWidthxOES (GLfixed width)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLineWidthxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glLineWidthxOES)] = chain_next->next;
    ((MEOW_fp_glLineWidthxOES) (chain_next->func)) (width);
}


inline void fast_call_chain_caller_glLinkProgram (GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLinkProgram)];
    chain->chain_next.chain[MEOW_API_INDEX(glLinkProgram)] = chain_next->next;
    ((MEOW_fp_glLinkProgram) (chain_next->func)) (program);
}


inline void fast_call_chain_caller_glLoadIdentity (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLoadIdentity)];
    chain->chain_next.chain[MEOW_API_INDEX(glLoadIdentity)] = chain_next->next;
    ((MEOW_fp_glLoadIdentity) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glLoadMatrixf (const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLoadMatrixf)];
    chain->chain_next.chain[MEOW_API_INDEX(glLoadMatrixf)] = chain_next->next;
    ((MEOW_fp_glLoadMatrixf) (chain_next->func)) (m);
}


inline void fast_call_chain_caller_glLoadMatrixx (const GLfixed *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLoadMatrixx)];
    chain->chain_next.chain[MEOW_API_INDEX(glLoadMatrixx)] = chain_next->next;
    ((MEOW_fp_glLoadMatrixx) (chain_next->func)) (m);
}


inline void fast_call_chain_caller_glLoadMatrixxOES (const GLfixed *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLoadMatrixxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glLoadMatrixxOES)] = chain_next->next;
    ((MEOW_fp_glLoadMatrixxOES) (chain_next->func)) (m);
}


inline void fast_call_chain_caller_glLoadPaletteFromModelViewMatrixOES (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLoadPaletteFromModelViewMatrixOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glLoadPaletteFromModelViewMatrixOES)] = chain_next->next;
    ((MEOW_fp_glLoadPaletteFromModelViewMatrixOES) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glLogicOp (GLenum opcode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glLogicOp)];
    chain->chain_next.chain[MEOW_API_INDEX(glLogicOp)] = chain_next->next;
    ((MEOW_fp_glLogicOp) (chain_next->func)) (opcode);
}


inline void fast_call_chain_caller_glMakeImageHandleNonResidentNV (GLuint64 handle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMakeImageHandleNonResidentNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMakeImageHandleNonResidentNV)] = chain_next->next;
    ((MEOW_fp_glMakeImageHandleNonResidentNV) (chain_next->func)) (handle);
}


inline void fast_call_chain_caller_glMakeImageHandleResidentNV (GLuint64 handle, GLenum access)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMakeImageHandleResidentNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMakeImageHandleResidentNV)] = chain_next->next;
    ((MEOW_fp_glMakeImageHandleResidentNV) (chain_next->func)) (handle, access);
}


inline void fast_call_chain_caller_glMakeTextureHandleNonResidentNV (GLuint64 handle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMakeTextureHandleNonResidentNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMakeTextureHandleNonResidentNV)] = chain_next->next;
    ((MEOW_fp_glMakeTextureHandleNonResidentNV) (chain_next->func)) (handle);
}


inline void fast_call_chain_caller_glMakeTextureHandleResidentNV (GLuint64 handle)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMakeTextureHandleResidentNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMakeTextureHandleResidentNV)] = chain_next->next;
    ((MEOW_fp_glMakeTextureHandleResidentNV) (chain_next->func)) (handle);
}



inline void * fast_call_chain_caller_glMapBufferOES (GLenum target, GLenum access)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMapBufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMapBufferOES)] = chain_next->next;
    return ((MEOW_fp_glMapBufferOES) (chain_next->func)) (target, access);

}



inline void * fast_call_chain_caller_glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMapBufferRange)];
    chain->chain_next.chain[MEOW_API_INDEX(glMapBufferRange)] = chain_next->next;
    return ((MEOW_fp_glMapBufferRange) (chain_next->func)) (target, offset, length, access);

}



inline void * fast_call_chain_caller_glMapBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMapBufferRangeEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMapBufferRangeEXT)] = chain_next->next;
    return ((MEOW_fp_glMapBufferRangeEXT) (chain_next->func)) (target, offset, length, access);

}


inline void fast_call_chain_caller_glMaterialf (GLenum face, GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMaterialf)];
    chain->chain_next.chain[MEOW_API_INDEX(glMaterialf)] = chain_next->next;
    ((MEOW_fp_glMaterialf) (chain_next->func)) (face, pname, param);
}


inline void fast_call_chain_caller_glMaterialfv (GLenum face, GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMaterialfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glMaterialfv)] = chain_next->next;
    ((MEOW_fp_glMaterialfv) (chain_next->func)) (face, pname, params);
}


inline void fast_call_chain_caller_glMaterialx (GLenum face, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMaterialx)];
    chain->chain_next.chain[MEOW_API_INDEX(glMaterialx)] = chain_next->next;
    ((MEOW_fp_glMaterialx) (chain_next->func)) (face, pname, param);
}


inline void fast_call_chain_caller_glMaterialxOES (GLenum face, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMaterialxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMaterialxOES)] = chain_next->next;
    ((MEOW_fp_glMaterialxOES) (chain_next->func)) (face, pname, param);
}


inline void fast_call_chain_caller_glMaterialxv (GLenum face, GLenum pname, const GLfixed *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMaterialxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glMaterialxv)] = chain_next->next;
    ((MEOW_fp_glMaterialxv) (chain_next->func)) (face, pname, param);
}


inline void fast_call_chain_caller_glMaterialxvOES (GLenum face, GLenum pname, const GLfixed *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMaterialxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMaterialxvOES)] = chain_next->next;
    ((MEOW_fp_glMaterialxvOES) (chain_next->func)) (face, pname, param);
}


inline void fast_call_chain_caller_glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixFrustumEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixFrustumEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixFrustumEXT) (chain_next->func)) (mode, left, right, bottom, top, zNear, zFar);
}


inline void fast_call_chain_caller_glMatrixIndexPointerOES (GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixIndexPointerOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixIndexPointerOES)] = chain_next->next;
    ((MEOW_fp_glMatrixIndexPointerOES) (chain_next->func)) (size, type, stride, pointer);
}


inline void fast_call_chain_caller_glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoad3x2fNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoad3x2fNV)] = chain_next->next;
    ((MEOW_fp_glMatrixLoad3x2fNV) (chain_next->func)) (matrixMode, m);
}


inline void fast_call_chain_caller_glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoad3x3fNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoad3x3fNV)] = chain_next->next;
    ((MEOW_fp_glMatrixLoad3x3fNV) (chain_next->func)) (matrixMode, m);
}


inline void fast_call_chain_caller_glMatrixLoadIdentityEXT (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadIdentityEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadIdentityEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixLoadIdentityEXT) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadTranspose3x3fNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadTranspose3x3fNV)] = chain_next->next;
    ((MEOW_fp_glMatrixLoadTranspose3x3fNV) (chain_next->func)) (matrixMode, m);
}


inline void fast_call_chain_caller_glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadTransposedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadTransposedEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixLoadTransposedEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadTransposefEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadTransposefEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixLoadTransposefEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixLoaddEXT (GLenum mode, const GLdouble *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoaddEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoaddEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixLoaddEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixLoadfEXT (GLenum mode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadfEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixLoadfEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixLoadfEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixMode (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMode)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMode)] = chain_next->next;
    ((MEOW_fp_glMatrixMode) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMult3x2fNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMult3x2fNV)] = chain_next->next;
    ((MEOW_fp_glMatrixMult3x2fNV) (chain_next->func)) (matrixMode, m);
}


inline void fast_call_chain_caller_glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMult3x3fNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMult3x3fNV)] = chain_next->next;
    ((MEOW_fp_glMatrixMult3x3fNV) (chain_next->func)) (matrixMode, m);
}


inline void fast_call_chain_caller_glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultTranspose3x3fNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultTranspose3x3fNV)] = chain_next->next;
    ((MEOW_fp_glMatrixMultTranspose3x3fNV) (chain_next->func)) (matrixMode, m);
}


inline void fast_call_chain_caller_glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultTransposedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultTransposedEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixMultTransposedEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultTransposefEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultTransposefEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixMultTransposefEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixMultdEXT (GLenum mode, const GLdouble *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultdEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultdEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixMultdEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixMultfEXT (GLenum mode, const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultfEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixMultfEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixMultfEXT) (chain_next->func)) (mode, m);
}


inline void fast_call_chain_caller_glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixOrthoEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixOrthoEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixOrthoEXT) (chain_next->func)) (mode, left, right, bottom, top, zNear, zFar);
}


inline void fast_call_chain_caller_glMatrixPopEXT (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixPopEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixPopEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixPopEXT) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glMatrixPushEXT (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixPushEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixPushEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixPushEXT) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixRotatedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixRotatedEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixRotatedEXT) (chain_next->func)) (mode, angle, x, y, z);
}


inline void fast_call_chain_caller_glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixRotatefEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixRotatefEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixRotatefEXT) (chain_next->func)) (mode, angle, x, y, z);
}


inline void fast_call_chain_caller_glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixScaledEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixScaledEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixScaledEXT) (chain_next->func)) (mode, x, y, z);
}


inline void fast_call_chain_caller_glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixScalefEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixScalefEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixScalefEXT) (chain_next->func)) (mode, x, y, z);
}


inline void fast_call_chain_caller_glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixTranslatedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixTranslatedEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixTranslatedEXT) (chain_next->func)) (mode, x, y, z);
}


inline void fast_call_chain_caller_glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMatrixTranslatefEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMatrixTranslatefEXT)] = chain_next->next;
    ((MEOW_fp_glMatrixTranslatefEXT) (chain_next->func)) (mode, x, y, z);
}


inline void fast_call_chain_caller_glMaxShaderCompilerThreadsKHR (GLuint count)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMaxShaderCompilerThreadsKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glMaxShaderCompilerThreadsKHR)] = chain_next->next;
    ((MEOW_fp_glMaxShaderCompilerThreadsKHR) (chain_next->func)) (count);
}


inline void fast_call_chain_caller_glMemoryBarrier (GLbitfield barriers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMemoryBarrier)];
    chain->chain_next.chain[MEOW_API_INDEX(glMemoryBarrier)] = chain_next->next;
    ((MEOW_fp_glMemoryBarrier) (chain_next->func)) (barriers);
}


inline void fast_call_chain_caller_glMemoryBarrierByRegion (GLbitfield barriers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMemoryBarrierByRegion)];
    chain->chain_next.chain[MEOW_API_INDEX(glMemoryBarrierByRegion)] = chain_next->next;
    ((MEOW_fp_glMemoryBarrierByRegion) (chain_next->func)) (barriers);
}


inline void fast_call_chain_caller_glMemoryObjectParameterivEXT (GLuint memoryObject, GLenum pname, const GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMemoryObjectParameterivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMemoryObjectParameterivEXT)] = chain_next->next;
    ((MEOW_fp_glMemoryObjectParameterivEXT) (chain_next->func)) (memoryObject, pname, params);
}


inline void fast_call_chain_caller_glMinSampleShading (GLfloat value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMinSampleShading)];
    chain->chain_next.chain[MEOW_API_INDEX(glMinSampleShading)] = chain_next->next;
    ((MEOW_fp_glMinSampleShading) (chain_next->func)) (value);
}


inline void fast_call_chain_caller_glMinSampleShadingOES (GLfloat value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMinSampleShadingOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMinSampleShadingOES)] = chain_next->next;
    ((MEOW_fp_glMinSampleShadingOES) (chain_next->func)) (value);
}


inline void fast_call_chain_caller_glMultMatrixf (const GLfloat *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultMatrixf)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultMatrixf)] = chain_next->next;
    ((MEOW_fp_glMultMatrixf) (chain_next->func)) (m);
}


inline void fast_call_chain_caller_glMultMatrixx (const GLfixed *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultMatrixx)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultMatrixx)] = chain_next->next;
    ((MEOW_fp_glMultMatrixx) (chain_next->func)) (m);
}


inline void fast_call_chain_caller_glMultMatrixxOES (const GLfixed *m)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultMatrixxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultMatrixxOES)] = chain_next->next;
    ((MEOW_fp_glMultMatrixxOES) (chain_next->func)) (m);
}


inline void fast_call_chain_caller_glMultiDrawArraysEXT (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawArraysEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawArraysEXT)] = chain_next->next;
    ((MEOW_fp_glMultiDrawArraysEXT) (chain_next->func)) (mode, first, count, primcount);
}


inline void fast_call_chain_caller_glMultiDrawArraysIndirectEXT (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawArraysIndirectEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawArraysIndirectEXT)] = chain_next->next;
    ((MEOW_fp_glMultiDrawArraysIndirectEXT) (chain_next->func)) (mode, indirect, drawcount, stride);
}


inline void fast_call_chain_caller_glMultiDrawElementsBaseVertexEXT (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsBaseVertexEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsBaseVertexEXT)] = chain_next->next;
    ((MEOW_fp_glMultiDrawElementsBaseVertexEXT) (chain_next->func)) (mode, count, type, indices, primcount, basevertex);
}


inline void fast_call_chain_caller_glMultiDrawElementsBaseVertexOES (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsBaseVertexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsBaseVertexOES)] = chain_next->next;
    ((MEOW_fp_glMultiDrawElementsBaseVertexOES) (chain_next->func)) (mode, count, type, indices, primcount, basevertex);
}


inline void fast_call_chain_caller_glMultiDrawElementsEXT (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsEXT)] = chain_next->next;
    ((MEOW_fp_glMultiDrawElementsEXT) (chain_next->func)) (mode, count, type, indices, primcount);
}


inline void fast_call_chain_caller_glMultiDrawElementsIndirectEXT (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsIndirectEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiDrawElementsIndirectEXT)] = chain_next->next;
    ((MEOW_fp_glMultiDrawElementsIndirectEXT) (chain_next->func)) (mode, type, indirect, drawcount, stride);
}


inline void fast_call_chain_caller_glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4f)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4f)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord4f) (chain_next->func)) (target, s, t, r, q);
}


inline void fast_call_chain_caller_glMultiTexCoord4x (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4x)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4x)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord4x) (chain_next->func)) (texture, s, t, r, q);
}


inline void fast_call_chain_caller_glMultiTexCoord4xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4xOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4xOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord4xOES) (chain_next->func)) (texture, s, t, r, q);
}


inline void fast_call_chain_caller_glNamedBufferStorageExternalEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glNamedBufferStorageExternalEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glNamedBufferStorageExternalEXT)] = chain_next->next;
    ((MEOW_fp_glNamedBufferStorageExternalEXT) (chain_next->func)) (buffer, offset, size, clientBuffer, flags);
}


inline void fast_call_chain_caller_glNamedBufferStorageMemEXT (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glNamedBufferStorageMemEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glNamedBufferStorageMemEXT)] = chain_next->next;
    ((MEOW_fp_glNamedBufferStorageMemEXT) (chain_next->func)) (buffer, size, memory, offset);
}


inline void fast_call_chain_caller_glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glNamedFramebufferSampleLocationsfvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glNamedFramebufferSampleLocationsfvNV)] = chain_next->next;
    ((MEOW_fp_glNamedFramebufferSampleLocationsfvNV) (chain_next->func)) (framebuffer, start, count, v);
}


inline void fast_call_chain_caller_glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glNormal3f)];
    chain->chain_next.chain[MEOW_API_INDEX(glNormal3f)] = chain_next->next;
    ((MEOW_fp_glNormal3f) (chain_next->func)) (nx, ny, nz);
}


inline void fast_call_chain_caller_glNormal3x (GLfixed nx, GLfixed ny, GLfixed nz)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glNormal3x)];
    chain->chain_next.chain[MEOW_API_INDEX(glNormal3x)] = chain_next->next;
    ((MEOW_fp_glNormal3x) (chain_next->func)) (nx, ny, nz);
}


inline void fast_call_chain_caller_glNormal3xOES (GLfixed nx, GLfixed ny, GLfixed nz)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glNormal3xOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glNormal3xOES)] = chain_next->next;
    ((MEOW_fp_glNormal3xOES) (chain_next->func)) (nx, ny, nz);
}


inline void fast_call_chain_caller_glNormalPointer (GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glNormalPointer)];
    chain->chain_next.chain[MEOW_API_INDEX(glNormalPointer)] = chain_next->next;
    ((MEOW_fp_glNormalPointer) (chain_next->func)) (type, stride, pointer);
}


inline void fast_call_chain_caller_glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glObjectLabel)];
    chain->chain_next.chain[MEOW_API_INDEX(glObjectLabel)] = chain_next->next;
    ((MEOW_fp_glObjectLabel) (chain_next->func)) (identifier, name, length, label);
}


inline void fast_call_chain_caller_glObjectLabelKHR (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glObjectLabelKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glObjectLabelKHR)] = chain_next->next;
    ((MEOW_fp_glObjectLabelKHR) (chain_next->func)) (identifier, name, length, label);
}


inline void fast_call_chain_caller_glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glObjectPtrLabel)];
    chain->chain_next.chain[MEOW_API_INDEX(glObjectPtrLabel)] = chain_next->next;
    ((MEOW_fp_glObjectPtrLabel) (chain_next->func)) (ptr, length, label);
}


inline void fast_call_chain_caller_glObjectPtrLabelKHR (const void *ptr, GLsizei length, const GLchar *label)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glObjectPtrLabelKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glObjectPtrLabelKHR)] = chain_next->next;
    ((MEOW_fp_glObjectPtrLabelKHR) (chain_next->func)) (ptr, length, label);
}


inline void fast_call_chain_caller_glOrthof (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glOrthof)];
    chain->chain_next.chain[MEOW_API_INDEX(glOrthof)] = chain_next->next;
    ((MEOW_fp_glOrthof) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glOrthofOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glOrthofOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glOrthofOES)] = chain_next->next;
    ((MEOW_fp_glOrthofOES) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glOrthox (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glOrthox)];
    chain->chain_next.chain[MEOW_API_INDEX(glOrthox)] = chain_next->next;
    ((MEOW_fp_glOrthox) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glOrthoxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glOrthoxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glOrthoxOES)] = chain_next->next;
    ((MEOW_fp_glOrthoxOES) (chain_next->func)) (l, r, b, t, n, f);
}


inline void fast_call_chain_caller_glPatchParameteri (GLenum pname, GLint value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPatchParameteri)];
    chain->chain_next.chain[MEOW_API_INDEX(glPatchParameteri)] = chain_next->next;
    ((MEOW_fp_glPatchParameteri) (chain_next->func)) (pname, value);
}


inline void fast_call_chain_caller_glPatchParameteriEXT (GLenum pname, GLint value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPatchParameteriEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glPatchParameteriEXT)] = chain_next->next;
    ((MEOW_fp_glPatchParameteriEXT) (chain_next->func)) (pname, value);
}


inline void fast_call_chain_caller_glPatchParameteriOES (GLenum pname, GLint value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPatchParameteriOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glPatchParameteriOES)] = chain_next->next;
    ((MEOW_fp_glPatchParameteriOES) (chain_next->func)) (pname, value);
}


inline void fast_call_chain_caller_glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathCommandsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathCommandsNV)] = chain_next->next;
    ((MEOW_fp_glPathCommandsNV) (chain_next->func)) (path, numCommands, commands, numCoords, coordType, coords);
}


inline void fast_call_chain_caller_glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathCoordsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathCoordsNV)] = chain_next->next;
    ((MEOW_fp_glPathCoordsNV) (chain_next->func)) (path, numCoords, coordType, coords);
}


inline void fast_call_chain_caller_glPathCoverDepthFuncNV (GLenum func)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathCoverDepthFuncNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathCoverDepthFuncNV)] = chain_next->next;
    ((MEOW_fp_glPathCoverDepthFuncNV) (chain_next->func)) (func);
}


inline void fast_call_chain_caller_glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathDashArrayNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathDashArrayNV)] = chain_next->next;
    ((MEOW_fp_glPathDashArrayNV) (chain_next->func)) (path, dashCount, dashArray);
}



inline GLenum fast_call_chain_caller_glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphIndexArrayNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphIndexArrayNV)] = chain_next->next;
    return ((MEOW_fp_glPathGlyphIndexArrayNV) (chain_next->func)) (firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

}



inline GLenum fast_call_chain_caller_glPathGlyphIndexRangeNV (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphIndexRangeNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphIndexRangeNV)] = chain_next->next;
    return ((MEOW_fp_glPathGlyphIndexRangeNV) (chain_next->func)) (fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);

}


inline void fast_call_chain_caller_glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphRangeNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphRangeNV)] = chain_next->next;
    ((MEOW_fp_glPathGlyphRangeNV) (chain_next->func)) (firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}


inline void fast_call_chain_caller_glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathGlyphsNV)] = chain_next->next;
    ((MEOW_fp_glPathGlyphsNV) (chain_next->func)) (firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}



inline GLenum fast_call_chain_caller_glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathMemoryGlyphIndexArrayNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathMemoryGlyphIndexArrayNV)] = chain_next->next;
    return ((MEOW_fp_glPathMemoryGlyphIndexArrayNV) (chain_next->func)) (firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

}


inline void fast_call_chain_caller_glPathParameterfNV (GLuint path, GLenum pname, GLfloat value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathParameterfNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathParameterfNV)] = chain_next->next;
    ((MEOW_fp_glPathParameterfNV) (chain_next->func)) (path, pname, value);
}


inline void fast_call_chain_caller_glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathParameterfvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathParameterfvNV)] = chain_next->next;
    ((MEOW_fp_glPathParameterfvNV) (chain_next->func)) (path, pname, value);
}


inline void fast_call_chain_caller_glPathParameteriNV (GLuint path, GLenum pname, GLint value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathParameteriNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathParameteriNV)] = chain_next->next;
    ((MEOW_fp_glPathParameteriNV) (chain_next->func)) (path, pname, value);
}


inline void fast_call_chain_caller_glPathParameterivNV (GLuint path, GLenum pname, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathParameterivNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathParameterivNV)] = chain_next->next;
    ((MEOW_fp_glPathParameterivNV) (chain_next->func)) (path, pname, value);
}


inline void fast_call_chain_caller_glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathStencilDepthOffsetNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathStencilDepthOffsetNV)] = chain_next->next;
    ((MEOW_fp_glPathStencilDepthOffsetNV) (chain_next->func)) (factor, units);
}


inline void fast_call_chain_caller_glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathStencilFuncNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathStencilFuncNV)] = chain_next->next;
    ((MEOW_fp_glPathStencilFuncNV) (chain_next->func)) (func, ref, mask);
}


inline void fast_call_chain_caller_glPathStringNV (GLuint path, GLenum format, GLsizei length, const void *pathString)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathStringNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathStringNV)] = chain_next->next;
    ((MEOW_fp_glPathStringNV) (chain_next->func)) (path, format, length, pathString);
}


inline void fast_call_chain_caller_glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathSubCommandsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathSubCommandsNV)] = chain_next->next;
    ((MEOW_fp_glPathSubCommandsNV) (chain_next->func)) (path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}


inline void fast_call_chain_caller_glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPathSubCoordsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPathSubCoordsNV)] = chain_next->next;
    ((MEOW_fp_glPathSubCoordsNV) (chain_next->func)) (path, coordStart, numCoords, coordType, coords);
}


inline void fast_call_chain_caller_glPauseTransformFeedback (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPauseTransformFeedback)];
    chain->chain_next.chain[MEOW_API_INDEX(glPauseTransformFeedback)] = chain_next->next;
    ((MEOW_fp_glPauseTransformFeedback) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glPixelStorei (GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPixelStorei)];
    chain->chain_next.chain[MEOW_API_INDEX(glPixelStorei)] = chain_next->next;
    ((MEOW_fp_glPixelStorei) (chain_next->func)) (pname, param);
}



inline GLboolean fast_call_chain_caller_glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointAlongPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointAlongPathNV)] = chain_next->next;
    return ((MEOW_fp_glPointAlongPathNV) (chain_next->func)) (path, startSegment, numSegments, distance, x, y, tangentX, tangentY);

}


inline void fast_call_chain_caller_glPointParameterf (GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointParameterf)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointParameterf)] = chain_next->next;
    ((MEOW_fp_glPointParameterf) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glPointParameterfv (GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointParameterfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointParameterfv)] = chain_next->next;
    ((MEOW_fp_glPointParameterfv) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glPointParameterx (GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointParameterx)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointParameterx)] = chain_next->next;
    ((MEOW_fp_glPointParameterx) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glPointParameterxOES (GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointParameterxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointParameterxOES)] = chain_next->next;
    ((MEOW_fp_glPointParameterxOES) (chain_next->func)) (pname, param);
}


inline void fast_call_chain_caller_glPointParameterxv (GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointParameterxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointParameterxv)] = chain_next->next;
    ((MEOW_fp_glPointParameterxv) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glPointParameterxvOES (GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointParameterxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointParameterxvOES)] = chain_next->next;
    ((MEOW_fp_glPointParameterxvOES) (chain_next->func)) (pname, params);
}


inline void fast_call_chain_caller_glPointSize (GLfloat size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointSize)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointSize)] = chain_next->next;
    ((MEOW_fp_glPointSize) (chain_next->func)) (size);
}


inline void fast_call_chain_caller_glPointSizePointerOES (GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointSizePointerOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointSizePointerOES)] = chain_next->next;
    ((MEOW_fp_glPointSizePointerOES) (chain_next->func)) (type, stride, pointer);
}


inline void fast_call_chain_caller_glPointSizex (GLfixed size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointSizex)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointSizex)] = chain_next->next;
    ((MEOW_fp_glPointSizex) (chain_next->func)) (size);
}


inline void fast_call_chain_caller_glPointSizexOES (GLfixed size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPointSizexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glPointSizexOES)] = chain_next->next;
    ((MEOW_fp_glPointSizexOES) (chain_next->func)) (size);
}


inline void fast_call_chain_caller_glPolygonModeNV (GLenum face, GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPolygonModeNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glPolygonModeNV)] = chain_next->next;
    ((MEOW_fp_glPolygonModeNV) (chain_next->func)) (face, mode);
}


inline void fast_call_chain_caller_glPolygonOffset (GLfloat factor, GLfloat units)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffset)];
    chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffset)] = chain_next->next;
    ((MEOW_fp_glPolygonOffset) (chain_next->func)) (factor, units);
}


inline void fast_call_chain_caller_glPolygonOffsetClampEXT (GLfloat factor, GLfloat units, GLfloat clamp)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffsetClampEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffsetClampEXT)] = chain_next->next;
    ((MEOW_fp_glPolygonOffsetClampEXT) (chain_next->func)) (factor, units, clamp);
}


inline void fast_call_chain_caller_glPolygonOffsetx (GLfixed factor, GLfixed units)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffsetx)];
    chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffsetx)] = chain_next->next;
    ((MEOW_fp_glPolygonOffsetx) (chain_next->func)) (factor, units);
}


inline void fast_call_chain_caller_glPolygonOffsetxOES (GLfixed factor, GLfixed units)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffsetxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glPolygonOffsetxOES)] = chain_next->next;
    ((MEOW_fp_glPolygonOffsetxOES) (chain_next->func)) (factor, units);
}


inline void fast_call_chain_caller_glPopDebugGroup (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPopDebugGroup)];
    chain->chain_next.chain[MEOW_API_INDEX(glPopDebugGroup)] = chain_next->next;
    ((MEOW_fp_glPopDebugGroup) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glPopDebugGroupKHR (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPopDebugGroupKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glPopDebugGroupKHR)] = chain_next->next;
    ((MEOW_fp_glPopDebugGroupKHR) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glPopGroupMarkerEXT (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPopGroupMarkerEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glPopGroupMarkerEXT)] = chain_next->next;
    ((MEOW_fp_glPopGroupMarkerEXT) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glPopMatrix (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPopMatrix)];
    chain->chain_next.chain[MEOW_API_INDEX(glPopMatrix)] = chain_next->next;
    ((MEOW_fp_glPopMatrix) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glPrimitiveBoundingBox (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPrimitiveBoundingBox)];
    chain->chain_next.chain[MEOW_API_INDEX(glPrimitiveBoundingBox)] = chain_next->next;
    ((MEOW_fp_glPrimitiveBoundingBox) (chain_next->func)) (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}


inline void fast_call_chain_caller_glPrimitiveBoundingBoxEXT (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPrimitiveBoundingBoxEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glPrimitiveBoundingBoxEXT)] = chain_next->next;
    ((MEOW_fp_glPrimitiveBoundingBoxEXT) (chain_next->func)) (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}


inline void fast_call_chain_caller_glPrimitiveBoundingBoxOES (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPrimitiveBoundingBoxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glPrimitiveBoundingBoxOES)] = chain_next->next;
    ((MEOW_fp_glPrimitiveBoundingBoxOES) (chain_next->func)) (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}


inline void fast_call_chain_caller_glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramBinary)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramBinary)] = chain_next->next;
    ((MEOW_fp_glProgramBinary) (chain_next->func)) (program, binaryFormat, binary, length);
}


inline void fast_call_chain_caller_glProgramBinaryOES (GLuint program, GLenum binaryFormat, const void *binary, GLint length)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramBinaryOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramBinaryOES)] = chain_next->next;
    ((MEOW_fp_glProgramBinaryOES) (chain_next->func)) (program, binaryFormat, binary, length);
}


inline void fast_call_chain_caller_glProgramParameteri (GLuint program, GLenum pname, GLint value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramParameteri)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramParameteri)] = chain_next->next;
    ((MEOW_fp_glProgramParameteri) (chain_next->func)) (program, pname, value);
}


inline void fast_call_chain_caller_glProgramParameteriEXT (GLuint program, GLenum pname, GLint value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramParameteriEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramParameteriEXT)] = chain_next->next;
    ((MEOW_fp_glProgramParameteriEXT) (chain_next->func)) (program, pname, value);
}


inline void fast_call_chain_caller_glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramPathFragmentInputGenNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramPathFragmentInputGenNV)] = chain_next->next;
    ((MEOW_fp_glProgramPathFragmentInputGenNV) (chain_next->func)) (program, location, genMode, components, coeffs);
}


inline void fast_call_chain_caller_glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1f)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1f)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1f) (chain_next->func)) (program, location, v0);
}


inline void fast_call_chain_caller_glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1fEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1fEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1fEXT) (chain_next->func)) (program, location, v0);
}


inline void fast_call_chain_caller_glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1fv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1fvEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform1i (GLuint program, GLint location, GLint v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1i)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1i)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1i) (chain_next->func)) (program, location, v0);
}


inline void fast_call_chain_caller_glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1i64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1i64NV) (chain_next->func)) (program, location, x);
}


inline void fast_call_chain_caller_glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1i64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1i64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform1iEXT (GLuint program, GLint location, GLint v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1iEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1iEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1iEXT) (chain_next->func)) (program, location, v0);
}


inline void fast_call_chain_caller_glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1iv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1iv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1ivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ui)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1ui) (chain_next->func)) (program, location, v0);
}


inline void fast_call_chain_caller_glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ui64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1ui64NV) (chain_next->func)) (program, location, x);
}


inline void fast_call_chain_caller_glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1ui64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1ui64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1uiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1uiEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1uiEXT) (chain_next->func)) (program, location, v0);
}


inline void fast_call_chain_caller_glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1uiv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1uiv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1uivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform1uivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform1uivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2f)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2f)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2f) (chain_next->func)) (program, location, v0, v1);
}


inline void fast_call_chain_caller_glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2fEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2fEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2fEXT) (chain_next->func)) (program, location, v0, v1);
}


inline void fast_call_chain_caller_glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2fv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2fvEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2i)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2i)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2i) (chain_next->func)) (program, location, v0, v1);
}


inline void fast_call_chain_caller_glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2i64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2i64NV) (chain_next->func)) (program, location, x, y);
}


inline void fast_call_chain_caller_glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2i64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2i64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2iEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2iEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2iEXT) (chain_next->func)) (program, location, v0, v1);
}


inline void fast_call_chain_caller_glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2iv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2iv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2ivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ui)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2ui) (chain_next->func)) (program, location, v0, v1);
}


inline void fast_call_chain_caller_glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ui64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2ui64NV) (chain_next->func)) (program, location, x, y);
}


inline void fast_call_chain_caller_glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2ui64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2ui64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2uiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2uiEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2uiEXT) (chain_next->func)) (program, location, v0, v1);
}


inline void fast_call_chain_caller_glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2uiv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2uiv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2uivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform2uivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform2uivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3f)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3f)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3f) (chain_next->func)) (program, location, v0, v1, v2);
}


inline void fast_call_chain_caller_glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3fEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3fEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3fEXT) (chain_next->func)) (program, location, v0, v1, v2);
}


inline void fast_call_chain_caller_glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3fv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3fvEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3i)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3i)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3i) (chain_next->func)) (program, location, v0, v1, v2);
}


inline void fast_call_chain_caller_glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3i64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3i64NV) (chain_next->func)) (program, location, x, y, z);
}


inline void fast_call_chain_caller_glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3i64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3i64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3iEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3iEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3iEXT) (chain_next->func)) (program, location, v0, v1, v2);
}


inline void fast_call_chain_caller_glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3iv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3iv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3ivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ui)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3ui) (chain_next->func)) (program, location, v0, v1, v2);
}


inline void fast_call_chain_caller_glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ui64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3ui64NV) (chain_next->func)) (program, location, x, y, z);
}


inline void fast_call_chain_caller_glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3ui64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3ui64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3uiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3uiEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3uiEXT) (chain_next->func)) (program, location, v0, v1, v2);
}


inline void fast_call_chain_caller_glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3uiv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3uiv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3uivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform3uivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform3uivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4f)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4f)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4f) (chain_next->func)) (program, location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4fEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4fEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4fEXT) (chain_next->func)) (program, location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4fv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4fvEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4i)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4i)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4i) (chain_next->func)) (program, location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4i64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4i64NV) (chain_next->func)) (program, location, x, y, z, w);
}


inline void fast_call_chain_caller_glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4i64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4i64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4iEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4iEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4iEXT) (chain_next->func)) (program, location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4iv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4iv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4ivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ui)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4ui) (chain_next->func)) (program, location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ui64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4ui64NV) (chain_next->func)) (program, location, x, y, z, w);
}


inline void fast_call_chain_caller_glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4ui64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4ui64vNV) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4uiEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4uiEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4uiEXT) (chain_next->func)) (program, location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4uiv)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4uiv) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4uivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniform4uivEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniform4uivEXT) (chain_next->func)) (program, location, count, value);
}


inline void fast_call_chain_caller_glProgramUniformHandleui64IMG (GLuint program, GLint location, GLuint64 value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64IMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64IMG)] = chain_next->next;
    ((MEOW_fp_glProgramUniformHandleui64IMG) (chain_next->func)) (program, location, value);
}


inline void fast_call_chain_caller_glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64NV)] = chain_next->next;
    ((MEOW_fp_glProgramUniformHandleui64NV) (chain_next->func)) (program, location, value);
}


inline void fast_call_chain_caller_glProgramUniformHandleui64vIMG (GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64vIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64vIMG)] = chain_next->next;
    ((MEOW_fp_glProgramUniformHandleui64vIMG) (chain_next->func)) (program, location, count, values);
}


inline void fast_call_chain_caller_glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformHandleui64vNV)] = chain_next->next;
    ((MEOW_fp_glProgramUniformHandleui64vNV) (chain_next->func)) (program, location, count, values);
}


inline void fast_call_chain_caller_glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix2fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix2fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x3fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix2x3fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x3fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x3fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix2x3fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x4fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix2x4fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x4fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix2x4fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix2x4fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix3fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix3fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x2fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix3x2fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x2fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x2fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix3x2fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x4fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix3x4fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x4fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix3x4fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix3x4fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix4fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix4fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x2fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix4x2fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x2fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x2fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix4x2fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x3fv)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix4x3fv) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x3fvEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glProgramUniformMatrix4x3fvEXT)] = chain_next->next;
    ((MEOW_fp_glProgramUniformMatrix4x3fvEXT) (chain_next->func)) (program, location, count, transpose, value);
}


inline void fast_call_chain_caller_glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPushDebugGroup)];
    chain->chain_next.chain[MEOW_API_INDEX(glPushDebugGroup)] = chain_next->next;
    ((MEOW_fp_glPushDebugGroup) (chain_next->func)) (source, id, length, message);
}


inline void fast_call_chain_caller_glPushDebugGroupKHR (GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPushDebugGroupKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glPushDebugGroupKHR)] = chain_next->next;
    ((MEOW_fp_glPushDebugGroupKHR) (chain_next->func)) (source, id, length, message);
}


inline void fast_call_chain_caller_glPushGroupMarkerEXT (GLsizei length, const GLchar *marker)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPushGroupMarkerEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glPushGroupMarkerEXT)] = chain_next->next;
    ((MEOW_fp_glPushGroupMarkerEXT) (chain_next->func)) (length, marker);
}


inline void fast_call_chain_caller_glPushMatrix (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glPushMatrix)];
    chain->chain_next.chain[MEOW_API_INDEX(glPushMatrix)] = chain_next->next;
    ((MEOW_fp_glPushMatrix) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glQueryCounterEXT (GLuint id, GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glQueryCounterEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glQueryCounterEXT)] = chain_next->next;
    ((MEOW_fp_glQueryCounterEXT) (chain_next->func)) (id, target);
}



inline GLbitfield fast_call_chain_caller_glQueryMatrixxOES (GLfixed *mantissa, GLint *exponent)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glQueryMatrixxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glQueryMatrixxOES)] = chain_next->next;
    return ((MEOW_fp_glQueryMatrixxOES) (chain_next->func)) (mantissa, exponent);

}


inline void fast_call_chain_caller_glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRasterSamplesEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glRasterSamplesEXT)] = chain_next->next;
    ((MEOW_fp_glRasterSamplesEXT) (chain_next->func)) (samples, fixedsamplelocations);
}


inline void fast_call_chain_caller_glReadBuffer (GLenum src)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReadBuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glReadBuffer)] = chain_next->next;
    ((MEOW_fp_glReadBuffer) (chain_next->func)) (src);
}


inline void fast_call_chain_caller_glReadBufferIndexedEXT (GLenum src, GLint index)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReadBufferIndexedEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glReadBufferIndexedEXT)] = chain_next->next;
    ((MEOW_fp_glReadBufferIndexedEXT) (chain_next->func)) (src, index);
}


inline void fast_call_chain_caller_glReadBufferNV (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReadBufferNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glReadBufferNV)] = chain_next->next;
    ((MEOW_fp_glReadBufferNV) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReadPixels)];
    chain->chain_next.chain[MEOW_API_INDEX(glReadPixels)] = chain_next->next;
    ((MEOW_fp_glReadPixels) (chain_next->func)) (x, y, width, height, format, type, pixels);
}


inline void fast_call_chain_caller_glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReadnPixels)];
    chain->chain_next.chain[MEOW_API_INDEX(glReadnPixels)] = chain_next->next;
    ((MEOW_fp_glReadnPixels) (chain_next->func)) (x, y, width, height, format, type, bufSize, data);
}


inline void fast_call_chain_caller_glReadnPixelsEXT (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReadnPixelsEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glReadnPixelsEXT)] = chain_next->next;
    ((MEOW_fp_glReadnPixelsEXT) (chain_next->func)) (x, y, width, height, format, type, bufSize, data);
}


inline void fast_call_chain_caller_glReadnPixelsKHR (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReadnPixelsKHR)];
    chain->chain_next.chain[MEOW_API_INDEX(glReadnPixelsKHR)] = chain_next->next;
    ((MEOW_fp_glReadnPixelsKHR) (chain_next->func)) (x, y, width, height, format, type, bufSize, data);
}


inline void fast_call_chain_caller_glReleaseShaderCompiler (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glReleaseShaderCompiler)];
    chain->chain_next.chain[MEOW_API_INDEX(glReleaseShaderCompiler)] = chain_next->next;
    ((MEOW_fp_glReleaseShaderCompiler) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorage)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorage)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorage) (chain_next->func)) (target, internalformat, width, height);
}


inline void fast_call_chain_caller_glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisample)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisample)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorageMultisample) (chain_next->func)) (target, samples, internalformat, width, height);
}


inline void fast_call_chain_caller_glRenderbufferStorageMultisampleANGLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleANGLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleANGLE)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorageMultisampleANGLE) (chain_next->func)) (target, samples, internalformat, width, height);
}


inline void fast_call_chain_caller_glRenderbufferStorageMultisampleAPPLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleAPPLE)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorageMultisampleAPPLE) (chain_next->func)) (target, samples, internalformat, width, height);
}


inline void fast_call_chain_caller_glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleEXT)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorageMultisampleEXT) (chain_next->func)) (target, samples, internalformat, width, height);
}


inline void fast_call_chain_caller_glRenderbufferStorageMultisampleIMG (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleIMG)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorageMultisampleIMG) (chain_next->func)) (target, samples, internalformat, width, height);
}


inline void fast_call_chain_caller_glRenderbufferStorageMultisampleNV (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageMultisampleNV)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorageMultisampleNV) (chain_next->func)) (target, samples, internalformat, width, height);
}


inline void fast_call_chain_caller_glRenderbufferStorageOES (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glRenderbufferStorageOES)] = chain_next->next;
    ((MEOW_fp_glRenderbufferStorageOES) (chain_next->func)) (target, internalformat, width, height);
}


inline void fast_call_chain_caller_glResolveDepthValuesNV (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glResolveDepthValuesNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glResolveDepthValuesNV)] = chain_next->next;
    ((MEOW_fp_glResolveDepthValuesNV) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glResolveMultisampleFramebufferAPPLE (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glResolveMultisampleFramebufferAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glResolveMultisampleFramebufferAPPLE)] = chain_next->next;
    ((MEOW_fp_glResolveMultisampleFramebufferAPPLE) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glResumeTransformFeedback (void)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glResumeTransformFeedback)];
    chain->chain_next.chain[MEOW_API_INDEX(glResumeTransformFeedback)] = chain_next->next;
    ((MEOW_fp_glResumeTransformFeedback) (chain_next->func)) ();
}


inline void fast_call_chain_caller_glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRotatef)];
    chain->chain_next.chain[MEOW_API_INDEX(glRotatef)] = chain_next->next;
    ((MEOW_fp_glRotatef) (chain_next->func)) (angle, x, y, z);
}


inline void fast_call_chain_caller_glRotatex (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRotatex)];
    chain->chain_next.chain[MEOW_API_INDEX(glRotatex)] = chain_next->next;
    ((MEOW_fp_glRotatex) (chain_next->func)) (angle, x, y, z);
}


inline void fast_call_chain_caller_glRotatexOES (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glRotatexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glRotatexOES)] = chain_next->next;
    ((MEOW_fp_glRotatexOES) (chain_next->func)) (angle, x, y, z);
}


inline void fast_call_chain_caller_glSampleCoverage (GLfloat value, GLboolean invert)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSampleCoverage)];
    chain->chain_next.chain[MEOW_API_INDEX(glSampleCoverage)] = chain_next->next;
    ((MEOW_fp_glSampleCoverage) (chain_next->func)) (value, invert);
}


inline void fast_call_chain_caller_glSampleCoveragex (GLclampx value, GLboolean invert)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSampleCoveragex)];
    chain->chain_next.chain[MEOW_API_INDEX(glSampleCoveragex)] = chain_next->next;
    ((MEOW_fp_glSampleCoveragex) (chain_next->func)) (value, invert);
}


inline void fast_call_chain_caller_glSampleCoveragexOES (GLclampx value, GLboolean invert)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSampleCoveragexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glSampleCoveragexOES)] = chain_next->next;
    ((MEOW_fp_glSampleCoveragexOES) (chain_next->func)) (value, invert);
}


inline void fast_call_chain_caller_glSampleMaski (GLuint maskNumber, GLbitfield mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSampleMaski)];
    chain->chain_next.chain[MEOW_API_INDEX(glSampleMaski)] = chain_next->next;
    ((MEOW_fp_glSampleMaski) (chain_next->func)) (maskNumber, mask);
}


inline void fast_call_chain_caller_glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIiv)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterIiv) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameterIivEXT (GLuint sampler, GLenum pname, const GLint *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIivEXT)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterIivEXT) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameterIivOES (GLuint sampler, GLenum pname, const GLint *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIivOES)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterIivOES) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIuiv)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterIuiv) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameterIuivEXT (GLuint sampler, GLenum pname, const GLuint *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIuivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIuivEXT)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterIuivEXT) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameterIuivOES (GLuint sampler, GLenum pname, const GLuint *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIuivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterIuivOES)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterIuivOES) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterf)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterf)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterf) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameterfv)] = chain_next->next;
    ((MEOW_fp_glSamplerParameterfv) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameteri)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameteri)] = chain_next->next;
    ((MEOW_fp_glSamplerParameteri) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glSamplerParameteriv)] = chain_next->next;
    ((MEOW_fp_glSamplerParameteriv) (chain_next->func)) (sampler, pname, param);
}


inline void fast_call_chain_caller_glScalef (GLfloat x, GLfloat y, GLfloat z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScalef)];
    chain->chain_next.chain[MEOW_API_INDEX(glScalef)] = chain_next->next;
    ((MEOW_fp_glScalef) (chain_next->func)) (x, y, z);
}


inline void fast_call_chain_caller_glScalex (GLfixed x, GLfixed y, GLfixed z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScalex)];
    chain->chain_next.chain[MEOW_API_INDEX(glScalex)] = chain_next->next;
    ((MEOW_fp_glScalex) (chain_next->func)) (x, y, z);
}


inline void fast_call_chain_caller_glScalexOES (GLfixed x, GLfixed y, GLfixed z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScalexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glScalexOES)] = chain_next->next;
    ((MEOW_fp_glScalexOES) (chain_next->func)) (x, y, z);
}


inline void fast_call_chain_caller_glScissor (GLint x, GLint y, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScissor)];
    chain->chain_next.chain[MEOW_API_INDEX(glScissor)] = chain_next->next;
    ((MEOW_fp_glScissor) (chain_next->func)) (x, y, width, height);
}


inline void fast_call_chain_caller_glScissorArrayvNV (GLuint first, GLsizei count, const GLint *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScissorArrayvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glScissorArrayvNV)] = chain_next->next;
    ((MEOW_fp_glScissorArrayvNV) (chain_next->func)) (first, count, v);
}


inline void fast_call_chain_caller_glScissorArrayvOES (GLuint first, GLsizei count, const GLint *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScissorArrayvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glScissorArrayvOES)] = chain_next->next;
    ((MEOW_fp_glScissorArrayvOES) (chain_next->func)) (first, count, v);
}


inline void fast_call_chain_caller_glScissorIndexedNV (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedNV)] = chain_next->next;
    ((MEOW_fp_glScissorIndexedNV) (chain_next->func)) (index, left, bottom, width, height);
}


inline void fast_call_chain_caller_glScissorIndexedOES (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedOES)] = chain_next->next;
    ((MEOW_fp_glScissorIndexedOES) (chain_next->func)) (index, left, bottom, width, height);
}


inline void fast_call_chain_caller_glScissorIndexedvNV (GLuint index, const GLint *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedvNV)] = chain_next->next;
    ((MEOW_fp_glScissorIndexedvNV) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glScissorIndexedvOES (GLuint index, const GLint *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glScissorIndexedvOES)] = chain_next->next;
    ((MEOW_fp_glScissorIndexedvOES) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSelectPerfMonitorCountersAMD)];
    chain->chain_next.chain[MEOW_API_INDEX(glSelectPerfMonitorCountersAMD)] = chain_next->next;
    ((MEOW_fp_glSelectPerfMonitorCountersAMD) (chain_next->func)) (monitor, enable, group, numCounters, counterList);
}


inline void fast_call_chain_caller_glSemaphoreParameterui64vEXT (GLuint semaphore, GLenum pname, const GLuint64 *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSemaphoreParameterui64vEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glSemaphoreParameterui64vEXT)] = chain_next->next;
    ((MEOW_fp_glSemaphoreParameterui64vEXT) (chain_next->func)) (semaphore, pname, params);
}


inline void fast_call_chain_caller_glSetFenceNV (GLuint fence, GLenum condition)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSetFenceNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glSetFenceNV)] = chain_next->next;
    ((MEOW_fp_glSetFenceNV) (chain_next->func)) (fence, condition);
}


inline void fast_call_chain_caller_glShadeModel (GLenum mode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glShadeModel)];
    chain->chain_next.chain[MEOW_API_INDEX(glShadeModel)] = chain_next->next;
    ((MEOW_fp_glShadeModel) (chain_next->func)) (mode);
}


inline void fast_call_chain_caller_glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glShaderBinary)];
    chain->chain_next.chain[MEOW_API_INDEX(glShaderBinary)] = chain_next->next;
    ((MEOW_fp_glShaderBinary) (chain_next->func)) (count, shaders, binaryformat, binary, length);
}


inline void fast_call_chain_caller_glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glShaderSource)];
    chain->chain_next.chain[MEOW_API_INDEX(glShaderSource)] = chain_next->next;
    ((MEOW_fp_glShaderSource) (chain_next->func)) (shader, count, string, length);
}


inline void fast_call_chain_caller_glSignalSemaphoreEXT (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSignalSemaphoreEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glSignalSemaphoreEXT)] = chain_next->next;
    ((MEOW_fp_glSignalSemaphoreEXT) (chain_next->func)) (semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}


inline void fast_call_chain_caller_glSignalVkFenceNV (GLuint64 vkFence)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSignalVkFenceNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glSignalVkFenceNV)] = chain_next->next;
    ((MEOW_fp_glSignalVkFenceNV) (chain_next->func)) (vkFence);
}


inline void fast_call_chain_caller_glSignalVkSemaphoreNV (GLuint64 vkSemaphore)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSignalVkSemaphoreNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glSignalVkSemaphoreNV)] = chain_next->next;
    ((MEOW_fp_glSignalVkSemaphoreNV) (chain_next->func)) (vkSemaphore);
}


inline void fast_call_chain_caller_glStartTilingQCOM (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStartTilingQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glStartTilingQCOM)] = chain_next->next;
    ((MEOW_fp_glStartTilingQCOM) (chain_next->func)) (x, y, width, height, preserveMask);
}


inline void fast_call_chain_caller_glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilFillPathInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilFillPathInstancedNV)] = chain_next->next;
    ((MEOW_fp_glStencilFillPathInstancedNV) (chain_next->func)) (numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}


inline void fast_call_chain_caller_glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilFillPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilFillPathNV)] = chain_next->next;
    ((MEOW_fp_glStencilFillPathNV) (chain_next->func)) (path, fillMode, mask);
}


inline void fast_call_chain_caller_glStencilFunc (GLenum func, GLint ref, GLuint mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilFunc)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilFunc)] = chain_next->next;
    ((MEOW_fp_glStencilFunc) (chain_next->func)) (func, ref, mask);
}


inline void fast_call_chain_caller_glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilFuncSeparate)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilFuncSeparate)] = chain_next->next;
    ((MEOW_fp_glStencilFuncSeparate) (chain_next->func)) (face, func, ref, mask);
}


inline void fast_call_chain_caller_glStencilMask (GLuint mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilMask)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilMask)] = chain_next->next;
    ((MEOW_fp_glStencilMask) (chain_next->func)) (mask);
}


inline void fast_call_chain_caller_glStencilMaskSeparate (GLenum face, GLuint mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilMaskSeparate)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilMaskSeparate)] = chain_next->next;
    ((MEOW_fp_glStencilMaskSeparate) (chain_next->func)) (face, mask);
}


inline void fast_call_chain_caller_glStencilOp (GLenum fail, GLenum zfail, GLenum zpass)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilOp)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilOp)] = chain_next->next;
    ((MEOW_fp_glStencilOp) (chain_next->func)) (fail, zfail, zpass);
}


inline void fast_call_chain_caller_glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilOpSeparate)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilOpSeparate)] = chain_next->next;
    ((MEOW_fp_glStencilOpSeparate) (chain_next->func)) (face, sfail, dpfail, dppass);
}


inline void fast_call_chain_caller_glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilStrokePathInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilStrokePathInstancedNV)] = chain_next->next;
    ((MEOW_fp_glStencilStrokePathInstancedNV) (chain_next->func)) (numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}


inline void fast_call_chain_caller_glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilStrokePathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilStrokePathNV)] = chain_next->next;
    ((MEOW_fp_glStencilStrokePathNV) (chain_next->func)) (path, reference, mask);
}


inline void fast_call_chain_caller_glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverFillPathInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverFillPathInstancedNV)] = chain_next->next;
    ((MEOW_fp_glStencilThenCoverFillPathInstancedNV) (chain_next->func)) (numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
}


inline void fast_call_chain_caller_glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverFillPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverFillPathNV)] = chain_next->next;
    ((MEOW_fp_glStencilThenCoverFillPathNV) (chain_next->func)) (path, fillMode, mask, coverMode);
}


inline void fast_call_chain_caller_glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverStrokePathInstancedNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverStrokePathInstancedNV)] = chain_next->next;
    ((MEOW_fp_glStencilThenCoverStrokePathInstancedNV) (chain_next->func)) (numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
}


inline void fast_call_chain_caller_glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverStrokePathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glStencilThenCoverStrokePathNV)] = chain_next->next;
    ((MEOW_fp_glStencilThenCoverStrokePathNV) (chain_next->func)) (path, reference, mask, coverMode);
}


inline void fast_call_chain_caller_glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSubpixelPrecisionBiasNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glSubpixelPrecisionBiasNV)] = chain_next->next;
    ((MEOW_fp_glSubpixelPrecisionBiasNV) (chain_next->func)) (xbits, ybits);
}



inline GLboolean fast_call_chain_caller_glTestFenceNV (GLuint fence)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTestFenceNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glTestFenceNV)] = chain_next->next;
    return ((MEOW_fp_glTestFenceNV) (chain_next->func)) (fence);

}


inline void fast_call_chain_caller_glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexBuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexBuffer)] = chain_next->next;
    ((MEOW_fp_glTexBuffer) (chain_next->func)) (target, internalformat, buffer);
}


inline void fast_call_chain_caller_glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexBufferEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexBufferEXT)] = chain_next->next;
    ((MEOW_fp_glTexBufferEXT) (chain_next->func)) (target, internalformat, buffer);
}


inline void fast_call_chain_caller_glTexBufferOES (GLenum target, GLenum internalformat, GLuint buffer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexBufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexBufferOES)] = chain_next->next;
    ((MEOW_fp_glTexBufferOES) (chain_next->func)) (target, internalformat, buffer);
}


inline void fast_call_chain_caller_glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexBufferRange)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexBufferRange)] = chain_next->next;
    ((MEOW_fp_glTexBufferRange) (chain_next->func)) (target, internalformat, buffer, offset, size);
}


inline void fast_call_chain_caller_glTexBufferRangeEXT (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexBufferRangeEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexBufferRangeEXT)] = chain_next->next;
    ((MEOW_fp_glTexBufferRangeEXT) (chain_next->func)) (target, internalformat, buffer, offset, size);
}


inline void fast_call_chain_caller_glTexBufferRangeOES (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexBufferRangeOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexBufferRangeOES)] = chain_next->next;
    ((MEOW_fp_glTexBufferRangeOES) (chain_next->func)) (target, internalformat, buffer, offset, size);
}


inline void fast_call_chain_caller_glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoordPointer)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoordPointer)] = chain_next->next;
    ((MEOW_fp_glTexCoordPointer) (chain_next->func)) (size, type, stride, pointer);
}


inline void fast_call_chain_caller_glTexEnvf (GLenum target, GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnvf)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnvf)] = chain_next->next;
    ((MEOW_fp_glTexEnvf) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnvfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnvfv)] = chain_next->next;
    ((MEOW_fp_glTexEnvfv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexEnvi (GLenum target, GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnvi)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnvi)] = chain_next->next;
    ((MEOW_fp_glTexEnvi) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexEnviv (GLenum target, GLenum pname, const GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnviv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnviv)] = chain_next->next;
    ((MEOW_fp_glTexEnviv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexEnvx (GLenum target, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnvx)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnvx)] = chain_next->next;
    ((MEOW_fp_glTexEnvx) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexEnvxOES (GLenum target, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnvxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnvxOES)] = chain_next->next;
    ((MEOW_fp_glTexEnvxOES) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexEnvxv (GLenum target, GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnvxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnvxv)] = chain_next->next;
    ((MEOW_fp_glTexEnvxv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexEnvxvOES (GLenum target, GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexEnvxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexEnvxvOES)] = chain_next->next;
    ((MEOW_fp_glTexEnvxvOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexGenfOES (GLenum coord, GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexGenfOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexGenfOES)] = chain_next->next;
    ((MEOW_fp_glTexGenfOES) (chain_next->func)) (coord, pname, param);
}


inline void fast_call_chain_caller_glTexGenfvOES (GLenum coord, GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexGenfvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexGenfvOES)] = chain_next->next;
    ((MEOW_fp_glTexGenfvOES) (chain_next->func)) (coord, pname, params);
}


inline void fast_call_chain_caller_glTexGeniOES (GLenum coord, GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexGeniOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexGeniOES)] = chain_next->next;
    ((MEOW_fp_glTexGeniOES) (chain_next->func)) (coord, pname, param);
}


inline void fast_call_chain_caller_glTexGenivOES (GLenum coord, GLenum pname, const GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexGenivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexGenivOES)] = chain_next->next;
    ((MEOW_fp_glTexGenivOES) (chain_next->func)) (coord, pname, params);
}


inline void fast_call_chain_caller_glTexGenxOES (GLenum coord, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexGenxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexGenxOES)] = chain_next->next;
    ((MEOW_fp_glTexGenxOES) (chain_next->func)) (coord, pname, param);
}


inline void fast_call_chain_caller_glTexGenxvOES (GLenum coord, GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexGenxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexGenxvOES)] = chain_next->next;
    ((MEOW_fp_glTexGenxvOES) (chain_next->func)) (coord, pname, params);
}


inline void fast_call_chain_caller_glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexImage2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexImage2D)] = chain_next->next;
    ((MEOW_fp_glTexImage2D) (chain_next->func)) (target, level, internalformat, width, height, border, format, type, pixels);
}


inline void fast_call_chain_caller_glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexImage3D)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexImage3D)] = chain_next->next;
    ((MEOW_fp_glTexImage3D) (chain_next->func)) (target, level, internalformat, width, height, depth, border, format, type, pixels);
}


inline void fast_call_chain_caller_glTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexImage3DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexImage3DOES)] = chain_next->next;
    ((MEOW_fp_glTexImage3DOES) (chain_next->func)) (target, level, internalformat, width, height, depth, border, format, type, pixels);
}


inline void fast_call_chain_caller_glTexPageCommitmentEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexPageCommitmentEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexPageCommitmentEXT)] = chain_next->next;
    ((MEOW_fp_glTexPageCommitmentEXT) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}


inline void fast_call_chain_caller_glTexParameterIiv (GLenum target, GLenum pname, const GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIiv)] = chain_next->next;
    ((MEOW_fp_glTexParameterIiv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterIivEXT (GLenum target, GLenum pname, const GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIivEXT)] = chain_next->next;
    ((MEOW_fp_glTexParameterIivEXT) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterIivOES (GLenum target, GLenum pname, const GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIivOES)] = chain_next->next;
    ((MEOW_fp_glTexParameterIivOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIuiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIuiv)] = chain_next->next;
    ((MEOW_fp_glTexParameterIuiv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIuivEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIuivEXT)] = chain_next->next;
    ((MEOW_fp_glTexParameterIuivEXT) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterIuivOES (GLenum target, GLenum pname, const GLuint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIuivOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterIuivOES)] = chain_next->next;
    ((MEOW_fp_glTexParameterIuivOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterf (GLenum target, GLenum pname, GLfloat param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterf)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterf)] = chain_next->next;
    ((MEOW_fp_glTexParameterf) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterfv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterfv)] = chain_next->next;
    ((MEOW_fp_glTexParameterfv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameteri (GLenum target, GLenum pname, GLint param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameteri)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameteri)] = chain_next->next;
    ((MEOW_fp_glTexParameteri) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexParameteriv (GLenum target, GLenum pname, const GLint *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameteriv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameteriv)] = chain_next->next;
    ((MEOW_fp_glTexParameteriv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterx (GLenum target, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterx)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterx)] = chain_next->next;
    ((MEOW_fp_glTexParameterx) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexParameterxOES (GLenum target, GLenum pname, GLfixed param)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterxOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterxOES)] = chain_next->next;
    ((MEOW_fp_glTexParameterxOES) (chain_next->func)) (target, pname, param);
}


inline void fast_call_chain_caller_glTexParameterxv (GLenum target, GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterxv)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterxv)] = chain_next->next;
    ((MEOW_fp_glTexParameterxv) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexParameterxvOES (GLenum target, GLenum pname, const GLfixed *params)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexParameterxvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexParameterxvOES)] = chain_next->next;
    ((MEOW_fp_glTexParameterxvOES) (chain_next->func)) (target, pname, params);
}


inline void fast_call_chain_caller_glTexStorage1DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage1DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage1DEXT)] = chain_next->next;
    ((MEOW_fp_glTexStorage1DEXT) (chain_next->func)) (target, levels, internalformat, width);
}


inline void fast_call_chain_caller_glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage2D)] = chain_next->next;
    ((MEOW_fp_glTexStorage2D) (chain_next->func)) (target, levels, internalformat, width, height);
}


inline void fast_call_chain_caller_glTexStorage2DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage2DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage2DEXT)] = chain_next->next;
    ((MEOW_fp_glTexStorage2DEXT) (chain_next->func)) (target, levels, internalformat, width, height);
}


inline void fast_call_chain_caller_glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage2DMultisample)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage2DMultisample)] = chain_next->next;
    ((MEOW_fp_glTexStorage2DMultisample) (chain_next->func)) (target, samples, internalformat, width, height, fixedsamplelocations);
}


inline void fast_call_chain_caller_glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3D)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3D)] = chain_next->next;
    ((MEOW_fp_glTexStorage3D) (chain_next->func)) (target, levels, internalformat, width, height, depth);
}


inline void fast_call_chain_caller_glTexStorage3DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3DEXT)] = chain_next->next;
    ((MEOW_fp_glTexStorage3DEXT) (chain_next->func)) (target, levels, internalformat, width, height, depth);
}


inline void fast_call_chain_caller_glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3DMultisample)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3DMultisample)] = chain_next->next;
    ((MEOW_fp_glTexStorage3DMultisample) (chain_next->func)) (target, samples, internalformat, width, height, depth, fixedsamplelocations);
}


inline void fast_call_chain_caller_glTexStorage3DMultisampleOES (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3DMultisampleOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorage3DMultisampleOES)] = chain_next->next;
    ((MEOW_fp_glTexStorage3DMultisampleOES) (chain_next->func)) (target, samples, internalformat, width, height, depth, fixedsamplelocations);
}


inline void fast_call_chain_caller_glTexStorageMem2DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem2DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem2DEXT)] = chain_next->next;
    ((MEOW_fp_glTexStorageMem2DEXT) (chain_next->func)) (target, levels, internalFormat, width, height, memory, offset);
}


inline void fast_call_chain_caller_glTexStorageMem2DMultisampleEXT (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem2DMultisampleEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem2DMultisampleEXT)] = chain_next->next;
    ((MEOW_fp_glTexStorageMem2DMultisampleEXT) (chain_next->func)) (target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}


inline void fast_call_chain_caller_glTexStorageMem3DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem3DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem3DEXT)] = chain_next->next;
    ((MEOW_fp_glTexStorageMem3DEXT) (chain_next->func)) (target, levels, internalFormat, width, height, depth, memory, offset);
}


inline void fast_call_chain_caller_glTexStorageMem3DMultisampleEXT (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem3DMultisampleEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexStorageMem3DMultisampleEXT)] = chain_next->next;
    ((MEOW_fp_glTexStorageMem3DMultisampleEXT) (chain_next->func)) (target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}


inline void fast_call_chain_caller_glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexSubImage2D)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexSubImage2D)] = chain_next->next;
    ((MEOW_fp_glTexSubImage2D) (chain_next->func)) (target, level, xoffset, yoffset, width, height, format, type, pixels);
}


inline void fast_call_chain_caller_glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexSubImage3D)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexSubImage3D)] = chain_next->next;
    ((MEOW_fp_glTexSubImage3D) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}


inline void fast_call_chain_caller_glTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexSubImage3DOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexSubImage3DOES)] = chain_next->next;
    ((MEOW_fp_glTexSubImage3DOES) (chain_next->func)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}


inline void fast_call_chain_caller_glTextureFoveationParametersQCOM (GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureFoveationParametersQCOM)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureFoveationParametersQCOM)] = chain_next->next;
    ((MEOW_fp_glTextureFoveationParametersQCOM) (chain_next->func)) (texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}


inline void fast_call_chain_caller_glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureStorage1DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureStorage1DEXT)] = chain_next->next;
    ((MEOW_fp_glTextureStorage1DEXT) (chain_next->func)) (texture, target, levels, internalformat, width);
}


inline void fast_call_chain_caller_glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureStorage2DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureStorage2DEXT)] = chain_next->next;
    ((MEOW_fp_glTextureStorage2DEXT) (chain_next->func)) (texture, target, levels, internalformat, width, height);
}


inline void fast_call_chain_caller_glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureStorage3DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureStorage3DEXT)] = chain_next->next;
    ((MEOW_fp_glTextureStorage3DEXT) (chain_next->func)) (texture, target, levels, internalformat, width, height, depth);
}


inline void fast_call_chain_caller_glTextureStorageMem2DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem2DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem2DEXT)] = chain_next->next;
    ((MEOW_fp_glTextureStorageMem2DEXT) (chain_next->func)) (texture, levels, internalFormat, width, height, memory, offset);
}


inline void fast_call_chain_caller_glTextureStorageMem2DMultisampleEXT (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem2DMultisampleEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem2DMultisampleEXT)] = chain_next->next;
    ((MEOW_fp_glTextureStorageMem2DMultisampleEXT) (chain_next->func)) (texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}


inline void fast_call_chain_caller_glTextureStorageMem3DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem3DEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem3DEXT)] = chain_next->next;
    ((MEOW_fp_glTextureStorageMem3DEXT) (chain_next->func)) (texture, levels, internalFormat, width, height, depth, memory, offset);
}


inline void fast_call_chain_caller_glTextureStorageMem3DMultisampleEXT (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem3DMultisampleEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureStorageMem3DMultisampleEXT)] = chain_next->next;
    ((MEOW_fp_glTextureStorageMem3DMultisampleEXT) (chain_next->func)) (texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}


inline void fast_call_chain_caller_glTextureViewEXT (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureViewEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureViewEXT)] = chain_next->next;
    ((MEOW_fp_glTextureViewEXT) (chain_next->func)) (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}


inline void fast_call_chain_caller_glTextureViewOES (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTextureViewOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTextureViewOES)] = chain_next->next;
    ((MEOW_fp_glTextureViewOES) (chain_next->func)) (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}


inline void fast_call_chain_caller_glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTransformFeedbackVaryings)];
    chain->chain_next.chain[MEOW_API_INDEX(glTransformFeedbackVaryings)] = chain_next->next;
    ((MEOW_fp_glTransformFeedbackVaryings) (chain_next->func)) (program, count, varyings, bufferMode);
}


inline void fast_call_chain_caller_glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTransformPathNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glTransformPathNV)] = chain_next->next;
    ((MEOW_fp_glTransformPathNV) (chain_next->func)) (resultPath, srcPath, transformType, transformValues);
}


inline void fast_call_chain_caller_glTranslatef (GLfloat x, GLfloat y, GLfloat z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTranslatef)];
    chain->chain_next.chain[MEOW_API_INDEX(glTranslatef)] = chain_next->next;
    ((MEOW_fp_glTranslatef) (chain_next->func)) (x, y, z);
}


inline void fast_call_chain_caller_glTranslatex (GLfixed x, GLfixed y, GLfixed z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTranslatex)];
    chain->chain_next.chain[MEOW_API_INDEX(glTranslatex)] = chain_next->next;
    ((MEOW_fp_glTranslatex) (chain_next->func)) (x, y, z);
}


inline void fast_call_chain_caller_glTranslatexOES (GLfixed x, GLfixed y, GLfixed z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTranslatexOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTranslatexOES)] = chain_next->next;
    ((MEOW_fp_glTranslatexOES) (chain_next->func)) (x, y, z);
}


inline void fast_call_chain_caller_glUniform1f (GLint location, GLfloat v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1f)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1f)] = chain_next->next;
    ((MEOW_fp_glUniform1f) (chain_next->func)) (location, v0);
}


inline void fast_call_chain_caller_glUniform1fv (GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1fv)] = chain_next->next;
    ((MEOW_fp_glUniform1fv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform1i (GLint location, GLint v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1i)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1i)] = chain_next->next;
    ((MEOW_fp_glUniform1i) (chain_next->func)) (location, v0);
}


inline void fast_call_chain_caller_glUniform1i64NV (GLint location, GLint64EXT x)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1i64NV)] = chain_next->next;
    ((MEOW_fp_glUniform1i64NV) (chain_next->func)) (location, x);
}


inline void fast_call_chain_caller_glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1i64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform1i64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform1iv (GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1iv)] = chain_next->next;
    ((MEOW_fp_glUniform1iv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform1ui (GLint location, GLuint v0)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1ui)] = chain_next->next;
    ((MEOW_fp_glUniform1ui) (chain_next->func)) (location, v0);
}


inline void fast_call_chain_caller_glUniform1ui64NV (GLint location, GLuint64EXT x)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1ui64NV)] = chain_next->next;
    ((MEOW_fp_glUniform1ui64NV) (chain_next->func)) (location, x);
}


inline void fast_call_chain_caller_glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1ui64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform1ui64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform1uiv (GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform1uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform1uiv)] = chain_next->next;
    ((MEOW_fp_glUniform1uiv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform2f (GLint location, GLfloat v0, GLfloat v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2f)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2f)] = chain_next->next;
    ((MEOW_fp_glUniform2f) (chain_next->func)) (location, v0, v1);
}


inline void fast_call_chain_caller_glUniform2fv (GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2fv)] = chain_next->next;
    ((MEOW_fp_glUniform2fv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform2i (GLint location, GLint v0, GLint v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2i)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2i)] = chain_next->next;
    ((MEOW_fp_glUniform2i) (chain_next->func)) (location, v0, v1);
}


inline void fast_call_chain_caller_glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2i64NV)] = chain_next->next;
    ((MEOW_fp_glUniform2i64NV) (chain_next->func)) (location, x, y);
}


inline void fast_call_chain_caller_glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2i64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform2i64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform2iv (GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2iv)] = chain_next->next;
    ((MEOW_fp_glUniform2iv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform2ui (GLint location, GLuint v0, GLuint v1)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2ui)] = chain_next->next;
    ((MEOW_fp_glUniform2ui) (chain_next->func)) (location, v0, v1);
}


inline void fast_call_chain_caller_glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2ui64NV)] = chain_next->next;
    ((MEOW_fp_glUniform2ui64NV) (chain_next->func)) (location, x, y);
}


inline void fast_call_chain_caller_glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2ui64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform2ui64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform2uiv (GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform2uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform2uiv)] = chain_next->next;
    ((MEOW_fp_glUniform2uiv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3f)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3f)] = chain_next->next;
    ((MEOW_fp_glUniform3f) (chain_next->func)) (location, v0, v1, v2);
}


inline void fast_call_chain_caller_glUniform3fv (GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3fv)] = chain_next->next;
    ((MEOW_fp_glUniform3fv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform3i (GLint location, GLint v0, GLint v1, GLint v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3i)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3i)] = chain_next->next;
    ((MEOW_fp_glUniform3i) (chain_next->func)) (location, v0, v1, v2);
}


inline void fast_call_chain_caller_glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3i64NV)] = chain_next->next;
    ((MEOW_fp_glUniform3i64NV) (chain_next->func)) (location, x, y, z);
}


inline void fast_call_chain_caller_glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3i64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform3i64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform3iv (GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3iv)] = chain_next->next;
    ((MEOW_fp_glUniform3iv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3ui)] = chain_next->next;
    ((MEOW_fp_glUniform3ui) (chain_next->func)) (location, v0, v1, v2);
}


inline void fast_call_chain_caller_glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3ui64NV)] = chain_next->next;
    ((MEOW_fp_glUniform3ui64NV) (chain_next->func)) (location, x, y, z);
}


inline void fast_call_chain_caller_glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3ui64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform3ui64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform3uiv (GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform3uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform3uiv)] = chain_next->next;
    ((MEOW_fp_glUniform3uiv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4f)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4f)] = chain_next->next;
    ((MEOW_fp_glUniform4f) (chain_next->func)) (location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glUniform4fv (GLint location, GLsizei count, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4fv)] = chain_next->next;
    ((MEOW_fp_glUniform4fv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4i)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4i)] = chain_next->next;
    ((MEOW_fp_glUniform4i) (chain_next->func)) (location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4i64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4i64NV)] = chain_next->next;
    ((MEOW_fp_glUniform4i64NV) (chain_next->func)) (location, x, y, z, w);
}


inline void fast_call_chain_caller_glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4i64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4i64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform4i64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform4iv (GLint location, GLsizei count, const GLint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4iv)] = chain_next->next;
    ((MEOW_fp_glUniform4iv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4ui)] = chain_next->next;
    ((MEOW_fp_glUniform4ui) (chain_next->func)) (location, v0, v1, v2, v3);
}


inline void fast_call_chain_caller_glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4ui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4ui64NV)] = chain_next->next;
    ((MEOW_fp_glUniform4ui64NV) (chain_next->func)) (location, x, y, z, w);
}


inline void fast_call_chain_caller_glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4ui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4ui64vNV)] = chain_next->next;
    ((MEOW_fp_glUniform4ui64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniform4uiv (GLint location, GLsizei count, const GLuint *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniform4uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniform4uiv)] = chain_next->next;
    ((MEOW_fp_glUniform4uiv) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformBlockBinding)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformBlockBinding)] = chain_next->next;
    ((MEOW_fp_glUniformBlockBinding) (chain_next->func)) (program, uniformBlockIndex, uniformBlockBinding);
}


inline void fast_call_chain_caller_glUniformHandleui64IMG (GLint location, GLuint64 value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64IMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64IMG)] = chain_next->next;
    ((MEOW_fp_glUniformHandleui64IMG) (chain_next->func)) (location, value);
}


inline void fast_call_chain_caller_glUniformHandleui64NV (GLint location, GLuint64 value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64NV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64NV)] = chain_next->next;
    ((MEOW_fp_glUniformHandleui64NV) (chain_next->func)) (location, value);
}


inline void fast_call_chain_caller_glUniformHandleui64vIMG (GLint location, GLsizei count, const GLuint64 *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64vIMG)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64vIMG)] = chain_next->next;
    ((MEOW_fp_glUniformHandleui64vIMG) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64vNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformHandleui64vNV)] = chain_next->next;
    ((MEOW_fp_glUniformHandleui64vNV) (chain_next->func)) (location, count, value);
}


inline void fast_call_chain_caller_glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix2fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x3fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix2x3fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix2x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x3fvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x3fvNV)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix2x3fvNV) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x4fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix2x4fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix2x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x4fvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix2x4fvNV)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix2x4fvNV) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix3fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x2fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix3x2fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix3x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x2fvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x2fvNV)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix3x2fvNV) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x4fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix3x4fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix3x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x4fvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix3x4fvNV)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix3x4fvNV) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix4fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x2fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix4x2fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix4x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x2fvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x2fvNV)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix4x2fvNV) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x3fv)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix4x3fv) (chain_next->func)) (location, count, transpose, value);
}


inline void fast_call_chain_caller_glUniformMatrix4x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x3fvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glUniformMatrix4x3fvNV)] = chain_next->next;
    ((MEOW_fp_glUniformMatrix4x3fvNV) (chain_next->func)) (location, count, transpose, value);
}



inline GLboolean fast_call_chain_caller_glUnmapBuffer (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUnmapBuffer)];
    chain->chain_next.chain[MEOW_API_INDEX(glUnmapBuffer)] = chain_next->next;
    return ((MEOW_fp_glUnmapBuffer) (chain_next->func)) (target);

}



inline GLboolean fast_call_chain_caller_glUnmapBufferOES (GLenum target)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUnmapBufferOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glUnmapBufferOES)] = chain_next->next;
    return ((MEOW_fp_glUnmapBufferOES) (chain_next->func)) (target);

}


inline void fast_call_chain_caller_glUseProgram (GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUseProgram)];
    chain->chain_next.chain[MEOW_API_INDEX(glUseProgram)] = chain_next->next;
    ((MEOW_fp_glUseProgram) (chain_next->func)) (program);
}


inline void fast_call_chain_caller_glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUseProgramStages)];
    chain->chain_next.chain[MEOW_API_INDEX(glUseProgramStages)] = chain_next->next;
    ((MEOW_fp_glUseProgramStages) (chain_next->func)) (pipeline, stages, program);
}


inline void fast_call_chain_caller_glUseProgramStagesEXT (GLuint pipeline, GLbitfield stages, GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glUseProgramStagesEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glUseProgramStagesEXT)] = chain_next->next;
    ((MEOW_fp_glUseProgramStagesEXT) (chain_next->func)) (pipeline, stages, program);
}


inline void fast_call_chain_caller_glValidateProgram (GLuint program)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glValidateProgram)];
    chain->chain_next.chain[MEOW_API_INDEX(glValidateProgram)] = chain_next->next;
    ((MEOW_fp_glValidateProgram) (chain_next->func)) (program);
}


inline void fast_call_chain_caller_glValidateProgramPipeline (GLuint pipeline)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glValidateProgramPipeline)];
    chain->chain_next.chain[MEOW_API_INDEX(glValidateProgramPipeline)] = chain_next->next;
    ((MEOW_fp_glValidateProgramPipeline) (chain_next->func)) (pipeline);
}


inline void fast_call_chain_caller_glValidateProgramPipelineEXT (GLuint pipeline)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glValidateProgramPipelineEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glValidateProgramPipelineEXT)] = chain_next->next;
    ((MEOW_fp_glValidateProgramPipelineEXT) (chain_next->func)) (pipeline);
}


inline void fast_call_chain_caller_glVertexAttrib1f (GLuint index, GLfloat x)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib1f)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib1f)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib1f) (chain_next->func)) (index, x);
}


inline void fast_call_chain_caller_glVertexAttrib1fv (GLuint index, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib1fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib1fv)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib1fv) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib2f)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib2f)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib2f) (chain_next->func)) (index, x, y);
}


inline void fast_call_chain_caller_glVertexAttrib2fv (GLuint index, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib2fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib2fv)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib2fv) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib3f)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib3f)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib3f) (chain_next->func)) (index, x, y, z);
}


inline void fast_call_chain_caller_glVertexAttrib3fv (GLuint index, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib3fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib3fv)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib3fv) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib4f)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib4f)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib4f) (chain_next->func)) (index, x, y, z, w);
}


inline void fast_call_chain_caller_glVertexAttrib4fv (GLuint index, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib4fv)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttrib4fv)] = chain_next->next;
    ((MEOW_fp_glVertexAttrib4fv) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribBinding)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribBinding)] = chain_next->next;
    ((MEOW_fp_glVertexAttribBinding) (chain_next->func)) (attribindex, bindingindex);
}


inline void fast_call_chain_caller_glVertexAttribDivisor (GLuint index, GLuint divisor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisor)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisor)] = chain_next->next;
    ((MEOW_fp_glVertexAttribDivisor) (chain_next->func)) (index, divisor);
}


inline void fast_call_chain_caller_glVertexAttribDivisorANGLE (GLuint index, GLuint divisor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisorANGLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisorANGLE)] = chain_next->next;
    ((MEOW_fp_glVertexAttribDivisorANGLE) (chain_next->func)) (index, divisor);
}


inline void fast_call_chain_caller_glVertexAttribDivisorEXT (GLuint index, GLuint divisor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisorEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisorEXT)] = chain_next->next;
    ((MEOW_fp_glVertexAttribDivisorEXT) (chain_next->func)) (index, divisor);
}


inline void fast_call_chain_caller_glVertexAttribDivisorNV (GLuint index, GLuint divisor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisorNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribDivisorNV)] = chain_next->next;
    ((MEOW_fp_glVertexAttribDivisorNV) (chain_next->func)) (index, divisor);
}


inline void fast_call_chain_caller_glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribFormat)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribFormat)] = chain_next->next;
    ((MEOW_fp_glVertexAttribFormat) (chain_next->func)) (attribindex, size, type, normalized, relativeoffset);
}


inline void fast_call_chain_caller_glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4i)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4i)] = chain_next->next;
    ((MEOW_fp_glVertexAttribI4i) (chain_next->func)) (index, x, y, z, w);
}


inline void fast_call_chain_caller_glVertexAttribI4iv (GLuint index, const GLint *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4iv)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4iv)] = chain_next->next;
    ((MEOW_fp_glVertexAttribI4iv) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4ui)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4ui)] = chain_next->next;
    ((MEOW_fp_glVertexAttribI4ui) (chain_next->func)) (index, x, y, z, w);
}


inline void fast_call_chain_caller_glVertexAttribI4uiv (GLuint index, const GLuint *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4uiv)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribI4uiv)] = chain_next->next;
    ((MEOW_fp_glVertexAttribI4uiv) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribIFormat)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribIFormat)] = chain_next->next;
    ((MEOW_fp_glVertexAttribIFormat) (chain_next->func)) (attribindex, size, type, relativeoffset);
}


inline void fast_call_chain_caller_glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribIPointer)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribIPointer)] = chain_next->next;
    ((MEOW_fp_glVertexAttribIPointer) (chain_next->func)) (index, size, type, stride, pointer);
}


inline void fast_call_chain_caller_glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribPointer)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexAttribPointer)] = chain_next->next;
    ((MEOW_fp_glVertexAttribPointer) (chain_next->func)) (index, size, type, normalized, stride, pointer);
}


inline void fast_call_chain_caller_glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexBindingDivisor)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexBindingDivisor)] = chain_next->next;
    ((MEOW_fp_glVertexBindingDivisor) (chain_next->func)) (bindingindex, divisor);
}


inline void fast_call_chain_caller_glVertexPointer (GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertexPointer)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertexPointer)] = chain_next->next;
    ((MEOW_fp_glVertexPointer) (chain_next->func)) (size, type, stride, pointer);
}


inline void fast_call_chain_caller_glViewport (GLint x, GLint y, GLsizei width, GLsizei height)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewport)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewport)] = chain_next->next;
    ((MEOW_fp_glViewport) (chain_next->func)) (x, y, width, height);
}


inline void fast_call_chain_caller_glViewportArrayvNV (GLuint first, GLsizei count, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportArrayvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportArrayvNV)] = chain_next->next;
    ((MEOW_fp_glViewportArrayvNV) (chain_next->func)) (first, count, v);
}


inline void fast_call_chain_caller_glViewportArrayvOES (GLuint first, GLsizei count, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportArrayvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportArrayvOES)] = chain_next->next;
    ((MEOW_fp_glViewportArrayvOES) (chain_next->func)) (first, count, v);
}


inline void fast_call_chain_caller_glViewportIndexedfNV (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfNV)] = chain_next->next;
    ((MEOW_fp_glViewportIndexedfNV) (chain_next->func)) (index, x, y, w, h);
}


inline void fast_call_chain_caller_glViewportIndexedfOES (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfOES)] = chain_next->next;
    ((MEOW_fp_glViewportIndexedfOES) (chain_next->func)) (index, x, y, w, h);
}


inline void fast_call_chain_caller_glViewportIndexedfvNV (GLuint index, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfvNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfvNV)] = chain_next->next;
    ((MEOW_fp_glViewportIndexedfvNV) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glViewportIndexedfvOES (GLuint index, const GLfloat *v)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportIndexedfvOES)] = chain_next->next;
    ((MEOW_fp_glViewportIndexedfvOES) (chain_next->func)) (index, v);
}


inline void fast_call_chain_caller_glViewportPositionWScaleNV (GLuint index, GLfloat xcoeff, GLfloat ycoeff)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportPositionWScaleNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportPositionWScaleNV)] = chain_next->next;
    ((MEOW_fp_glViewportPositionWScaleNV) (chain_next->func)) (index, xcoeff, ycoeff);
}


inline void fast_call_chain_caller_glViewportSwizzleNV (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glViewportSwizzleNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glViewportSwizzleNV)] = chain_next->next;
    ((MEOW_fp_glViewportSwizzleNV) (chain_next->func)) (index, swizzlex, swizzley, swizzlez, swizzlew);
}


inline void fast_call_chain_caller_glWaitSemaphoreEXT (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glWaitSemaphoreEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glWaitSemaphoreEXT)] = chain_next->next;
    ((MEOW_fp_glWaitSemaphoreEXT) (chain_next->func)) (semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}


inline void fast_call_chain_caller_glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glWaitSync)];
    chain->chain_next.chain[MEOW_API_INDEX(glWaitSync)] = chain_next->next;
    ((MEOW_fp_glWaitSync) (chain_next->func)) (sync, flags, timeout);
}


inline void fast_call_chain_caller_glWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glWaitSyncAPPLE)];
    chain->chain_next.chain[MEOW_API_INDEX(glWaitSyncAPPLE)] = chain_next->next;
    ((MEOW_fp_glWaitSyncAPPLE) (chain_next->func)) (sync, flags, timeout);
}


inline void fast_call_chain_caller_glWaitVkSemaphoreNV (GLuint64 vkSemaphore)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glWaitVkSemaphoreNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glWaitVkSemaphoreNV)] = chain_next->next;
    ((MEOW_fp_glWaitVkSemaphoreNV) (chain_next->func)) (vkSemaphore);
}


inline void fast_call_chain_caller_glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glWeightPathsNV)];
    chain->chain_next.chain[MEOW_API_INDEX(glWeightPathsNV)] = chain_next->next;
    ((MEOW_fp_glWeightPathsNV) (chain_next->func)) (resultPath, numPaths, paths, weights);
}


inline void fast_call_chain_caller_glWeightPointerOES (GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glWeightPointerOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glWeightPointerOES)] = chain_next->next;
    ((MEOW_fp_glWeightPointerOES) (chain_next->func)) (size, type, stride, pointer);
}


inline void fast_call_chain_caller_glWindowRectanglesEXT (GLenum mode, GLsizei count, const GLint *box)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glWindowRectanglesEXT)];
    chain->chain_next.chain[MEOW_API_INDEX(glWindowRectanglesEXT)] = chain_next->next;
    ((MEOW_fp_glWindowRectanglesEXT) (chain_next->func)) (mode, count, box);
}


inline void fast_call_chain_caller_glMultiTexCoord1bOES (GLenum texture, GLbyte s)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord1bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord1bOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord1bOES) (chain_next->func)) (texture, s);
}


inline void fast_call_chain_caller_glMultiTexCoord1bvOES (GLenum texture, const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord1bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord1bvOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord1bvOES) (chain_next->func)) (texture, coords);
}


inline void fast_call_chain_caller_glMultiTexCoord2bOES (GLenum texture, GLbyte s, GLbyte t)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord2bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord2bOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord2bOES) (chain_next->func)) (texture, s, t);
}


inline void fast_call_chain_caller_glMultiTexCoord2bvOES (GLenum texture, const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord2bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord2bvOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord2bvOES) (chain_next->func)) (texture, coords);
}


inline void fast_call_chain_caller_glMultiTexCoord3bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord3bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord3bOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord3bOES) (chain_next->func)) (texture, s, t, r);
}


inline void fast_call_chain_caller_glMultiTexCoord3bvOES (GLenum texture, const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord3bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord3bvOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord3bvOES) (chain_next->func)) (texture, coords);
}


inline void fast_call_chain_caller_glMultiTexCoord4bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4bOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord4bOES) (chain_next->func)) (texture, s, t, r, q);
}


inline void fast_call_chain_caller_glMultiTexCoord4bvOES (GLenum texture, const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glMultiTexCoord4bvOES)] = chain_next->next;
    ((MEOW_fp_glMultiTexCoord4bvOES) (chain_next->func)) (texture, coords);
}


inline void fast_call_chain_caller_glSampleCoverageOES (GLfixed value, GLboolean invert)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glSampleCoverageOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glSampleCoverageOES)] = chain_next->next;
    ((MEOW_fp_glSampleCoverageOES) (chain_next->func)) (value, invert);
}


inline void fast_call_chain_caller_glTexCoord1bOES (GLbyte s)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord1bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord1bOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord1bOES) (chain_next->func)) (s);
}


inline void fast_call_chain_caller_glTexCoord1bvOES (const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord1bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord1bvOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord1bvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glTexCoord2bOES (GLbyte s, GLbyte t)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord2bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord2bOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord2bOES) (chain_next->func)) (s, t);
}


inline void fast_call_chain_caller_glTexCoord2bvOES (const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord2bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord2bvOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord2bvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glTexCoord3bOES (GLbyte s, GLbyte t, GLbyte r)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord3bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord3bOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord3bOES) (chain_next->func)) (s, t, r);
}


inline void fast_call_chain_caller_glTexCoord3bvOES (const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord3bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord3bvOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord3bvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glTexCoord4bOES (GLbyte s, GLbyte t, GLbyte r, GLbyte q)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord4bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord4bOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord4bOES) (chain_next->func)) (s, t, r, q);
}


inline void fast_call_chain_caller_glTexCoord4bvOES (const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glTexCoord4bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glTexCoord4bvOES)] = chain_next->next;
    ((MEOW_fp_glTexCoord4bvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glVertex2bOES (GLbyte x)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertex2bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertex2bOES)] = chain_next->next;
    ((MEOW_fp_glVertex2bOES) (chain_next->func)) (x);
}


inline void fast_call_chain_caller_glVertex2bvOES (const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertex2bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertex2bvOES)] = chain_next->next;
    ((MEOW_fp_glVertex2bvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glVertex3bOES (GLbyte x, GLbyte y)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertex3bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertex3bOES)] = chain_next->next;
    ((MEOW_fp_glVertex3bOES) (chain_next->func)) (x, y);
}


inline void fast_call_chain_caller_glVertex3bvOES (const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertex3bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertex3bvOES)] = chain_next->next;
    ((MEOW_fp_glVertex3bvOES) (chain_next->func)) (coords);
}


inline void fast_call_chain_caller_glVertex4bOES (GLbyte x, GLbyte y, GLbyte z)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertex4bOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertex4bOES)] = chain_next->next;
    ((MEOW_fp_glVertex4bOES) (chain_next->func)) (x, y, z);
}


inline void fast_call_chain_caller_glVertex4bvOES (const GLbyte * coords)
{
    FastCallChain* chain = get_fast_call_chain();

    MEOW_callchain_t* chain_next = chain->chain_next.chain[MEOW_API_INDEX(glVertex4bvOES)];
    chain->chain_next.chain[MEOW_API_INDEX(glVertex4bvOES)] = chain_next->next;
    ((MEOW_fp_glVertex4bvOES) (chain_next->func)) (coords);
}

