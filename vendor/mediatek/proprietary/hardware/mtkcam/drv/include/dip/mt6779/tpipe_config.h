#ifndef __TPIPE_CONFIG_H__
#define __TPIPE_CONFIG_H__

#define TILE_PLATFORM_DRIVER /* to change define with platform unique */

#include "wpe_cal.h"
#include "isp_drv_dip_platform.h"

/* following define can be changed with rebuilding tpipe_driver.c */
#define LOG_REMARK_MUST_FILL_STR "<must>" /* can be changed */
#define LOG_REMARK_NOT_FOUND_STR "<no config>?" /* can be changed */
#define LOG_REMARK_HW_NOT_FOUND_STR "<no hw>?" /* can be changed */
#define LOG_REMARK_HW_REG_STR "<hw>" /* can be changed */
#define LOG_REMARK_DEBUG_STR "<debug>" /* can be changed */
#define LOG_REMARK_HW_DIFF_STR "<hw diff> " /* can be changed */
#define LOG_REMARK_HW_LOG_STR "<hw log>" /* can be changed */
#define TPIPE_DEBUG_DUMP_HEADER "[ISP][tpipe_dump]"
#define TPIPE_DEBUG_DUMP_START "start MT6593"
#define TPIPE_DEBUG_DUMP_END "end MT6593"
#define TPIPE_LOG_PARSE_FILE_NAME "tpipe_log_parse"
#define TPIPE_LOG_PARSE_FILE_EXT ".txt"
#define TPIPE_REG_DUMP_HEADER "0x"
#define TPIPE_DIP_BASE_HW     (0x15021000)
#define TPIPE_DIP_ADDR_START  (0x15021000)
#define TPIPE_DIP_ADDR_END    (0x1502CBD7)
#define TPIPE_DIP_DUMP_SKIP_NO ((unsigned int)(TPIPE_DIP_ADDR_START - TPIPE_DIP_BASE_HW)>>2)
#define TPIPE_MFB_BASE_HW	TPIPE_DIP_BASE_HW //(0x15010000)
#define TPIPE_MFB_ADDR_START  TPIPE_DIP_ADDR_START //(0x15010000)
#define TPIPE_MFB_ADDR_END    TPIPE_DIP_ADDR_END //(0x15010900)
#define TPIPE_MFB_DUMP_SKIP_NO ((unsigned int)(TPIPE_MFB_ADDR_START - TPIPE_MFB_BASE_HW)>>2)

#define MAX_READ_REG_NUM 4
#ifdef TILE_PLATFORM_DRIVER
#define MAX_TILE_TOT_NO (256)
#define MAX_ISP_DUMP_HEX_PER_TILE (256)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE (4)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE_S (24)
#define MAX_ISP_DUMP_HEX_PER_TILE_MFB (64)
#else
#undef MAX_TILE_TOT_NO
#define MAX_TILE_TOT_NO (1200)
#define MAX_ISP_DUMP_HEX_PER_TILE (256)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE (4)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE_S (24)
#define MAX_ISP_DUMP_HEX_PER_TILE_MFB (64)
#endif

#define ISP_ERROR_MESSAGE_DATA(n, CMD) \
    CMD(n, ISP_TPIPE_MESSAGE_OK)\
    CMD(n, ISP_TPIPE_MESSAGE_FAIL)\
    /* final count, can not be changed */\
    CMD(n, ISP_TPIPE_MESSAGE_MAX_NO)\

#define ISP_TPIPE_ENUM_DECLARE(a, b) b,
#define ISP_TPIPE_ENUM_STRING(n, a) if ((a) == (n)) return #a;

#define GET_ISP_ERROR_NAME(n) \
    if (0 == (n)) return "ISP_TPIPE_MESSAGE_UNKNOWN";\
    ISP_ERROR_MESSAGE_DATA(n, ISP_TPIPE_ENUM_STRING)\
    return "";

//need equal to ISP_DRV_P2_CQ_ENUM
typedef enum
{
    ISP_TPIPE_P2_CQ1 = 0,
    ISP_TPIPE_P2_CQ2,
    ISP_TPIPE_P2_CQ3,
    ISP_TPIPE_P2_CQ_NUM
}ISP_TPIPE_P2_CQ_ENUM;

/* error enum */
typedef enum ISP_TPIPE_MESSAGE_ENUM
{
    ISP_TPIPE_MESSAGE_UNKNOWN=0,
    ISP_ERROR_MESSAGE_DATA(,ISP_TPIPE_ENUM_DECLARE)
}ISP_TPIPE_MESSAGE_ENUM;

/* tpipe_irq_mode */
typedef enum TPIPE_IRQ_MODE_ENUM
{
    TPIPE_IRQ_FRAME_STOP=0,
    TPIPE_IRQ_LINE_END,
    TPIPE_IRQ_PER_TPIPE,
    TPIPE_IRQ_MODE_MAX_NO
}TPIPE_IRQ_MODE_ENUM;

/* f: reg_map_struct name*/
/* g: must and enable/disble*/
/* h: variable offset in isp_reg*/
/* i: variable mask in isp_reg*/
/* j: variable lsb in isp_reg*/
/* k: variable name in isp_reg*/
/* l: variable name in isp_reg*/
#define HW_DIP_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump DIP registers - start, replaced with auto-code gen */\
	CMD(a, b, c, d, e, top.pixel_id, true, 0x00005058, 0xFB805058, 0x00000003, 0, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_PIX_ID)\
	CMD(a, b, c, d, e, top.cam_in_fmt, true, 0x00005050, 0xFB805050, 0x0000001F, 0, DIPCTL_D1A_DIPCTL_FMT_SEL1, DIPCTL_IMGI_D1_FMT)\
	CMD(a, b, c, d, e, top.ctl_extension_en, true, 0x00005064, 0xFB805064, 0x00000004, 2, DIPCTL_D1A_DIPCTL_TDR_SEL, DIPCTL_TDR_CTL_EXT_EN)\
	CMD(a, b, c, d, e, top.fg_mode, true, 0x00005058, 0xFB805058, 0x00000004, 2, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_FG_MODE)\
	CMD(a, b, c, d, e, top.pakg_fg_out, true, 0x00005058, 0xFB805058, 0x00004000, 14, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_PAKG_D1_FG_OUT)\
	CMD(a, b, c, d, e, top.ufo_imgi_en, true, 0x00005058, 0xFB805058, 0x00004000, 14, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_PAKG_D1_FG_OUT)\
	CMD(a, b, c, d, e, top.ufdi_fmt, true, 0x00005050, 0xFB805050, 0x00000040, 6, DIPCTL_D1A_DIPCTL_FMT_SEL1, DIPCTL_UFDI_D1_FMT)\
	CMD(a, b, c, d, e, top.vipi_fmt, true, 0x00005050, 0xFB805050, 0x0001F000, 12, DIPCTL_D1A_DIPCTL_FMT_SEL1, DIPCTL_VIPI_D1_FMT)\
	CMD(a, b, c, d, e, top.img3o_fmt, true, 0x00005054, 0xFB805054, 0x0001F000, 12, DIPCTL_D1A_DIPCTL_FMT_SEL2, DIPCTL_IMG3O_D1_FMT)\
	CMD(a, b, c, d, e, top.crzo_fmt, true, 0x00005054, 0xFB805054, 0x00000100, 8, DIPCTL_D1A_DIPCTL_FMT_SEL2, DIPCTL_CRZO_D1_FMT)\
	CMD(a, b, c, d, e, top.timgo_fmt, true, 0x00005054, 0xFB805054, 0x0000001F, 0, DIPCTL_D1A_DIPCTL_FMT_SEL2, DIPCTL_TIMGO_D1_FMT)\
	CMD(a, b, c, d, e, top.imgi_en, true, 0x00005020, 0xFB805020, 0x00000001, 0, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_IMGI_D1_EN)\
	CMD(a, b, c, d, e, top.imgbi_en, true, 0x00005020, 0xFB805020, 0x00000002, 1, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_IMGBI_D1_EN)\
	CMD(a, b, c, d, e, top.imgci_en, true, 0x00005020, 0xFB805020, 0x00000004, 2, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_IMGCI_D1_EN)\
	CMD(a, b, c, d, e, top.vipi_en, true, 0x00005024, 0xFB805024, 0x00000001, 0, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_VIPI_D1_EN)\
	CMD(a, b, c, d, e, top.vipbi_en, true, 0x00005024, 0xFB805024, 0x00000002, 1, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_VIPBI_D1_EN)\
	CMD(a, b, c, d, e, top.vipci_en, true, 0x00005024, 0xFB805024, 0x00000004, 2, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_VIPCI_D1_EN)\
	CMD(a, b, c, d, e, top.ufdi_en, true, 0x00005020, 0xFB805020, 0x00010000, 16, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_UFDI_D1_EN)\
	CMD(a, b, c, d, e, top.dmgi_en, true, 0x00005020, 0xFB805020, 0x00020000, 17, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_DMGI_D1_EN)\
	CMD(a, b, c, d, e, top.depi_en, true, 0x00005020, 0xFB805020, 0x00040000, 18, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_DEPI_D1_EN)\
	CMD(a, b, c, d, e, top.lcei_en, true, 0x00005020, 0xFB805020, 0x00080000, 19, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_LCEI_D1_EN)\
	CMD(a, b, c, d, e, top.smt1i_en, true, 0x00005020, 0xFB805020, 0x00000080, 7, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D1_EN)\
	CMD(a, b, c, d, e, top.smt2i_en, true, 0x00005020, 0xFB805020, 0x00000080, 7, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D1_EN)\
	CMD(a, b, c, d, e, top.smt3i_en, true, 0x00005020, 0xFB805020, 0x00000080, 7, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D1_EN)\
	CMD(a, b, c, d, e, top.smt4i_en, true, 0x00005020, 0xFB805020, 0x00000080, 7, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D1_EN)\
	CMD(a, b, c, d, e, top.smt1o_en, true, 0x00005020, 0xFB805020, 0x00000800, 11, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D1_EN)\
	CMD(a, b, c, d, e, top.smt2o_en, true, 0x00005020, 0xFB805020, 0x00001000, 12, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D2_EN)\
	CMD(a, b, c, d, e, top.smt3o_en, true, 0x00005020, 0xFB805020, 0x00002000, 13, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D3_EN)\
	CMD(a, b, c, d, e, top.smt4o_en, true, 0x00005020, 0xFB805020, 0x00004000, 14, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D4_EN)\
	CMD(a, b, c, d, e, top.smt1_en, true, 0x00005010, 0xFB805010, 0x00000004, 2, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_SMT_D1_EN)\
	CMD(a, b, c, d, e, top.smt2_en, true, 0x00005018, 0xFB805018, 0x00020000, 17, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_SMT_D2_EN)\
	CMD(a, b, c, d, e, top.smt3_en, true, 0x00005018, 0xFB805018, 0x00400000, 22, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_SMT_D3_EN)\
	CMD(a, b, c, d, e, top.smt4_en, true, 0x00005014, 0xFB805014, 0x00000040, 6, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_SMT_D4_EN)\
	CMD(a, b, c, d, e, top.unp_en, true, 0x00005010, 0xFB805010, 0x00000001, 0, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_UNP_D1_EN)\
	CMD(a, b, c, d, e, top.unp2_en, true, 0x00005018, 0xFB805018, 0x00040000, 18, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_UNP_D2_EN)\
	CMD(a, b, c, d, e, top.unp3_en, true, 0x00005018, 0xFB805018, 0x00800000, 23, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_UNP_D3_EN)\
	CMD(a, b, c, d, e, top.unp4_en, true, 0x00005014, 0xFB805014, 0x00000080, 7, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_UNP_D4_EN)\
	CMD(a, b, c, d, e, top.unp6_en, true, 0x0000501C, 0xFB80501C, 0x00002000, 13, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D6_EN)\
	CMD(a, b, c, d, e, top.unp7_en, true, 0x0000501C, 0xFB80501C, 0x00004000, 14, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D7_EN)\
	CMD(a, b, c, d, e, top.unp8_en, true, 0x0000501C, 0xFB80501C, 0x00008000, 15, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D8_EN)\
	CMD(a, b, c, d, e, top.unp9_en, true, 0x0000501C, 0xFB80501C, 0x00080000, 19, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D9_EN)\
	CMD(a, b, c, d, e, top.unp10_en, true, 0x0000501C, 0xFB80501C, 0x00100000, 20, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D10_EN)\
	CMD(a, b, c, d, e, top.unp11_en, true, 0x0000501C, 0xFB80501C, 0x00200000, 21, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D11_EN)\
	CMD(a, b, c, d, e, top.ufd_en, true, 0x00005010, 0xFB805010, 0x00000002, 1, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_UFD_D1_EN)\
	CMD(a, b, c, d, e, top.obc_en, true, 0x00005010, 0xFB805010, 0x00000020, 5, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_OBC_D1_EN)\
	CMD(a, b, c, d, e, top.bpc_en, true, 0x00005010, 0xFB805010, 0x00000010, 4, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_BPC_D1_EN)\
	CMD(a, b, c, d, e, top.zfus_en, true, 0x00005010, 0xFB805010, 0x00000040, 6, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_ZFUS_D1_EN)\
	CMD(a, b, c, d, e, top.dgn_en, true, 0x00005010, 0xFB805010, 0x00000080, 7, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_DGN_D1_EN)\
	CMD(a, b, c, d, e, top.lsc_en, true, 0x00005010, 0xFB805010, 0x00000100, 8, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_LSC_D1_EN)\
	CMD(a, b, c, d, e, top.wb_en, true, 0x00005010, 0xFB805010, 0x00000200, 9, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_WB_D1_EN)\
	CMD(a, b, c, d, e, top.hlr_en, true, 0x00005010, 0xFB805010, 0x00000400, 10, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_HLR_D1_EN)\
	CMD(a, b, c, d, e, top.ltm_en, true, 0x00005010, 0xFB805010, 0x00000800, 11, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_LTM_D1_EN)\
	CMD(a, b, c, d, e, top.dm_en, true, 0x00005010, 0xFB805010, 0x00001000, 12, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_UDM_D1_EN)\
	CMD(a, b, c, d, e, top.gdr_en, true, 0x00005010, 0xFB805010, 0x00040000, 18, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_GDR_D1_EN)\
	CMD(a, b, c, d, e, top.align_en, true, 0x00005010, 0xFB805010, 0x00080000, 19, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_ALIGN_D1_EN)\
	CMD(a, b, c, d, e, top.ldnr_en, true, 0x00005010, 0xFB805010, 0x00002000, 13, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_LDNR_D1_EN)\
	CMD(a, b, c, d, e, top.flc_en, true, 0x00005014, 0xFB805014, 0x00000001, 0, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_FLC_D1_EN)\
	CMD(a, b, c, d, e, top.ccm_en, true, 0x00005014, 0xFB805014, 0x00000002, 1, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_CCM_D1_EN)\
	CMD(a, b, c, d, e, top.ccm2_en, true, 0x00005014, 0xFB805014, 0x00000010, 4, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_CCM_D2_EN)\
	CMD(a, b, c, d, e, top.ggm_en, true, 0x00005014, 0xFB805014, 0x00000004, 2, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_GGM1_D1_EN)\
	CMD(a, b, c, d, e, top.ggm2_en, true, 0x00005014, 0xFB805014, 0x00000020, 5, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_GGM_D2_EN)\
	CMD(a, b, c, d, e, top.ggm4_en, true, 0x00005014, 0xFB805014, 0x00000400, 10, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_GGM_D4_EN)\
	CMD(a, b, c, d, e, top.g2c4_en, true, 0x00005014, 0xFB805014, 0x00000800, 11, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_G2C_D4_EN)\
	CMD(a, b, c, d, e, top.c42d4_en, true, 0x00005014, 0xFB805014, 0x00001000, 12, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_C42_D4_EN)\
	CMD(a, b, c, d, e, top.crp4_en, true, 0x00005014, 0xFB805014, 0x00002000, 13, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_CRP_D4_EN)\
	CMD(a, b, c, d, e, top.wsync_en, true, 0x00005014, 0xFB805014, 0x00000008, 3, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_WSYNC_D1_EN)\
	CMD(a, b, c, d, e, top.g2cx_en, true, 0x00005018, 0xFB805018, 0x00000001, 0, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_G2C_D2_EN)\
	CMD(a, b, c, d, e, top.c42_en, true, 0x00005018, 0xFB805018, 0x00000002, 1, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C42_D1_EN)\
	CMD(a, b, c, d, e, top.slk1_en, true, 0x00005010, 0xFB805010, 0x00100000, 20, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_SLK_D1_EN)\
	CMD(a, b, c, d, e, top.slk2_en, true, 0x0000501C, 0xFB80501C, 0x01000000, 24, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D2_EN)\
	CMD(a, b, c, d, e, top.slk3_en, true, 0x0000501C, 0xFB80501C, 0x02000000, 25, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D3_EN)\
	CMD(a, b, c, d, e, top.slk4_en, true, 0x0000501C, 0xFB80501C, 0x04000000, 26, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D4_EN)\
	CMD(a, b, c, d, e, top.slk5_en, true, 0x0000501C, 0xFB80501C, 0x08000000, 27, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D5_EN)\
	CMD(a, b, c, d, e, top.slk6_en, true, 0x00005010, 0xFB805010, 0x00200000, 21, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_SLK_D6_EN)\
	CMD(a, b, c, d, e, top.ndg_en, true, 0x00005018, 0xFB805018, 0x00000010, 4, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_NDG_D1_EN)\
	CMD(a, b, c, d, e, top.ndg2_en, true, 0x00005018, 0xFB805018, 0x00200000, 21, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_NDG_D2_EN)\
	CMD(a, b, c, d, e, top.ynr_en, true, 0x00005018, 0xFB805018, 0x00000008, 3, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_NBC_D1_EN)\
	CMD(a, b, c, d, e, top.c24_en, true, 0x0000501C, 0xFB80501C, 0x00040000, 18, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C24_D1_EN)\
	CMD(a, b, c, d, e, top.c24d2_en, true, 0x0000501C, 0xFB80501C, 0x00000040, 6, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C24_D2_EN)\
	CMD(a, b, c, d, e, top.c24d3_en, true, 0x00005018, 0xFB805018, 0x00000040, 6, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C24_D3_EN)\
	CMD(a, b, c, d, e, top.c2g_en, true, 0x00005018, 0xFB805018, 0x00000080, 7, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C2G_D1_EN)\
	CMD(a, b, c, d, e, top.iggm_en, true, 0x00005018, 0xFB805018, 0x00000100, 8, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_IGGM1_D1_EN)\
	CMD(a, b, c, d, e, top.ccm3_en, true, 0x00005018, 0xFB805018, 0x00000100, 8, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_IGGM1_D1_EN)\
	CMD(a, b, c, d, e, top.lce_en, true, 0x00005018, 0xFB805018, 0x00000400, 10, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_LCE_D1_EN)\
	CMD(a, b, c, d, e, top.ggm3_en, true, 0x00005018, 0xFB805018, 0x00000800, 11, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_GGM_D3_EN)\
	CMD(a, b, c, d, e, top.dce_en, true, 0x00005018, 0xFB805018, 0x00001000, 12, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_DGGM_D1_EN)\
	CMD(a, b, c, d, e, top.dces_en, true, 0x00005018, 0xFB805018, 0x00002000, 13, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_DGGMS_D1_EN)\
	CMD(a, b, c, d, e, top.dceso_en, true, 0x00005020, 0xFB805020, 0x00100000, 20, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_DGGMSO_D1_EN)\
	CMD(a, b, c, d, e, top.g2c_en, true, 0x00005018, 0xFB805018, 0x00004000, 14, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_G2C_D1_EN)\
	CMD(a, b, c, d, e, top.c42d2_en, true, 0x00005018, 0xFB805018, 0x00008000, 15, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C42_D2_EN)\
	CMD(a, b, c, d, e, top.ee_en, true, 0x00005018, 0xFB805018, 0x00010000, 16, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_EE_D1_EN)\
	CMD(a, b, c, d, e, top.cnr_en, true, 0x00005018, 0xFB805018, 0x00100000, 20, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_ABF_D1_EN)\
	CMD(a, b, c, d, e, top.color_en, true, 0x00005018, 0xFB805018, 0x02000000, 25, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_COLOR_D1_EN)\
	CMD(a, b, c, d, e, top.nr3d_en, true, 0x00005018, 0xFB805018, 0x02000000, 25, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_COLOR_D1_EN)\
	CMD(a, b, c, d, e, top.rcp_en, true, 0x00005018, 0xFB805018, 0x10000000, 28, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_CRP_D1_EN)\
	CMD(a, b, c, d, e, top.rcp2_en, true, 0x00005010, 0xFB805010, 0x00004000, 14, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_CRP_D2_EN)\
	CMD(a, b, c, d, e, top.pak_en, true, 0x00005010, 0xFB805010, 0x00008000, 15, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_PAK_D1_EN)\
	CMD(a, b, c, d, e, top.pak6_en, true, 0x0000501C, 0xFB80501C, 0x00000008, 3, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PAK_D6_EN)\
	CMD(a, b, c, d, e, top.pak7_en, true, 0x0000501C, 0xFB80501C, 0x00000010, 4, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PAK_D7_EN)\
	CMD(a, b, c, d, e, top.pak8_en, true, 0x0000501C, 0xFB80501C, 0x00000020, 5, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PAK_D8_EN)\
	CMD(a, b, c, d, e, top.timgo_en, true, 0x00005020, 0xFB805020, 0x00008000, 15, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_TIMGO_D1_EN)\
	CMD(a, b, c, d, e, top.img3o_en, true, 0x00005024, 0xFB805024, 0x00000008, 3, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_IMG3O_D1_EN)\
	CMD(a, b, c, d, e, top.img3bo_en, true, 0x00005024, 0xFB805024, 0x00000010, 4, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_IMG3BO_D1_EN)\
	CMD(a, b, c, d, e, top.img3co_en, true, 0x00005024, 0xFB805024, 0x00000020, 5, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_IMG3CO_D1_EN)\
	CMD(a, b, c, d, e, top.mcrp_en, true, 0x0000501C, 0xFB80501C, 0x00000080, 7, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_MCRP_D1_EN)\
	CMD(a, b, c, d, e, top.mcrp2_en, true, 0x00005014, 0xFB805014, 0x00000200, 9, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_MCRP_D2_EN)\
	CMD(a, b, c, d, e, top.mix1_en, true, 0x00005018, 0xFB805018, 0x00000020, 5, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_MIX_D1_EN)\
	CMD(a, b, c, d, e, top.mix2_en, true, 0x00005018, 0xFB805018, 0x04000000, 26, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_MIX_D2_EN)\
	CMD(a, b, c, d, e, top.mix3_en, true, 0x00005018, 0xFB805018, 0x00000004, 2, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_MIX_D3_EN)\
	CMD(a, b, c, d, e, top.mix4_en, true, 0x00005018, 0xFB805018, 0x08000000, 27, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_MIX_D4_EN)\
	CMD(a, b, c, d, e, top.crz_en, true, 0x0000501C, 0xFB80501C, 0x00000100, 8, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_CRZ_D1_EN)\
	CMD(a, b, c, d, e, top.crzo_en, true, 0x00005020, 0xFB805020, 0x00000020, 5, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_CRZO_D1_EN)\
	CMD(a, b, c, d, e, top.crzbo_en, true, 0x00005020, 0xFB805020, 0x00000040, 6, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_CRZBO_D1_EN)\
	CMD(a, b, c, d, e, top.srz1_en, true, 0x0000501C, 0xFB80501C, 0x00000400, 10, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SRZ_D1_EN)\
	CMD(a, b, c, d, e, top.srz3_en, true, 0x0000501C, 0xFB80501C, 0x00000800, 11, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SRZ_D3_EN)\
	CMD(a, b, c, d, e, top.srz4_en, true, 0x0000501C, 0xFB80501C, 0x00001000, 12, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SRZ_D4_EN)\
	CMD(a, b, c, d, e, top.dfe_en, true, 0x0000501C, 0xFB80501C, 0x80000000, 31, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_DFE_D1_EN)\
	CMD(a, b, c, d, e, top.feo_en, true, 0x00005020, 0xFB805020, 0x00200000, 21, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_FEO_D1_EN)\
	CMD(a, b, c, d, e, top.c02_en, true, 0x0000501C, 0xFB80501C, 0x00800000, 23, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C02_D1_EN)\
	CMD(a, b, c, d, e, top.c02d2_en, true, 0x0000501C, 0xFB80501C, 0x00020000, 17, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C02_D2_EN)\
	CMD(a, b, c, d, e, top.crsp_en, true, 0x0000501C, 0xFB80501C, 0x00000002, 1, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_CRSP_D1_EN)\
	CMD(a, b, c, d, e, top.plnr1_en, true, 0x0000501C, 0xFB80501C, 0x00400000, 22, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNR_D1_EN)\
	CMD(a, b, c, d, e, top.plnr2_en, true, 0x0000501C, 0xFB80501C, 0x00010000, 16, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNR_D2_EN)\
	CMD(a, b, c, d, e, top.plnw1_en, true, 0x0000501C, 0xFB80501C, 0x00000004, 2, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNW_D1_EN)\
	CMD(a, b, c, d, e, top.plnw2_en, true, 0x0000501C, 0xFB80501C, 0x00000200, 9, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNW_D2_EN)\
	CMD(a, b, c, d, e, top.adl_en, true, 0x00005020, 0xFB805020, 0x00400000, 22, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_ADL_D1_EN)\
	CMD(a, b, c, d, e, top.bs_en, true, 0x0000501C, 0xFB80501C, 0x40000000, 30, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_BS_D1_EN)\
	CMD(a, b, c, d, e, top.wif_en, true, 0x00005010, 0xFB805010, 0x00010000, 16, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_WIF_D1_EN)\
	CMD(a, b, c, d, e, top.wif2_en, true, 0x00005010, 0xFB805010, 0x00020000, 17, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_WIF_D2_EN)\
	CMD(a, b, c, d, e, top.wif3_en, true, 0x00005010, 0xFB805010, 0x00400000, 22, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_WIF_D3_EN)\
	CMD(a, b, c, d, e, top.oft_en, true, 0x0000C024, 0xFB80C024, 0x00004000, 14, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_R2B_EN)\
	CMD(a, b, c, d, e, top.oftl_en, true, 0x0000D024, 0xFB80D024, 0x00004000, 14, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_R2B_EN)\
	CMD(a, b, c, d, e, top.traw_sel, true, 0x00005040, 0xFB805040, 0x00000003, 0, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_TRAW_SEL)\
	CMD(a, b, c, d, e, top.flc_sel, true, 0x00005040, 0xFB805040, 0x00000300, 8, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_FLC_D1_SEL)\
	CMD(a, b, c, d, e, top.dgn_sel, true, 0x00005040, 0xFB805040, 0x01000000, 24, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_DGN_D1_SEL)\
	CMD(a, b, c, d, e, top.crp2_sel, true, 0x00005040, 0xFB805040, 0x00003000, 12, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_CRP_D2_SEL)\
	CMD(a, b, c, d, e, top.g2cx_sel, true, 0x00005040, 0xFB805040, 0x00010000, 16, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_G2C_D2_SEL)\
	CMD(a, b, c, d, e, top.ynr_sel, true, 0x00005040, 0xFB805040, 0x000C0000, 18, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_NBC_D1_SEL)\
	CMD(a, b, c, d, e, top.timgo_sel, true, 0x00005040, 0xFB805040, 0x00000070, 4, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_TIMGO_D1_SEL)\
	CMD(a, b, c, d, e, top.mix1_sel, true, 0x00005040, 0xFB805040, 0x00100000, 20, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_MIX_D1_SEL)\
	CMD(a, b, c, d, e, top.c24d1_sel, true, 0x00005044, 0xFB805044, 0x00000004, 2, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_C24_D1_SEL)\
	CMD(a, b, c, d, e, top.crz_sel, true, 0x00005044, 0xFB805044, 0x00000030, 4, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_CRZ_D1_SEL)\
	CMD(a, b, c, d, e, top.fe_sel, true, 0x00005044, 0xFB805044, 0x00000100, 8, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_FE_D1_SEL)\
	CMD(a, b, c, d, e, top.srz_sel, true, 0x00005044, 0xFB805044, 0x00000400, 10, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_SRZ_D1_SEL)\
	CMD(a, b, c, d, e, top.feo_sel, true, 0x00005044, 0xFB805044, 0x00001000, 12, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_FEO_D1_SEL)\
	CMD(a, b, c, d, e, top.crsp_sel, true, 0x00005040, 0xFB805040, 0x00400000, 22, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_CRSP_D1_SEL)\
	CMD(a, b, c, d, e, top.nr3d_pre_i_sel, true, 0x00005044, 0xFB805044, 0x00000001, 0, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_MIX_D3_W_SEL)\
	CMD(a, b, c, d, e, top.mix3_w_sel, true, 0x00005044, 0xFB805044, 0x00000001, 0, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_MIX_D3_W_SEL)\
	CMD(a, b, c, d, e, smt1.smt1o_sel, REG_CHECK_EN(c, SMT1_EN), 0x00005044, 0xFB805044, 0x00000001, 0, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_MIX_D3_W_SEL)\
	CMD(a, b, c, d, e, smt2.smt2o_sel, REG_CHECK_EN(c, SMT2_EN), 0x00005044, 0xFB805044, 0x00000001, 0, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_MIX_D3_W_SEL)\
	CMD(a, b, c, d, e, smt3.smt3o_sel, REG_CHECK_EN(c, SMT3_EN), 0x00005044, 0xFB805044, 0x00000001, 0, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_MIX_D3_W_SEL)\
	CMD(a, b, c, d, e, smt4.smt4o_sel, REG_CHECK_EN(c, SMT4_EN), 0x00005044, 0xFB805044, 0x00000001, 0, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_MIX_D3_W_SEL)\
	CMD(a, b, c, d, e, top.oft_sel, true, 0x0000C010, 0xFB80C010, 0x00000001, 0, MDPS_D1A_OFT_OFT_FORMAT, OFT_TOP_IN_DEPTH)\
	CMD(a, b, c, d, e, imgi.imgi_v_flip_en, REG_CMP_EQ(c, IMGI_EN, 1), 0x00004010, 0xFB804010, 0x00000001, 0, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_IMGI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, imgi.imgi_stride, REG_CMP_EQ(c, IMGI_EN, 1), 0x00004114, 0xFB804114, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
	CMD(a, b, c, d, e, imgbi.imgbi_stride, REG_CMP_EQ(c, IMGBI_EN, 1), 0x00004114, 0xFB804114, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
	CMD(a, b, c, d, e, imgci.imgci_v_flip_en, REG_CMP_EQ(c, LOG_IMGBI_EN, 1), 0x00004010, 0xFB804010, 0x00000001, 0, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_IMGI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, imgci.imgci_stride, REG_CMP_EQ(c, LOG_IMGBI_EN, 1), 0x00004114, 0xFB804114, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
	CMD(a, b, c, d, e, vipi.vipi_v_flip_en, REG_CMP_EQ(c, LOG_VIPI_EN, 1), 0x00004010, 0xFB804010, 0x00100000, 20, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_VIPI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, vipi.vipi_stride, REG_CMP_EQ(c, VIPI_EN, 1), 0x00004114, 0xFB804114, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
	CMD(a, b, c, d, e, vipbi.vipbi_v_flip_en, REG_CMP_EQ(c, LOG_VIPBI_EN, 1), 0x00004010, 0xFB804010, 0x00200000, 21, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_VIPBI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, vipbi.vipbi_stride, REG_CMP_EQ(c, VIPBI_EN, 1), 0x00004114, 0xFB804114, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
	CMD(a, b, c, d, e, vipci.vipci_v_flip_en, REG_CMP_EQ(c, LOG_VIPCI_EN, 1), 0x00004010, 0xFB804010, 0x00400000, 22, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_VIPCI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, vipci.vipci_stride, REG_CMP_EQ(c, VIPI_EN, 1), 0x00004114, 0xFB804114, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
	CMD(a, b, c, d, e, ufdi.ufdi_v_flip_en, REG_CMP_EQ(c, LOG_UFDI_EN, 1), 0x00004010, 0xFB804010, 0x00400000, 22, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_VIPCI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, ufdi.ufdi_stride, REG_CMP_EQ(c, LOG_UFDI_EN, 1), 0x00004114, 0xFB804114, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
	CMD(a, b, c, d, e, dmgi.dmgi_v_flip_en, REG_CMP_EQ(c, LOG_DMGI_EN, 1), 0x00004010, 0xFB804010, 0x00000200, 9, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_DMGI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, dmgi.dmgi_stride, REG_CMP_EQ(c, LOG_DMGI_EN, 1), 0x00004384, 0xFB804384, 0x0000FFFF, 0, DMGI_D1A_DMGI_STRIDE, DMGI_STRIDE)\
	CMD(a, b, c, d, e, depi.depi_v_flip_en, REG_CMP_EQ(c, LOG_DEPI_EN, 1), 0x00004010, 0xFB804010, 0x00000400, 10, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_DEPI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, depi.depi_stride, REG_CMP_EQ(c, LOG_DEPI_EN, 1), 0x000043B4, 0xFB8043B4, 0x0000FFFF, 0, DEPI_D1A_DEPI_STRIDE, DEPI_STRIDE)\
	CMD(a, b, c, d, e, lcei.lcei_v_flip_en, REG_CMP_EQ(c, LOG_LCEI_EN, 1), 0x00004010, 0xFB804010, 0x00000800, 11, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_LCEI_D1_V_FLIP_EN)\
	CMD(a, b, c, d, e, lcei.lcei_stride, REG_CMP_EQ(c, LOG_LCEI_EN, 1), 0x000043E4, 0xFB8043E4, 0x0000FFFF, 0, LCEI_D1A_LCEI_STRIDE, LCEI_STRIDE)\
	CMD(a, b, c, d, e, lce.lce_lc_tone, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00009A18, 0xFB809A18, 0x04000000, 26, LCE_D1A_LCE_GLOBAL, LCE_LC_TONE)\
	CMD(a, b, c, d, e, lce.lce_bc_mag_kubnx, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00009A04, 0xFB809A04, 0x7FFF0000, 16, LCE_D1A_LCE_ZR, LCE_BCMK_X)\
	CMD(a, b, c, d, e, lce.lce_bc_mag_kubny, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00009A04, 0xFB809A04, 0x00007FFF, 0, LCE_D1A_LCE_ZR, LCE_BCMK_Y)\
	CMD(a, b, c, d, e, unp2.yuv_bit, REG_CMP_EQ(c, LOG_UNP2_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp2.yuv_dng, REG_CMP_EQ(c, LOG_UNP2_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp3.yuv_bit, REG_CMP_EQ(c, LOG_UNP3_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp3.yuv_dng, REG_CMP_EQ(c, LOG_UNP3_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp4.yuv_bit, REG_CMP_EQ(c, LOG_UNP4_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp4.yuv_dng, REG_CMP_EQ(c, LOG_UNP4_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp6.yuv_bit, REG_CMP_EQ(c, LOG_UNP6_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp6.yuv_dng, REG_CMP_EQ(c, LOG_UNP6_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp7.yuv_bit, REG_CMP_EQ(c, LOG_UNP7_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp7.yuv_dng, REG_CMP_EQ(c, LOG_UNP7_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp8.yuv_bit, REG_CMP_EQ(c, LOG_UNP8_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp8.yuv_dng, REG_CMP_EQ(c, LOG_UNP8_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp9.yuv_bit, REG_CMP_EQ(c, LOG_UNP9_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp9.yuv_dng, REG_CMP_EQ(c, LOG_UNP9_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp10.yuv_bit, REG_CMP_EQ(c, LOG_UNP10_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp10.yuv_dng, REG_CMP_EQ(c, LOG_UNP10_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, unp11.yuv_bit, REG_CMP_EQ(c, LOG_UNP11_EN, 1), 0x00006004, 0xFB806004, 0x00000010, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
	CMD(a, b, c, d, e, unp11.yuv_dng, REG_CMP_EQ(c, LOG_UNP11_EN, 1), 0x00006004, 0xFB806004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
	CMD(a, b, c, d, e, pak2.yuv_bit, REG_CMP_EQ(c, LOG_PAK2_EN, 1), 0x00006580, 0xFB806580, 0x00000100, 8, PAK_D1A_PAK_CONT, PAK_YUV_BIT)\
	CMD(a, b, c, d, e, pak2.yuv_dng, REG_CMP_EQ(c, LOG_PAK2_EN, 1), 0x00006580, 0xFB806580, 0x00001000, 12, PAK_D1A_PAK_CONT, PAK_YUV_DNG)\
	CMD(a, b, c, d, e, pak3.yuv_bit, REG_CMP_EQ(c, LOG_PAK3_EN, 1), 0x00006580, 0xFB806580, 0x00000100, 8, PAK_D1A_PAK_CONT, PAK_YUV_BIT)\
	CMD(a, b, c, d, e, pak3.yuv_dng, REG_CMP_EQ(c, LOG_PAK3_EN, 1), 0x00006580, 0xFB806580, 0x00001000, 12, PAK_D1A_PAK_CONT, PAK_YUV_DNG)\
	CMD(a, b, c, d, e, pak4.yuv_bit, REG_CMP_EQ(c, LOG_PAK4_EN, 1), 0x00006580, 0xFB806580, 0x00000100, 8, PAK_D1A_PAK_CONT, PAK_YUV_BIT)\
	CMD(a, b, c, d, e, pak4.yuv_dng, REG_CMP_EQ(c, LOG_PAK4_EN, 1), 0x00006580, 0xFB806580, 0x00001000, 12, PAK_D1A_PAK_CONT, PAK_YUV_DNG)\
	CMD(a, b, c, d, e, pak6.yuv_bit, REG_CMP_EQ(c, LOG_PAK6_EN, 1), 0x0000B980, 0xFB80B980, 0x00000100, 8, PAK_D6A_PAK_CONT, PAK_YUV_BIT)\
	CMD(a, b, c, d, e, pak6.yuv_dng, REG_CMP_EQ(c, LOG_PAK6_EN, 1), 0x0000B980, 0xFB80B980, 0x00001000, 12, PAK_D6A_PAK_CONT, PAK_YUV_DNG)\
	CMD(a, b, c, d, e, pak7.yuv_bit, REG_CMP_EQ(c, LOG_PAK7_EN, 1), 0x0000B9C0, 0xFB80B9C0, 0x00000100, 8, PAK_D7A_PAK_CONT, PAK_YUV_BIT)\
	CMD(a, b, c, d, e, pak7.yuv_dng, REG_CMP_EQ(c, LOG_PAK7_EN, 1), 0x0000B9C0, 0xFB80B9C0, 0x00001000, 12, PAK_D7A_PAK_CONT, PAK_YUV_DNG)\
	CMD(a, b, c, d, e, pak8.yuv_bit, REG_CMP_EQ(c, LOG_PAK8_EN, 1), 0x0000BA00, 0xFB80BA00, 0x00000100, 8, PAK_D8A_PAK_CONT, PAK_YUV_BIT)\
	CMD(a, b, c, d, e, pak8.yuv_dng, REG_CMP_EQ(c, LOG_PAK8_EN, 1), 0x0000BA00, 0xFB80BA00, 0x00001000, 12, PAK_D8A_PAK_CONT, PAK_YUV_DNG)\
	CMD(a, b, c, d, e, dm.dm_byp, REG_CMP_EQ(c, LOG_DM_EN, 1), 0x00006600, 0xFB806600, 0x40000000, 30, UDM_D1A_DM_INTP_CRS, DM_BYP)\
	CMD(a, b, c, d, e, ynr.eny, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00008700, 0xFB808700, 0x00000002, 1, NBC_D1A_YNR_CON1, YNR_ENY)\
	CMD(a, b, c, d, e, ynr.enc, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00008700, 0xFB808700, 0x00000001, 0, NBC_D1A_YNR_CON1, YNR_ENC)\
	CMD(a, b, c, d, e, ynr.video_mode, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00008700, 0xFB808700, 0x02000000, 25, NBC_D1A_YNR_CON1, YNR_VIDEO_MODE)\
	CMD(a, b, c, d, e, ynr.lce_link, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00008700, 0xFB808700, 0x00100000, 20, NBC_D1A_YNR_CON1, YNR_LCE_LINK)\
	CMD(a, b, c, d, e, ynr.skin_link, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x000087E8, 0xFB8087E8, 0x00000001, 0, NBC_D1A_YNR_SKIN_CON, YNR_SKIN_LINK)\
	CMD(a, b, c, d, e, ee.ee_out_edge_sel, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x0000A204, 0xFB80A204, 0x00000003, 0, EE_D1A_EE_TOP_CTRL, EE_OUT_EDGE_SEL)\
	CMD(a, b, c, d, e, cnr.bpc_en, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x0000A3C0, 0xFB80A3C0, 0x00000002, 1, ABF_D1A_CNR_CNR_CON1, CNR_BPC_EN)\
	CMD(a, b, c, d, e, cnr.enc, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x0000A3C0, 0xFB80A3C0, 0x00000001, 0, ABF_D1A_CNR_CNR_CON1, CNR_CNR_ENC)\
	CMD(a, b, c, d, e, cnr.video_mode, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x0000A3C0, 0xFB80A3C0, 0x00000004, 2, ABF_D1A_CNR_CNR_CON1, CNR_VIDEO_MODE)\
	CMD(a, b, c, d, e, cnr.mode, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x0000A3C0, 0xFB80A3C0, 0x00001000, 12, ABF_D1A_CNR_CNR_CON1, CNR_MODE)\
	CMD(a, b, c, d, e, cnr.scale_mode, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x0000A3C0, 0xFB80A3C0, 0x00000030, 4, ABF_D1A_CNR_CNR_CON1, CNR_CNR_SCALE_MODE)\
	CMD(a, b, c, d, e, cnr.abf_en, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x0000A480, 0xFB80A480, 0x00000001, 0, ABF_D1A_CNR_ABF_CON1, CNR_ABF_EN)\
	CMD(a, b, c, d, e, timgo.timgo_stride, REG_CMP_EQ(c, LOG_TIMGO_EN, 1), 0x00004274, 0xFB804274, 0x0000FFFF, 0, TIMGO_D1A_TIMGO_STRIDE, TIMGO_STRIDE)\
	CMD(a, b, c, d, e, img3o.img3o_stride, REG_CMP_EQ(c, LOG_IMG3O_EN, 1), 0x000047A4, 0xFB8047A4, 0x0000FFFF, 0, IMG3O_D1A_IMG3O_STRIDE, IMG3O_STRIDE)\
	CMD(a, b, c, d, e, img3bo.img3bo_stride, REG_CMP_EQ(c, LOG_IMG3BO_EN, 1), 0x00004814, 0xFB804814, 0x0000FFFF, 0, IMG3BO_D1A_IMG3BO_STRIDE, IMG3BO_STRIDE)\
	CMD(a, b, c, d, e, img3co.img3co_stride, REG_CMP_EQ(c, LOG_IMG3CO_EN, 1), 0x00004884, 0xFB804884, 0x0000FFFF, 0, IMG3CO_D1A_IMG3CO_STRIDE, IMG3CO_STRIDE)\
	CMD(a, b, c, d, e, crzo.crzo_stride, REG_CMP_EQ(c, LOG_CRZO_EN, 1), 0x000047A4, 0xFB8047A4, 0x0000FFFF, 0, IMG3O_D1A_IMG3O_STRIDE, IMG3O_STRIDE)\
	CMD(a, b, c, d, e, crzbo.crzbo_stride, REG_CMP_EQ(c, LOG_CRZBO_EN, 1), 0x000047A4, 0xFB8047A4, 0x0000FFFF, 0, IMG3O_D1A_IMG3O_STRIDE, IMG3O_STRIDE)\
	CMD(a, b, c, d, e, ufd.ufd_sel, true, 0x000047A4, 0xFB8047A4, 0x0000FFFF, 0, IMG3O_D1A_IMG3O_STRIDE, IMG3O_STRIDE)\
	CMD(a, b, c, d, e, slk1.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK1_EN, 1), 0x00006690, 0xFB806690, 0x00003FFF, 0, SLK_D1A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, slk1.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK1_EN, 1), 0x00006690, 0xFB806690, 0x3FFF0000, 16, SLK_D1A_SLK_RZ, SLK_VRZ_COMP)\
	CMD(a, b, c, d, e, slk2.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK2_EN, 1), 0x000082D0, 0xFB8082D0, 0x00003FFF, 0, SLK_D2A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, slk2.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK2_EN, 1), 0x000082D0, 0xFB8082D0, 0x3FFF0000, 16, SLK_D2A_SLK_RZ, SLK_VRZ_COMP)\
	CMD(a, b, c, d, e, slk3.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK3_EN, 1), 0x0000A4D0, 0xFB80A4D0, 0x00003FFF, 0, SLK_D3A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, slk3.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK3_EN, 1), 0x0000A4D0, 0xFB80A4D0, 0x3FFF0000, 16, SLK_D3A_SLK_RZ, SLK_VRZ_COMP)\
	CMD(a, b, c, d, e, slk4.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK4_EN, 1), 0x0000A2D0, 0xFB80A2D0, 0x00003FFF, 0, SLK_D4A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, slk4.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK4_EN, 1), 0x0000A2D0, 0xFB80A2D0, 0x3FFF0000, 16, SLK_D4A_SLK_RZ, SLK_VRZ_COMP)\
	CMD(a, b, c, d, e, slk5.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK5_EN, 1), 0x0000B610, 0xFB80B610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, slk5.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK5_EN, 1), 0x0000B610, 0xFB80B610, 0x3FFF0000, 16, SLK_D5A_SLK_RZ, SLK_VRZ_COMP)\
	CMD(a, b, c, d, e, slk6.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK6_EN, 1), 0x0000B610, 0xFB80B610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, slk6.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK6_EN, 1), 0x0000B610, 0xFB80B610, 0x3FFF0000, 16, SLK_D5A_SLK_RZ, SLK_VRZ_COMP)\
	CMD(a, b, c, d, e, lsc.extend_coef_mode, REG_CMP_EQ(c, LOG_LSC_EN, 1), 0x0000B610, 0xFB80B610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, ltm.blk_x_num, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x0000B610, 0xFB80B610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, ltm.blk_y_num, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x0000B610, 0xFB80B610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, ltm.blk_width, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x0000B610, 0xFB80B610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, ltm.blk_height, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x0000B610, 0xFB80B610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
	CMD(a, b, c, d, e, g2cx.g2cx_shade_en, REG_CMP_EQ(c, LOG_G2CX_EN, 1), 0x00008218, 0xFB808218, 0x20000000, 29, G2C_D2A_G2CX_SHADE_CON_1, G2CX_SHADE_EN)\
	CMD(a, b, c, d, e, dces.dces_crop_xstart, REG_CMP_EQ(c, LOG_DCES_EN, 1), 0x0000A144, 0xFB80A144, 0x00003FFF, 0, DGGMS_D1A_DCES_CROP_X, DCES_CROP_XSTART)\
	CMD(a, b, c, d, e, dces.dces_crop_xend, REG_CMP_EQ(c, LOG_DCES_EN, 1), 0x0000A144, 0xFB80A144, 0x3FFF0000, 16, DGGMS_D1A_DCES_CROP_X, DCES_CROP_XEND)\
	CMD(a, b, c, d, e, dces.dces_crop_ystart, REG_CMP_EQ(c, LOG_DCES_EN, 1), 0x0000A148, 0xFB80A148, 0x00003FFF, 0, DGGMS_D1A_DCES_CROP_Y, DCES_CROP_YSTART)\
	CMD(a, b, c, d, e, dces.dces_crop_yend, REG_CMP_EQ(c, LOG_DCES_EN, 1), 0x0000A148, 0xFB80A148, 0x3FFF0000, 16, DGGMS_D1A_DCES_CROP_Y, DCES_CROP_YEND)\
	CMD(a, b, c, d, e, srz1.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ1_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, srz1.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ1_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, srz3.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ3_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, srz3.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ3_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, srz4.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ4_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, srz4.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ4_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, crz.crz_horizontal_luma_algorithm, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, crz.crz_vertical_luma_algorithm, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, crz.crz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, crz.crz_vertical_coeff_step, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, dfe.dfe_mode, REG_CMP_EQ(c, LOG_DFE_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, feo.feo_stride, REG_CMP_EQ(c, LOG_FEO_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, nr3d.nr3d_snr_en, REG_CMP_EQ(c, LOG_NR3D_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, nr3d.nr3d_on_en, REG_CMP_EQ(c, LOG_NR3D_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, crsp.crsp_ystep, REG_CMP_EQ(c, LOG_CRSP_EN, 1), 0x0000B688, 0xFB80B688, 0x00070000, 16, CRSP_D1A_CRSP_STEP_OFST, CRSP_STEP_Y)\
	CMD(a, b, c, d, e, adl.adl_ctl_en, REG_CMP_EQ(c, ADL_EN, 1), 0x00005020, 0xFB805020, 0x00400000, 22, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_ADL_D1_EN)\
	CMD(a, b, c, d, e, smt1i.smt1i_v_flip_en, REG_CMP_EQ(c, SMT1I_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, smt2i.smt2i_v_flip_en, REG_CMP_EQ(c, SMT2I_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, smt3i.smt3i_v_flip_en, REG_CMP_EQ(c, SMT3I_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, smt4i.smt4i_v_flip_en, REG_CMP_EQ(c, SMT4I_EN, 1), 0x0000440C, 0xFB80440C, 0x0000FFFF, 0, DGGMSO_D1A_DGGMSO_XSIZE, DGGMSO_XSIZE)\
	CMD(a, b, c, d, e, oft.oft_crop_en, true, 0x0000C024, 0xFB80C024, 0x00000001, 0, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_CROP_EN)\
	CMD(a, b, c, d, e, oft.oft_crz_en, true, 0x0000C024, 0xFB80C024, 0x00000002, 1, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_CRZ_EN)\
	CMD(a, b, c, d, e, oft.oft_dth_en, true, 0x0000C024, 0xFB80C024, 0x00000040, 6, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_DTH_EN)\
	CMD(a, b, c, d, e, oft.oft_bcvt_en, true, 0x0000C024, 0xFB80C024, 0x00000080, 7, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_BCVT_EN)\
	CMD(a, b, c, d, e, oft.oft_c24_en, true, 0x0000C024, 0xFB80C024, 0x00000004, 2, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_C24_EN)\
	CMD(a, b, c, d, e, oft.oft_c2g_en, true, 0x0000C024, 0xFB80C024, 0x00000008, 3, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_C2G_EN)\
	CMD(a, b, c, d, e, oft.oft_iggm_en, true, 0x0000C024, 0xFB80C024, 0x00000800, 11, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_IGGM_EN)\
	CMD(a, b, c, d, e, oft.oft_ccm_en, true, 0x0000C024, 0xFB80C024, 0x00000010, 4, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_CCM_EN)\
	CMD(a, b, c, d, e, oft.oft_gce_en, true, 0x0000C024, 0xFB80C024, 0x00000020, 5, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_PGGM_EN)\
	CMD(a, b, c, d, e, oft.oft_g2c_en, true, 0x0000C024, 0xFB80C024, 0x00000100, 8, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_G2C_EN)\
	CMD(a, b, c, d, e, oft.oft_c42_en, true, 0x0000C024, 0xFB80C024, 0x00000200, 9, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_C42_EN)\
	CMD(a, b, c, d, e, oft.oft_c20_en, true, 0x0000C024, 0xFB80C024, 0x00000400, 10, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_C20_EN)\
	CMD(a, b, c, d, e, oft.oft_r2b_en, true, 0x0000C024, 0xFB80C024, 0x00004000, 14, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_R2B_EN)\
	CMD(a, b, c, d, e, oft.oft_hsv_en, true, 0x0000C024, 0xFB80C024, 0x00001000, 12, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_HSV_EN)\
	CMD(a, b, c, d, e, oft.oft_lab_en, true, 0x0000C024, 0xFB80C024, 0x00002000, 13, MDPS_D1A_OFT_OFT_MODULE_EN, OFT_LAB_EN)\
	CMD(a, b, c, d, e, oft.oft_crz_horizontal_luma_algorithm, REG_CMP_EQ(c, LOG_OFT_CRZ_EN, 1), 0x0000C100, 0xFB80C100, 0x00000060, 5, MDPS_D1A_OFT_CRZ_CONTROL, OFT_CDRZ_HORIZONTAL_LUMA_ALGORITHM)\
	CMD(a, b, c, d, e, oft.oft_crz_vertical_luma_algorithm, REG_CMP_EQ(c, LOG_OFT_CRZ_EN, 1), 0x0000C100, 0xFB80C100, 0x00000180, 7, MDPS_D1A_OFT_CRZ_CONTROL, OFT_CDRZ_VERTICAL_LUMA_ALGORITHM)\
	CMD(a, b, c, d, e, oft.oft_crz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_OFT_CRZ_EN, 1), 0x0000C10C, 0xFB80C10C, 0x007FFFFF, 0, MDPS_D1A_OFT_CRZ_HORI_STEP, OFT_CDRZ_HORIZONTAL_COEFF_STEP)\
	CMD(a, b, c, d, e, oft.oft_crz_vertical_coeff_step, REG_CMP_EQ(c, LOG_OFT_CRZ_EN, 1), 0x0000C110, 0xFB80C110, 0x007FFFFF, 0, MDPS_D1A_OFT_CRZ_VERT_STEP, OFT_CDRZ_VERTICAL_COEFF_STEP)\
	CMD(a, b, c, d, e, oft.oft_r2b_ch0_stride, REG_CMP_EQ(c, LOG_OFT_R2B_EN, 1), 0x0000C058, 0xFB80C058, 0xFFFFFFFF, 0, MDPS_D1A_OFT_R2B_CH0_PITCH, OFT_R2B_CH0_PITCH)\
	CMD(a, b, c, d, e, oft.oft_r2b_ch1_stride, REG_CMP_EQ(c, LOG_OFT_R2B_EN, 1), 0x0000C05C, 0xFB80C05C, 0xFFFFFFFF, 0, MDPS_D1A_OFT_R2B_CH1_PITCH, OFT_R2B_CH1_PITCH)\
	CMD(a, b, c, d, e, oft.oft_r2b_ch2_stride, REG_CMP_EQ(c, LOG_OFT_R2B_EN, 1), 0x0000C060, 0xFB80C060, 0xFFFFFFFF, 0, MDPS_D1A_OFT_R2B_CH2_PITCH, OFT_R2B_CH2_PITCH)\
	CMD(a, b, c, d, e, oft.oft_r2b_format, true, 0x0000C010, 0xFB80C010, 0x00700000, 20, MDPS_D1A_OFT_OFT_FORMAT, OFT_TOP_OUT_FORMAT)\
	CMD(a, b, c, d, e, oft.oft_r2b_plane, true, 0x0000C010, 0xFB80C010, 0x00800000, 23, MDPS_D1A_OFT_OFT_FORMAT, OFT_TOP_OUT_PLANE)\
	CMD(a, b, c, d, e, oft.oft_r2b_comp_mode, true, 0x0000C010, 0xFB80C010, 0x00080000, 19, MDPS_D1A_OFT_OFT_FORMAT, OFT_TOP_OUT_COMP_MODE)\
	CMD(a, b, c, d, e, oft.oft_r2b_comp_en, true, 0x0000C010, 0xFB80C010, 0x00040000, 18, MDPS_D1A_OFT_OFT_FORMAT, OFT_TOP_OUT_COMP_EN)\
	CMD(a, b, c, d, e, oft.oft_r2b_out_depth, true, 0x0000C010, 0xFB80C010, 0x00030000, 16, MDPS_D1A_OFT_OFT_FORMAT, OFT_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, oft.oft_ext_isp_format, true, 0x0000C030, 0xFB80C030, 0x00000007, 0, MDPS_D1A_OFT_OFT_EXT_ISP, OFT_EXT_ISP_FORMAT)\
	CMD(a, b, c, d, e, oftl.oftl_crop_en, REG_CMP_EQ(c, LOG_OFTL_CROP_EN, 1), 0x0000D024, 0xFB80D024, 0x00000001, 0, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_CROP_EN)\
	CMD(a, b, c, d, e, oftl.oftl_crz_en, REG_CMP_EQ(c, LOG_OFTL_CRZ_EN, 1), 0x0000D024, 0xFB80D024, 0x00000002, 1, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_CRZ_EN)\
	CMD(a, b, c, d, e, oftl.oftl_dth_en, REG_CMP_EQ(c, LOG_OFTL_DTH_EN, 1), 0x0000D024, 0xFB80D024, 0x00000040, 6, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_DTH_EN)\
	CMD(a, b, c, d, e, oftl.oftl_bcvt_en, true, 0x0000D024, 0xFB80D024, 0x00000080, 7, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_BCVT_EN)\
	CMD(a, b, c, d, e, oftl.oftl_c24_en, REG_CMP_EQ(c, LOG_OFTL_C24_EN, 1), 0x0000D024, 0xFB80D024, 0x00000004, 2, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_C24_EN)\
	CMD(a, b, c, d, e, oftl.oftl_c2g_en, REG_CMP_EQ(c, LOG_OFTL_C2G_EN, 1), 0x0000D024, 0xFB80D024, 0x00000008, 3, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_C2G_EN)\
	CMD(a, b, c, d, e, oftl.oftl_ccm_en, REG_CMP_EQ(c, LOG_OFTL_CCM_EN, 1), 0x0000D024, 0xFB80D024, 0x00000010, 4, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_CCM_EN)\
	CMD(a, b, c, d, e, oftl.oftl_gce_en, REG_CMP_EQ(c, LOG_OFTL_GCE_EN, 1), 0x0000D024, 0xFB80D024, 0x00000020, 5, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_PGGM_EN)\
	CMD(a, b, c, d, e, oftl.oftl_g2c_en, REG_CMP_EQ(c, LOG_OFTL_G2C_EN, 1), 0x0000D024, 0xFB80D024, 0x00000100, 8, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_G2C_EN)\
	CMD(a, b, c, d, e, oftl.oftl_c42_en, REG_CMP_EQ(c, LOG_OFTL_C42_EN, 1), 0x0000D024, 0xFB80D024, 0x00000200, 9, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_C42_EN)\
	CMD(a, b, c, d, e, oftl.oftl_c20_en, REG_CMP_EQ(c, LOG_OFTL_C20_EN, 1), 0x0000D024, 0xFB80D024, 0x00000400, 10, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_C20_EN)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_en, REG_CMP_EQ(c, LOG_OFTL_R2B_EN, 1), 0x0000D024, 0xFB80D024, 0x00004000, 14, MDPV_D1A_OFTL_OFT_MODULE_EN, OFTL_R2B_EN)\
	CMD(a, b, c, d, e, oftl.oftl_crz_horizontal_luma_algorithm, REG_CMP_EQ(c, LOG_OFTL_CRZ_EN, 1), 0x0000D100, 0xFB80D100, 0x00000060, 5, MDPV_D1A_OFTL_CRZ_CONTROL, OFTL_CDRZ_HORIZONTAL_LUMA_ALGORITHM)\
	CMD(a, b, c, d, e, oftl.oftl_crz_vertical_luma_algorithm, REG_CMP_EQ(c, LOG_OFTL_CRZ_EN, 1), 0x0000D100, 0xFB80D100, 0x00000180, 7, MDPV_D1A_OFTL_CRZ_CONTROL, OFTL_CDRZ_VERTICAL_LUMA_ALGORITHM)\
	CMD(a, b, c, d, e, oftl.oftl_crz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_OFTL_CRZ_EN, 1), 0x0000D10C, 0xFB80D10C, 0x007FFFFF, 0, MDPV_D1A_OFTL_CRZ_HORI_STEP, OFTL_CDRZ_HORIZONTAL_COEFF_STEP)\
	CMD(a, b, c, d, e, oftl.oftl_crz_vertical_coeff_step, REG_CMP_EQ(c, LOG_OFTL_CRZ_EN, 1), 0x0000D110, 0xFB80D110, 0x007FFFFF, 0, MDPV_D1A_OFTL_CRZ_VERT_STEP, OFTL_CDRZ_VERTICAL_COEFF_STEP)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_ch0_stride, REG_CMP_EQ(c, LOG_OFTL_R2B_EN, 1), 0x0000D058, 0xFB80D058, 0xFFFFFFFF, 0, MDPV_D1A_OFTL_R2B_CH0_PITCH, OFTL_R2B_CH0_PITCH)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_ch1_stride, REG_CMP_EQ(c, LOG_OFTL_R2B_EN, 1), 0x0000D05C, 0xFB80D05C, 0xFFFFFFFF, 0, MDPV_D1A_OFTL_R2B_CH1_PITCH, OFTL_R2B_CH1_PITCH)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_format, true, 0x0000D010, 0xFB80D010, 0x00700000, 20, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_FORMAT)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_plane, true, 0x0000D010, 0xFB80D010, 0x00800000, 23, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_PLANE)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_comp_mode, true, 0x0000D010, 0xFB80D010, 0x00080000, 19, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_COMP_MODE)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_comp_en, true, 0x0000D010, 0xFB80D010, 0x00040000, 18, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_COMP_EN)\
	CMD(a, b, c, d, e, oftl.oftl_r2b_out_depth, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
    /* Dump DIP registers - end */\
    /* Manually insert more ISP registers below */\

#define HW_WPE_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump WPE registers - start, replaced with auto-code gen */\
    /* Dump WPE registers - end */\
    /* Manually insert more ISP registers below */\

#define HW_MFB_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump MFB registers - start, replaced with auto-code gen */\
	CMD(a, b, c, d, e, top.mfbi_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfbi_b_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfb3i_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfb4i_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfb_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfbo_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfbo_b_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfb2o_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, top.mfb_srz_en, true, 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfbi.mfbi_v_flip_en, REG_CMP_EQ(c, MFBI_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfbi.mfbi_stride, REG_CMP_EQ(c, MFBI_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfbi_b.mfbi_b_v_flip_en, REG_CMP_EQ(c, MFBI_B_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfbi_b.mfbi_b_stride, REG_CMP_EQ(c, MFBI_B_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb3i.mfb3i_v_flip_en, REG_CMP_EQ(c, MFB3I_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb3i.mfb3i_stride, REG_CMP_EQ(c, MFB3I_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb4i.mfb4i_v_flip_en, REG_CMP_EQ(c, MFB4I_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb4i.mfb4i_stride, REG_CMP_EQ(c, MFB4I_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_srz.srz_horizontal_coeff_step, REG_CMP_EQ(c, MFB_SRZ_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_srz.srz_vertical_coeff_step, REG_CMP_EQ(c, MFB_SRZ_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfbo.mfbo_stride, REG_CMP_EQ(c, MFBO_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfbo_b.mfbo_b_stride, REG_CMP_EQ(c, MFBO_B_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb2o.mfb2o_stride, REG_CMP_EQ(c, MFB2O_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_crsp.crsp_ystep, REG_CMP_EQ(c, MFB_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_y_unp.yuv_bit, REG_CMP_EQ(c, MFBI_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_y_unp.yuv_dng, REG_CMP_EQ(c, MFBI_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_c_unp.yuv_bit, REG_CMP_EQ(c, MFBI_B_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_c_unp.yuv_dng, REG_CMP_EQ(c, MFBI_B_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_y_pak.yuv_bit, REG_CMP_EQ(c, MFBO_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_y_pak.yuv_dng, REG_CMP_EQ(c, MFBO_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_c_pak.yuv_bit, REG_CMP_EQ(c, MFBO_B_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
	CMD(a, b, c, d, e, mfb_c_pak.yuv_dng, REG_CMP_EQ(c, MFBO_B_EN, 1), 0x0000D010, 0xFB80D010, 0x00030000, 16, MDPV_D1A_OFTL_OFT_FORMAT, OFTL_TOP_OUT_DEPTH)\
    /* Dump MFB registers - end */\
    /* Manually insert more ISP registers below */\

typedef struct ISP_TPIPE_CONFIG_TOP_STRUCT
{
    int pixel_id;
    int cam_in_fmt;
    int ctl_extension_en;
    int fg_mode;
    int pakg_fg_out;
    int ufo_imgi_en;
    int ufdi_fmt;
    int vipi_fmt;
    int img3o_fmt;
    int crzo_fmt;
    int timgo_fmt;
    int crp2_sel;
    int ynr_sel;
    int timgo_sel;
    int traw_sel;
    int dgn_sel;
    int flc_sel;
    int g2cx_sel;
    int c24d1_sel;
    int srz_sel;
    int mix1_sel;
    int crz_sel;
    int nr3d_pre_i_sel;
    int mix3_w_sel;
    int crsp_sel;
    int fe_sel;
    int feo_sel;
    int oft_sel;
    int imgi_en;
    int imgbi_en;
    int imgci_en;
    int vipi_en;
    int vipbi_en;
    int vipci_en;
    int ufdi_en;
    int lcei_en;
    int timgo_en;
    int unp_en;
    int unp2_en;
    int unp3_en;
    int unp4_en;
    int unp6_en;
    int unp7_en;
    int unp8_en;
    int unp9_en;
    int unp10_en;
    int unp11_en;
    int bs_en;
	int wif_en;
    int wif2_en;
    int wif3_en;
    int ufd_en;
    int ufd_crop_en;
    int bpc_en;
    int lsc_en;
    int wb_en;
    int rcp_en;
    int rcp2_en;
    int pak_en;
    int pak2_en;
    int pak3_en;
    int pak4_en;
    int pak6_en;
    int pak7_en;
    int pak8_en;
    int c24_en;
    int hlr_en;
    int dgn_en;
    int ltm_en;
    int dm_en;
    int gdr_en;
    int ldnr_en;
    int align_en;
    int flc_en;
    int ccm_en;
    int ccm2_en;
    int ggm_en;
    int ggm2_en;
    int wsync_en;
    int ggm4_en;
    int g2c4_en;
    int c42d4_en;
    int crp4_en;
    int g2cx_en;
    int c42_en;
    int sl2b_en;
    int ynr_en;
    int dmgi_en;
    int depi_en;
    int cnr_en;
    int srz1_en;
    int mix1_en;
    int srz2_en;
    int mix2_en;
    int slk1_en;
    int slk2_en;
    int slk3_en;
    int slk4_en;
    int slk5_en;
    int slk6_en;
    int ndg_en;
    int ndg2_en;
    int c24d3_en;
    int c24d2_en;
    int c2g_en;
    int iggm_en;
    int ccm3_en;
    int ggm3_en;
    int dce_en;
    int dces_en;
    int dceso_en;
    int g2c_en;
    int c42d2_en;
    int ee_en;
    int lce_en;
    int mix3_en;
    int mix4_en;
    int crz_en;
    int feo_en;
    int c02_en;
    int c02d2_en;
    int nr3d_en;
    int color_en;
    int crsp_en;
    int img3o_en;
    int img3bo_en;
    int img3co_en;
    int mcrp_en;
    int mcrp2_en;
    int plnr1_en;
    int plnr2_en;
    int plnw1_en;
    int plnw2_en;
    int crzo_en;
    int crzbo_en;
    int dfe_en;
    int obc_en;
    int zfus_en;
    int srz3_en;
    int srz4_en;
    int smt1_en;
    int smt1i_en;
    int smt1o_en;
    int smt2_en;
    int smt2i_en;
    int smt2o_en;
    int smt3_en;
    int smt3i_en;
    int smt3o_en;
    int smt4_en;
    int smt4i_en;
    int smt4o_en;
    int adl_en;
    /* mfb */
    int mfb_en;
    int mfbi_en;
    int mfbi_b_en;
    int mfb3i_en;
    int mfb4i_en;
    int mfbo_en;
    int mfbo_b_en;
    int mfb2o_en;
    int mfb_srz_en;
    /* oft */
    int oft_en;
    int oftl_en;
}ISP_TPIPE_CONFIG_TOP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SW_STRUCT
{
    int log_en;
    int tpipe_sel_mode;
    int tpipe_irq_mode;
    int src_width;
    int src_height;
    int tpipe_width;
    int tpipe_height;
    int src_width_wpe;
    int src_height_wpe;
    int tpipe_width_wpe;
    int tpipe_height_wpe;
    int src_width_mfb;
    int src_height_mfb;
    int tpipe_width_mfb;
    int tpipe_height_mfb;
    int tpipe_dual_en;
}ISP_TPIPE_CONFIG_SW_STRUCT;

typedef struct ISP_DRIVER_CONFIG_STRUCT
{
    unsigned int cq_basePA;
    ISP_TPIPE_P2_CQ_ENUM p2Cq;
    unsigned long DesCqPa;
    unsigned long DesCqVa; // for debugging
    unsigned int *pIspVirRegAddr_pa;
    unsigned int *pIspVirRegAddr_va;
    unsigned long tpipeTablePa;
    unsigned int *tpipeTableVa;
    unsigned int RingBufIdx;
    unsigned int burstCqIdx;
    unsigned int dupCqIdx;
    E_ISP_DIP_CQ cqIdx;                     //! index of pass2 cmdQ
    unsigned int frameflag;
    unsigned long smx1iPa;
    unsigned long smx2iPa;
    unsigned long smx3iPa;
    unsigned long smx4iPa;
    //ISP2MDP_STRUCT isp2mdpcfg;
    char* m_pMetLogBuf;
    unsigned int m_MetLogBufSize;
    unsigned int debugRegDump; // dump isp reg from GCE
    unsigned int framemode_total_in_w;  //total width of in-dma for frame mode only
    unsigned int framemode_total_out_w; //total width od out-dma for frame mode only
    unsigned int framemode_h;        //height for frame mode only
    unsigned int total_data_size;     // add for bandwidth
    unsigned int dmgi_data_size;
    unsigned int depi_data_size;
    unsigned int lcei_data_size;
    unsigned int timgo_data_size;
    unsigned int regCount;
    unsigned int ReadAddrList[MAX_READ_REG_NUM];
    unsigned long imgi_base_addr;
    unsigned long tpipeTablePa_wpe;
    unsigned int *tpipeTableVa_wpe;
    unsigned long tpipeTablePa_mfb;
    unsigned int *tpipeTableVa_mfb;
    unsigned int *dl_tpipeTableVa_wpe;
    unsigned int dupCqIdx_wpe;
    unsigned int regCount_wpe;
    unsigned int ReadAddrList_wpe[MAX_READ_REG_NUM];
    unsigned int *wpecommand;
    unsigned int *mfbcommand;
    // DIP settings for GCE cmd
    unsigned long cqSecHdl;
    unsigned long cqSecSize;
    unsigned long DesCqOft;
    unsigned long DesCqSize;
    unsigned long VirtRegPa;
    unsigned long VirtRegVa;
    unsigned long VirtRegOft;
    unsigned long tpipeTableSecHdl;
    unsigned long tpipeTableSecSize;
    unsigned long tpipeTableOft;
    unsigned long smxSecHdl;
    unsigned long smxSecSize;
    unsigned long smx1iOft;
    unsigned long smx2iOft;
    unsigned long smx3iOft;
    unsigned long smx4iOft;
    unsigned long dip_ctl_yuv_en;
    unsigned long dip_ctl_yuv2_en;
    unsigned long dip_ctl_rgb_en;
    unsigned long dip_ctl_rgb2_en;
    unsigned long dip_ctl_dma_en;
    unsigned long dip_ctl_dma2_en;
    unsigned long dip_ctl_fmt_sel;
    unsigned long dip_ctl_fmt2_sel;
    unsigned long dip_ctl_mux_sel;
    unsigned long dip_ctl_mux2_sel;
    unsigned long dip_ctl_misc_sel;
    unsigned long dip_img2o_base_addr;
    unsigned long dip_img2bo_base_addr;
    unsigned long dip_img3o_base_addr;
    unsigned long dip_img3bo_base_addr;
    unsigned long dip_img3co_base_addr;
    unsigned long dip_feo_base_addr;
    unsigned long dip_dceso_base_addr;
    unsigned long dip_timgo_base_addr;
    unsigned long dip_imgi_base_addr;
    unsigned long dip_imgbi_base_addr;
    unsigned long dip_imgci_base_addr;
    unsigned long dip_vipi_base_addr;
    unsigned long dip_vip2i_base_addr;
    unsigned long dip_vip3i_base_addr;
    unsigned long dip_dmgi_base_addr;
    unsigned long dip_depi_base_addr;
    unsigned long dip_lcei_base_addr;
    unsigned long dip_ufdi_base_addr;
    unsigned long dip_imgbi_base_vaddr;
    unsigned long dip_imgci_base_vaddr;
    unsigned long dip_dmgi_base_vaddr;
    unsigned long dip_depi_base_vaddr;
    unsigned long dip_lcei_base_vaddr;
    unsigned int dip_img2o_size[3];
    unsigned int dip_img3o_size[3];
    unsigned int dip_feo_size[3];
    unsigned int dip_dceso_size[3];
    unsigned int dip_timgo_size[3];
    unsigned int dip_imgi_size[3];
    unsigned int dip_imgbi_size[3];
    unsigned int dip_imgci_size[3];
    unsigned int dip_vipi_size[3];
    unsigned int dip_dmgi_size[3];
    unsigned int dip_depi_size[3];
    unsigned int dip_lcei_size[3];
    unsigned int dip_ufdi_size[3];
    unsigned int dip_secure_tag;
    unsigned int dip_img2o_secure_tag;
    unsigned int dip_img2bo_secure_tag;
    unsigned int dip_img3o_secure_tag;
    unsigned int dip_img3bo_secure_tag;
    unsigned int dip_img3co_secure_tag;
    unsigned int dip_feo_secure_tag;
    unsigned int dip_dceso_secure_tag;
    unsigned int dip_timgo_secure_tag;
    unsigned int dip_imgi_secure_tag;
    unsigned int dip_imgbi_secure_tag;
    unsigned int dip_imgci_secure_tag;
    unsigned int dip_vipi_secure_tag;
    unsigned int dip_vip2i_secure_tag;
    unsigned int dip_vip3i_secure_tag;
    unsigned int dip_dmgi_secure_tag;
    unsigned int dip_depi_secure_tag;
    unsigned int dip_lcei_secure_tag;
    unsigned int dip_ufdi_secure_tag;
}ISP_DRIVER_CONFIG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGI_STRUCT
{
    int imgi_v_flip_en;
    int imgi_stride;
}ISP_TPIPE_CONFIG_IMGI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT1I_STRUCT
{
    int smt1i_v_flip_en;
    int smt1i_xsize;
    int smt1i_ysize;
}ISP_TPIPE_CONFIG_SMT_D1AI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT2I_STRUCT
{
    int smt2i_v_flip_en;
    int smt2i_xsize;
    int smt2i_ysize;
}ISP_TPIPE_CONFIG_SMT2I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT3I_STRUCT
{
    int smt3i_v_flip_en;
    int smt3i_xsize;
    int smt3i_ysize;
}ISP_TPIPE_CONFIG_SMT3I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT4I_STRUCT
{
    int smt4i_v_flip_en;
    int smt4i_xsize;
    int smt4i_ysize;
}ISP_TPIPE_CONFIG_SMT4I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_ADL_STRUCT
{
    int adl_ctl_en;
    int ipui_stride;
    int ipuo_stride;
}ISP_TPIPE_CONFIG_ADL_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGBI_STRUCT
{
    int imgbi_offset;
    int imgbi_xsize;
    int imgbi_ysize;
    int imgbi_stride;
}ISP_TPIPE_CONFIG_IMGBI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGCI_STRUCT
{
    int imgci_v_flip_en;
    int imgci_stride;
}ISP_TPIPE_CONFIG_IMGCI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UFDI_STRUCT
{
    int ufdi_v_flip_en;
    int ufdi_xsize;
    int ufdi_ysize;
    int ufdi_stride;
}ISP_TPIPE_CONFIG_UFDI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LSC_STRUCT
{
    int extend_coef_mode;
    int sdblk_width;
    int sdblk_xnum;
    int sdblk_last_width;
    int sdblk_height;
    int sdblk_ynum;
    int sdblk_last_height;
}ISP_TPIPE_CONFIG_LSC_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LTM_STRUCT
{
    int blk_x_num;
    int blk_y_num;
    int blk_width;
    int blk_height;
}ISP_TPIPE_CONFIG_LTM_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2_STRUCT
{
    int sl2_hrz_comp;
    int sl2_vrz_comp;
}ISP_TPIPE_CONFIG_SL2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DM_STRUCT
{
    int dm_byp;
}ISP_TPIPE_CONFIG_DM_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIPI_STRUCT
{
    int vipi_v_flip_en;
    int vipi_xsize;
    int vipi_ysize;
    int vipi_stride;
}ISP_TPIPE_CONFIG_VIPI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIPBI_STRUCT
{
    int vipbi_v_flip_en;
    int vipbi_xsize;
    int vipbi_ysize;
    int vipbi_stride;
}ISP_TPIPE_CONFIG_VIPBI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIPCI_STRUCT
{
    int vipci_v_flip_en;
    int vipci_xsize;
    int vipci_ysize;
    int vipci_stride;
}ISP_TPIPE_CONFIG_VIPCI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UFD_STRUCT
{
    int ufd_bs2_au_start;
    int ufd_bs3_au_start;
    int ufd_bond_mode;
    int ufd_bond2_mode;
    int ufd_sel;
}ISP_TPIPE_CONFIG_UFD_STRUCT;

typedef struct ISP_TPIPE_CONFIG_TIMGO_STRUCT
{
    int timgo_stride;
    int timgo_xoffset;
    int timgo_yoffset;
    int timgo_xsize;
    int timgo_ysize;
}ISP_TPIPE_CONFIG_TIMGO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DCES_STRUCT
{
    int dces_crop_xstart;
    int dces_crop_xend;
    int dces_crop_ystart;
    int dces_crop_yend;
}ISP_TPIPE_CONFIG_DCES_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DCESO_STRUCT
{
    int dceso_xsize;
    int dceso_ysize;
}ISP_TPIPE_CONFIG_DCESO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_G2CX_STRUCT
{
    int g2cx_shade_en;
    int g2cx_shade_xmid;
    int g2cx_shade_ymid;
    int g2cx_shade_var;
}ISP_TPIPE_CONFIG_G2CX_STRUCT;

typedef struct ISP_TPIPE_CONFIG_YNR_STRUCT
{
    int eny;
    int enc;
    int video_mode;
    int skin_link;
	int lce_link;
}ISP_TPIPE_CONFIG_YNR_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CNR_STRUCT
{
    int bpc_en;
    int enc;
    int scale_mode;
    int mode;
    int video_mode;
    int abf_en;
}ISP_TPIPE_CONFIG_CNR_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SLK_STRUCT
{
    int slk_hrz_comp;
    int slk_vrz_comp;
}ISP_TPIPE_CONFIG_SLk_STRUCT;

typedef struct ISP_TPIPE_CONFIG_HFG_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_HFG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NDG_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_NDG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NDG2_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_NDG2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_EE_STRUCT
{
    int ee_out_edge_sel;
}ISP_TPIPE_CONFIG_EE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LCEI_STRUCT
{
    int lcei_v_flip_en;
    int lcei_xsize;
    int lcei_ysize;
    int lcei_stride;
}ISP_TPIPE_CONFIG_LCEI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LCE_STRUCT
{
    int lce_lc_tone;
    int lce_bc_mag_kubnx;
    int lce_slm_width;
    int lce_bc_mag_kubny;
    int lce_slm_height;
    int lce_full_xoff;
    int lce_full_yoff;
    int lce_full_slm_width;
    int lce_full_slm_height;
    int lce_full_out_height;
}ISP_TPIPE_CONFIG_LCE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRZ_STRUCT
{
    int crz_input_crop_width;
    int crz_input_crop_height;
    int crz_output_width;
    int crz_output_height;
    int crz_luma_horizontal_integer_offset;/* pixel base */
    int crz_luma_horizontal_subpixel_offset;/* 20 bits base */
    int crz_luma_vertical_integer_offset;/* pixel base */
    int crz_luma_vertical_subpixel_offset;/* 20 bits base */
    int crz_horizontal_luma_algorithm;
    int crz_vertical_luma_algorithm;
    int crz_horizontal_coeff_step;
    int crz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_CRZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRZO_STRUCT
{
    int crzo_stride;
    int crzo_xoffset;
    int crzo_yoffset;
    int crzo_xsize;
    int crzo_ysize;
}ISP_TPIPE_CONFIG_CRZO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRZBO_STRUCT
{
    int crzbo_stride;
    int crzbo_xoffset;
    int crzbo_yoffset;
    int crzbo_xsize;
    int crzbo_ysize;
}ISP_TPIPE_CONFIG_CRZBO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SRZ_STRUCT
{
    int srz_input_crop_width;
    int srz_input_crop_height;
    int srz_output_width;
    int srz_output_height;
    int srz_luma_horizontal_integer_offset;/* pixel base */
    int srz_luma_horizontal_subpixel_offset;/* 20 bits base */
    int srz_luma_vertical_integer_offset;/* pixel base */
    int srz_luma_vertical_subpixel_offset;/* 20 bits base */
    int srz_horizontal_coeff_step;
    int srz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_SRZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DFE_STRUCT
{
    int dfe_mode;
}ISP_TPIPE_CONFIG_DFE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_FEO_STRUCT
{
    int feo_stride;
}ISP_TPIPE_CONFIG_FEO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NR3D_STRUCT
{
    int nr3d_on_en;
    int nr3d_snr_en;
    int nr3d_on_xoffset;
    int nr3d_on_yoffset;
    int nr3d_on_width;
    int nr3d_on_height;
}ISP_TPIPE_CONFIG_NR3D_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRSP_STRUCT
{
    int crsp_ystep;
    int crsp_xoffset;
    int crsp_yoffset;
}ISP_TPIPE_CONFIG_CRSP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3O_STRUCT
{
    int img3o_stride;
    int img3o_xoffset;
    int img3o_yoffset;
    int img3o_xsize;
    int img3o_ysize;
}ISP_TPIPE_CONFIG_IMG3O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3BO_STRUCT
{
    int img3bo_stride;
    int img3bo_xsize;
    int img3bo_ysize;
}ISP_TPIPE_CONFIG_IMG3BO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3CO_STRUCT
{
    int img3co_stride;
    int img3co_xsize;
    int img3co_ysize;
}ISP_TPIPE_CONFIG_IMG3CO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DMGI_STRUCT
{
    int dmgi_v_flip_en;
    int dmgi_stride;
    int dmgi_offset;
    int dmgi_xsize;
    int dmgi_ysize;
}ISP_TPIPE_CONFIG_DMGI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DEPI_STRUCT
{
    int depi_v_flip_en;
    int depi_stride;
    int depi_xsize;
    int depi_ysize;
}ISP_TPIPE_CONFIG_DEPI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT1O_STRUCT
{
    int smt1o_xsize;
    int smt1o_ysize;
}ISP_TPIPE_CONFIG_SMT1O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT2O_STRUCT
{
    int smt2o_xsize;
    int smt2o_ysize;
}ISP_TPIPE_CONFIG_SMT2O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT3O_STRUCT
{
    int smt3o_xsize;
    int smt3o_ysize;
}ISP_TPIPE_CONFIG_SMT3O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT4O_STRUCT
{
    int smt4o_xsize;
    int smt4o_ysize;
}ISP_TPIPE_CONFIG_SMT4O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UNP_STRUCT
{
    int yuv_bit;
    int yuv_dng;
}ISP_TPIPE_CONFIG_UNP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_PAK_STRUCT
{
    int yuv_bit;
    int yuv_dng;
}ISP_TPIPE_CONFIG_PAK_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFB_STRUCT
{
    int bld_mbd_wt_en;
}ISP_TPIPE_CONFIG_MFB_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFBI_STRUCT
{
    int mfbi_v_flip_en;
	int mfbi_stride;
}ISP_TPIPE_CONFIG_MFBI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFBI_B_STRUCT
{
    int mfbi_b_v_flip_en;
	int mfbi_b_stride;
}ISP_TPIPE_CONFIG_MFBI_B_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFB3I_STRUCT
{
    int mfb3i_v_flip_en;
	int mfb3i_stride;
}ISP_TPIPE_CONFIG_MFB3I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFB4I_STRUCT
{
    int mfb4i_v_flip_en;
	int mfb4i_xsize;
    int mfb4i_ysize;
	int mfb4i_stride;
}ISP_TPIPE_CONFIG_MFB4I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFBO_STRUCT
{
    int mfbo_stride;
    int mfbo_xoffset;
    int mfbo_yoffset;
    int mfbo_xsize;
    int mfbo_ysize;
}ISP_TPIPE_CONFIG_MFBO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFBO_B_STRUCT
{
    int mfbo_b_stride;
}ISP_TPIPE_CONFIG_MFBO_B_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFB2O_STRUCT
{
    int mfb2o_stride;
    int mfb2o_xoffset;
    int mfb2o_yoffset;
    int mfb2o_xsize;
    int mfb2o_ysize;
}ISP_TPIPE_CONFIG_MFB2O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT1_STRUCT
{
    int smt1o_sel;
}ISP_TPIPE_CONFIG_SMT1_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT2_STRUCT
{
    int smt2o_sel;
}ISP_TPIPE_CONFIG_SMT2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT3_STRUCT
{
    int smt3o_sel;
}ISP_TPIPE_CONFIG_SMT3_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT4_STRUCT
{
    int smt4o_sel;
}ISP_TPIPE_CONFIG_SMT4_STRUCT;

typedef struct ISP_TPIPE_CONFIG_OFT_STRUCT
{
    int oft_crop_en;
    int oft_crz_en;
    int oft_dth_en;
    int oft_bcvt_en;
    int oft_c24_en;
    int oft_c2g_en;
    int oft_iggm_en;
    int oft_ccm_en;
    int oft_gce_en;
    int oft_g2c_en;
    int oft_c42_en;
    int oft_c20_en;
    int oft_r2b_en;
    int oft_hsv_en;
    int oft_lab_en;
    // crz
    int oft_crz_input_crop_width;
    int oft_crz_input_crop_height;
    int oft_crz_output_width;
    int oft_crz_output_height;
    int oft_crz_luma_horizontal_integer_offset;
    int oft_crz_luma_horizontal_subpixel_offset;
    int oft_crz_luma_vertical_integer_offset;
    int oft_crz_luma_vertical_subpixel_offset;
    int oft_crz_horizontal_luma_algorithm;
    int oft_crz_vertical_luma_algorithm;
    int oft_crz_horizontal_coeff_step;
    int oft_crz_vertical_coeff_step;
    // r2b
    int oft_c20_xoffset;
    int oft_c20_yoffset;
    int oft_r2b_ch0_stride;
    int oft_r2b_ch1_stride;
    int oft_r2b_ch2_stride;
    int oft_r2b_stride;
    int oft_r2b_xoffset;
    int oft_r2b_yoffset;
    int oft_r2b_xsize;
    int oft_r2b_ysize;
    int oft_r2b_format;
    int oft_r2b_plane;
    int oft_r2b_comp_mode;
    int oft_r2b_comp_en;
    int oft_r2b_out_depth;
    int oft_ext_isp_format;
}ISP_TPIPE_CONFIG_OFT_STRUCT;

typedef struct ISP_TPIPE_CONFIG_OFTL_STRUCT
{
    int oftl_crop_en;
    int oftl_crz_en;
    int oftl_dth_en;
    int oftl_bcvt_en;
    int oftl_c24_en;
    int oftl_c2g_en;
    int oftl_iggm_en;
    int oftl_ccm_en;
    int oftl_gce_en;
    int oftl_g2c_en;
    int oftl_c42_en;
    int oftl_c20_en;
    int oftl_r2b_en;
    // crz
    int oftl_crz_input_crop_width;
    int oftl_crz_input_crop_height;
    int oftl_crz_output_width;
    int oftl_crz_output_height;
    int oftl_crz_luma_horizontal_integer_offset;
    int oftl_crz_luma_horizontal_subpixel_offset;
    int oftl_crz_luma_vertical_integer_offset;
    int oftl_crz_luma_vertical_subpixel_offset;
    int oftl_crz_horizontal_luma_algorithm;
    int oftl_crz_vertical_luma_algorithm;
    int oftl_crz_horizontal_coeff_step;
    int oftl_crz_vertical_coeff_step;
    // r2b
    int oftl_c20_xoffset;
    int oftl_c20_yoffset;
    int oftl_r2b_ch0_stride;
    int oftl_r2b_ch1_stride;
    int oftl_r2b_xoffset;
    int oftl_r2b_yoffset;
    int oftl_r2b_xsize;
    int oftl_r2b_ysize;
    int oftl_r2b_format;
    int oftl_r2b_plane;
    int oftl_r2b_comp_mode;
    int oftl_r2b_comp_en;
    int oftl_r2b_out_depth;
}ISP_TPIPE_CONFIG_OFTL_STRUCT;

typedef enum TPIPE_Pass2CmdqNum_ENUM
{
    TPIPE_PASS2_CMDQ_NONE=0,
    TPIPE_PASS2_CMDQ_1,
    TPIPE_PASS2_CMDQ_2,
    TPIPE_PASS2_CMDQ_3,
      TPIPE_PASS2_CMDQ_NUM
}TPIPE_Pass2CmdqNum_ENUM;

typedef enum TPIPE_Pass2CmdqPrior_ENUM
{
    TPIPE_PASS2_CMDQ_PRIOR_LOW=1,
    TPIPE_PASS2_CMDQ_PRIOR_HIGH = 10
}TPIPE_Pass2CmdqPrior_ENUM;

typedef struct ISP_TPIPE_CONFIG_PASS2_STRUCT
{
    E_ISP_DIP_CQ Pass2CmdqNum;
    //TPIPE_Pass2CmdqPrior_ENUM Pass2CmdqPriority;
}ISP_TPIPE_CONFIG_PASS2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_STRUCT
{
    ISP_TPIPE_CONFIG_TOP_STRUCT top;
    ISP_TPIPE_CONFIG_SW_STRUCT sw;
    ISP_TPIPE_CONFIG_ADL_STRUCT adl;
    ISP_TPIPE_CONFIG_IMGI_STRUCT imgi;
    ISP_TPIPE_CONFIG_IMGBI_STRUCT imgbi;
    ISP_TPIPE_CONFIG_IMGCI_STRUCT imgci;
    ISP_TPIPE_CONFIG_VIPI_STRUCT vipi;
    ISP_TPIPE_CONFIG_VIPBI_STRUCT vipbi;
    ISP_TPIPE_CONFIG_VIPCI_STRUCT vipci;
    ISP_TPIPE_CONFIG_UFDI_STRUCT ufdi;
    ISP_TPIPE_CONFIG_LCEI_STRUCT lcei;
    ISP_TPIPE_CONFIG_DMGI_STRUCT dmgi;
    ISP_TPIPE_CONFIG_DEPI_STRUCT depi;
    ISP_TPIPE_CONFIG_TIMGO_STRUCT timgo;
    ISP_TPIPE_CONFIG_DCESO_STRUCT dceso;
    ISP_TPIPE_CONFIG_IMG3O_STRUCT img3o;
    ISP_TPIPE_CONFIG_IMG3BO_STRUCT img3bo;
    ISP_TPIPE_CONFIG_IMG3CO_STRUCT img3co;
    ISP_TPIPE_CONFIG_CRZO_STRUCT crzo;
    ISP_TPIPE_CONFIG_CRZBO_STRUCT crzbo;
    ISP_TPIPE_CONFIG_FEO_STRUCT feo;
    ISP_TPIPE_CONFIG_UFD_STRUCT ufd;
    ISP_TPIPE_CONFIG_LSC_STRUCT lsc;
    ISP_TPIPE_CONFIG_LTM_STRUCT ltm;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp2;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp3;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp4;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp6;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp7;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp8;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp9;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp10;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp11;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak2;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak3;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak4;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak6;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak7;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak8;
    ISP_TPIPE_CONFIG_DM_STRUCT dm;
    ISP_TPIPE_CONFIG_G2CX_STRUCT g2cx;
    ISP_TPIPE_CONFIG_YNR_STRUCT ynr;
    ISP_TPIPE_CONFIG_CNR_STRUCT cnr;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk1;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk2;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk3;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk4;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk5;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk6;
    ISP_TPIPE_CONFIG_NDG_STRUCT ndg;
    ISP_TPIPE_CONFIG_NDG2_STRUCT ndg2;
    ISP_TPIPE_CONFIG_EE_STRUCT ee;
    ISP_TPIPE_CONFIG_LCE_STRUCT lce;
    ISP_TPIPE_CONFIG_DCES_STRUCT dces;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz1;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz3;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz4;
    ISP_TPIPE_CONFIG_CRZ_STRUCT crz;
    ISP_TPIPE_CONFIG_DFE_STRUCT dfe;
    ISP_TPIPE_CONFIG_NR3D_STRUCT nr3d;
    ISP_TPIPE_CONFIG_CRSP_STRUCT crsp;
    ISP_TPIPE_CONFIG_SMT1_STRUCT smt1;
    ISP_TPIPE_CONFIG_SMT2_STRUCT smt2;
    ISP_TPIPE_CONFIG_SMT3_STRUCT smt3;
    ISP_TPIPE_CONFIG_SMT4_STRUCT smt4;
    ISP_TPIPE_CONFIG_SMT1I_STRUCT smt1i;
    ISP_TPIPE_CONFIG_SMT1O_STRUCT smt1o;
    ISP_TPIPE_CONFIG_SMT2I_STRUCT smt2i;
    ISP_TPIPE_CONFIG_SMT2O_STRUCT smt2o;
    ISP_TPIPE_CONFIG_SMT3I_STRUCT smt3i;
    ISP_TPIPE_CONFIG_SMT3O_STRUCT smt3o;
    ISP_TPIPE_CONFIG_SMT4I_STRUCT smt4i;
    ISP_TPIPE_CONFIG_SMT4O_STRUCT smt4o;
    ISP_TPIPE_CONFIG_MFBI_STRUCT mfbi;
    ISP_TPIPE_CONFIG_MFBI_B_STRUCT mfbi_b;
    ISP_TPIPE_CONFIG_MFB3I_STRUCT mfb3i;
    ISP_TPIPE_CONFIG_MFB4I_STRUCT mfb4i;
    ISP_TPIPE_CONFIG_MFB_STRUCT mfb;
    ISP_TPIPE_CONFIG_MFBO_STRUCT mfbo;
    ISP_TPIPE_CONFIG_MFBO_B_STRUCT mfbo_b;
    ISP_TPIPE_CONFIG_MFB2O_STRUCT mfb2o;
    ISP_TPIPE_CONFIG_SRZ_STRUCT mfb_srz;
    ISP_TPIPE_CONFIG_CRSP_STRUCT mfb_crsp;
    ISP_TPIPE_CONFIG_PAK_STRUCT mfb_y_unp;
    ISP_TPIPE_CONFIG_PAK_STRUCT mfb_c_unp;
    ISP_TPIPE_CONFIG_UNP_STRUCT mfb_y_pak;
    ISP_TPIPE_CONFIG_UNP_STRUCT mfb_c_pak;
    ISP_TPIPE_CONFIG_OFT_STRUCT oft;
    ISP_TPIPE_CONFIG_OFTL_STRUCT oftl;
	WPE_TPIPE_CONFIG_STRUCT wpe;
    ISP_TPIPE_CONFIG_PASS2_STRUCT pass2;
    ISP_DRIVER_CONFIG_STRUCT drvinfo;
}ISP_TPIPE_CONFIG_STRUCT;

/* struct size must be x4 bytes */
typedef struct ISP_TPIPE_INFORMATION_STRUCT
{
    unsigned int num;/* tpipe cal num */
    unsigned int tdr_disable_flag;/* tdr disable flag */
    unsigned int pos_xs;/* tpipe start */
    unsigned int pos_xe;/* tpipe end */
    unsigned int pos_ys;/* tpipe start */
    unsigned int pos_ye;/* tpipe end */
    unsigned int tpipe_stop_flag;/* stop flag */
    unsigned int dump_offset_no;/* word offset */
}ISP_TPIPE_INFORMATION_STRUCT;

typedef struct ISP_TPIPE_DESCRIPTOR_STRUCT
{
    unsigned int tpipe_sel_mode;
    unsigned int used_word_no;
    unsigned int total_word_no;
    unsigned int config_no_per_tpipe;
    unsigned int used_tpipe_no;
    unsigned int total_tpipe_no;
    unsigned int horizontal_tpipe_no;
    unsigned int curr_horizontal_tpipe_no;
    unsigned int curr_vertical_tpipe_no;
    unsigned int tpipe_sel;
    unsigned int *tdr_disable_flag;
    unsigned int *last_irq_flag;
    unsigned int *tpipe_config;
    unsigned int used_word_no_d;
    unsigned int used_tpipe_no_d;
    unsigned int tpipe_sel_d;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info;
    unsigned int *tpipe_config_d;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_d;
    /* wpe */
    unsigned int config_no_per_tpipe_wpe;
    unsigned int tpipe_sel_wpe;
    unsigned int *tpipe_config_wpe;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_wpe;
    unsigned int used_word_no_wpe;
    unsigned int total_word_no_wpe;
    /* wpe_d */
    unsigned int tpipe_sel_wpe_d;
    unsigned int *tpipe_config_d_wpe;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_d_wpe;
    unsigned int used_word_no_d_wpe;
	/* wpe_s */
	unsigned int used_tpipe_no_wpe_s;
	unsigned int config_no_per_tpipe_wpe_s;
    unsigned int *tpipe_config_wpe_s;
	unsigned int used_word_no_wpe_s;
    unsigned int total_word_no_wpe_s;
	/* mfb */
	unsigned int config_no_per_tpipe_mfb;
    unsigned int *tpipe_config_mfb;
	unsigned int tpipe_sel_mfb;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_mfb;
    unsigned int total_word_no_mfb;
	unsigned int used_word_no_mfb;
}ISP_TPIPE_DESCRIPTOR_STRUCT;

extern int tpipe_main_query_platform_working_buffer_size(int tpipe_no, int tpipe_sel);
extern ISP_TPIPE_MESSAGE_ENUM tpipe_main_platform(const ISP_TPIPE_CONFIG_STRUCT *ptr_tpipe_config,
                ISP_TPIPE_DESCRIPTOR_STRUCT *ptr_isp_tpipe_descriptor,
                char *ptr_working_buffer, int buffer_size, void *ptr_dip_reg, void *ptr_mfb_reg);
extern ISP_TPIPE_MESSAGE_ENUM tpipe_print_platform_config(
    const ISP_TPIPE_CONFIG_STRUCT *ptr_tpipe_config);
#endif
