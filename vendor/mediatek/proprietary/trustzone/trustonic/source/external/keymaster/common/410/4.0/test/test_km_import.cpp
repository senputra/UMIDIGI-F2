/*
 * Copyright (c) 2018 TRUSTONIC LIMITED
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the TRUSTONIC LIMITED nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "TrustonicKeymaster4DeviceImpl.h"

#include "test_km_import.h"
#include "test_km_util.h"

#include "log.h"

/* TK = transport key = BB...BB (32 bytes) */

/* IV = initialization vector = CC...CC (16 bytes) */
static const uint8_t der_iv[18] = {0x04, 0x10, // OCTET STRING, length 16
    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc};

/* Masking key */
static const uint8_t MK[32] = {
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F};

/* Masked key = TK xor MK */
static const uint8_t X[32] = {
    0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4,
    0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4,
    0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4,
    0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4, 0xB4};

/* zero */
static const uint8_t der_0[] = {0x02, 0x01, 0x00};

/* Import and use an HMAC key */
static keymaster_error_t test_km_import_hmac(
    TrustonicKeymaster4DeviceImpl *impl,
    const uint8_t *ETK, /* length 384 */
    const keymaster_key_blob_t *wrapping_key_blob)
{
    keymaster_error_t res = KM_ERROR_OK;
    keymaster_key_blob_t Kblob = {NULL, 0};
    keymaster_key_characteristics_t imported_key_characteristics;
    keymaster_key_param_t param[3];
    keymaster_key_param_set_t paramset = {param, 0};
    uint8_t *p;
    keymaster_operation_handle_t handle;
    uint8_t M[] = {1, 2, 3};
    keymaster_blob_t Mblob = {M, 3};
    const uint8_t T[32] = { // HMAC(M) with key = [0xAA]*16
        0x1c, 0xcd, 0xc9, 0x51, 0x26, 0xab, 0xbd, 0xb3,
        0xc4, 0x09, 0x8e, 0x5b, 0xf5, 0x88, 0x08, 0x33,
        0xc3, 0x87, 0xc4, 0xd3, 0x42, 0x63, 0x0f, 0x1b,
        0x41, 0xab, 0xcd, 0xd2, 0x27, 0xc8, 0xe2, 0x86};
    keymaster_blob_t Tblob = {T, 32};
    uint8_t wrappedKeyData[488];
    keymaster_blob_t WKDblob = {wrappedKeyData, 488};
    const uint8_t KeyDescription[] = {
        0x30, 0x25, // SEQUENCE, length 37
            0x02, 0x01, 0x03, // INTEGER, length 1, 3 = KM_KEY_FORMAT_RAW
            0x30, 0x20, // SEQUENCE, length 32 (keyParams AuthorizationList)
                0xA1, 0x05, // explicit tag 1 (KM_TAG_PURPOSE), length 5
                    0x31, 0x03, // SET, length 3
                        0x02, 0x01, 0x03, // INTEGER, length 1, 3 = KM_PURPOSE_VERIFY
                0xA2, 0x04, // explicit tag 2 (KM_TAG_ALGORITHM), length 4
                    0x02, 0x02, 0x00, 0x80, // INTEGER, length 2, 128 = KM_ALGORITHM_HMAC
                0xA3, 0x04, // explicit tag 3 (KM_TAG_KEY_SIZE), length 4
                    0x02, 0x02, 0x00, 0x80, // INTEGER, length 2, 128
                0xA5, 0x05, // explicit tag 5 (KM_TAG_DIGEST), length 5
                    0x31, 0x03, // SET, length 3
                        0x02, 0x01, 0x04, // INTEGER, length 1, 4 = KM_DIGEST_SHA_2_256
                0xBF, 0x83, 0x77, 0x02, // explicit tag 503 (KM_TAG_NO_AUTH_REQUIRED), length 2
                    0x05, 0x00, // NULL, length 0
    };
    const uint8_t der_ek[] = {0x04, 0x10, // OCTET STRING, length 16
        0x5d, 0x4c, 0x3a, 0x04, 0x5f, 0xea, 0x2a, 0xf7,
        0x9e, 0xaf, 0xa5, 0xf8, 0x8a, 0x48, 0x46, 0xd2};
    const uint8_t der_tag[] = {0x04, 0x10, // OCTET STRING, length 16
        0x18, 0x74, 0xf9, 0x93, 0x4c, 0xe5, 0x55, 0x88,
        0x50, 0xf3, 0x53, 0x3f, 0xe6, 0x7f, 0x67, 0x09};

    /* Construct wrappedKeyData */
    p = wrappedKeyData;
    *p++ = 0x30; *p++ = 0x82; *p++ = 1; *p++ = 228; // SEQUENCE, length 484
    memcpy(p, der_0, 3); p += 3; //  INTEGER, 0 (version)
    *p++ = 0x04; *p++ = 0x82; *p++ = 1; *p++ = 128; // OCTET STRING, length 384 (encryptedTransportKey)
    memcpy(p, ETK, 384); p += 384;
    memcpy(p, der_iv, 18); p += 18;
    memcpy(p, KeyDescription, 39); p += 39;
    memcpy(p, der_ek, 18); p += 18;
    memcpy(p, der_tag, 18); p += 18;

    /* Securely import the key */
    memset(&imported_key_characteristics, 0, sizeof(keymaster_key_characteristics_t));
    param[0].tag = KM_TAG_PADDING;
    param[0].enumerated = KM_PAD_RSA_OAEP;
    param[1].tag = KM_TAG_DIGEST;
    param[1].enumerated = KM_DIGEST_SHA_2_256;
    paramset.length = 2;
    CHECK_RESULT_OK(impl->import_wrapped_key(
        &WKDblob, wrapping_key_blob, MK, &paramset, 0, 0,
        &Kblob, &imported_key_characteristics));

    /* Use the key */
    param[0].tag = KM_TAG_ALGORITHM;
    param[0].enumerated = KM_ALGORITHM_HMAC;
    param[1].tag = KM_TAG_DIGEST;
    param[1].enumerated = KM_DIGEST_SHA_2_256;
    param[2].tag = KM_TAG_MAC_LENGTH;
    param[2].integer = 256;
    paramset.length = 3;
    CHECK_RESULT_OK(impl->begin(
        KM_PURPOSE_VERIFY, &Kblob, &paramset, NULL, NULL, &handle));
    CHECK_RESULT_OK(impl->finish(
        handle, NULL, &Mblob, &Tblob, NULL, NULL, NULL, NULL));

end:
    km_free_key_blob(&Kblob);
    keymaster_free_characteristics(&imported_key_characteristics);
    return res;
}

/* Import and use an EC key */
static keymaster_error_t test_km_import_ec(
    TrustonicKeymaster4DeviceImpl *impl,
    const uint8_t *ETK, /* length 384 */
    const keymaster_key_blob_t *wrapping_key_blob)
{
    keymaster_error_t res = KM_ERROR_OK;
    keymaster_key_blob_t Kblob = {NULL, 0};
    keymaster_key_characteristics_t imported_key_characteristics;
    keymaster_key_param_t param[3];
    keymaster_key_param_set_t paramset = {param, 0};
    uint8_t *p;
    keymaster_operation_handle_t handle;
    uint8_t M[] = {1, 2, 3};
    keymaster_blob_t Mblob = {M, 3};
    const uint8_t S[] = {
        0x30, 0x3c, 0x02, 0x1c, 0x24, 0x33, 0xa1, 0xf4,
        0x36, 0x38, 0xd5, 0x76, 0x70, 0x3c, 0x70, 0x2c,
        0x7e, 0x6f, 0x52, 0x4b, 0xb0, 0x0a, 0x5c, 0x89,
        0x58, 0x7c, 0x46, 0x2f, 0xe0, 0x0e, 0x90, 0xfb,
        0x02, 0x1c, 0x7c, 0xee, 0x17, 0xfd, 0x3a, 0x9a,
        0x7f, 0x88, 0xc8, 0x46, 0xa5, 0x69, 0x58, 0x8d,
        0x37, 0x74, 0x21, 0xf9, 0x90, 0xb0, 0x1a, 0xa7,
        0x6a, 0x7c, 0x7a, 0x16, 0x3c, 0xd6};
    keymaster_blob_t Sblob = {S, sizeof(S)};
    uint8_t wrappedKeyData[593];
    keymaster_blob_t WKDblob = {wrappedKeyData, 593};
    const uint8_t KeyDescription[] = {
        0x30, 0x24, // SEQUENCE, length 36
            0x02, 0x01, 0x01, // INTEGER, length 1, 1 = KM_KEY_FORMAT_PKCS8
            0x30, 0x1F, // SEQUENCE, length 31 (keyParams AuthorizationList)
                0xA1, 0x05, // explicit tag 1 (KM_TAG_PURPOSE), length 5
                    0x31, 0x03, // SET, length 3
                        0x02, 0x01, 0x03, // INTEGER, length 1, 3 = KM_PURPOSE_VERIFY
                0xA2, 0x03, //explicit tag 2 (KM_TAG_ALGORITHM), length 4
                    0x02, 0x01, 0x03, // INTEGER, length 1, 3 = KM_ALGORITHM_EC
                0xA3, 0x04, // explicit tag 3 (KM_TAG_KEY_SIZE), length 4
                    0x02, 0x02, 0x00, 0xe0, // INTEGER, length 2, 224
                0xA5, 0x05, // explicit tag 5 (KM_TAG_DIGEST), length 5
                    0x31, 0x03, // SET, length 3
                        0x02, 0x01, 0x03, // INTEGER, length 1, 3 = KM_DIGEST_SHA_2_224
                0xBF, 0x83, 0x77, 0x02, // explicit tag 503 (KM_TAG_NO_AUTH_REQUIRED), length 2
                    0x05, 0x00, // NULL, length 0
    };
    const uint8_t der_ek[] = {0x04, 0x7a, // OCTET STRING, length 122
        0xc7, 0x9e, 0x92, 0xaf, 0xf5, 0x70, 0x90, 0x5b,
        0x33, 0x2f, 0x89, 0x1a, 0xee, 0xdf, 0xee, 0x79,
        0xef, 0xfe, 0x34, 0x48, 0x1f, 0x72, 0xfa, 0x4c,
        0x35, 0x9d, 0x84, 0xcb, 0x8b, 0x18, 0xdb, 0xff,
        0x5a, 0x32, 0x4c, 0x9e, 0xc9, 0xcc, 0x78, 0x2a,
        0xb0, 0xe1, 0x26, 0x43, 0x8a, 0x8b, 0x6a, 0x24,
        0x4c, 0x87, 0x93, 0x11, 0x6c, 0xf7, 0x7b, 0x59,
        0x0c, 0xcd, 0xd3, 0xf6, 0x78, 0x08, 0x3d, 0xb8,
        0x57, 0xec, 0xcf, 0xb1, 0x88, 0x0e, 0xb5, 0xa1,
        0x5f, 0x8f, 0x1e, 0xfe, 0x05, 0x84, 0x55, 0xac,
        0x1e, 0x84, 0x09, 0x6a, 0xf4, 0x88, 0x67, 0x0a,
        0x94, 0x56, 0x99, 0xd2, 0x12, 0xd2, 0x0a, 0xa0,
        0x55, 0xf9, 0xc6, 0xf3, 0x39, 0x36, 0x49, 0xb6,
        0xb8, 0xe6, 0x2a, 0x1a, 0xc2, 0x9e, 0x63, 0x6b,
        0x75, 0x12, 0xe7, 0x18, 0xcb, 0x59, 0x3f, 0x53,
        0x3f, 0xd0};
    const uint8_t der_tag[] = {0x04, 0x10, // OCTET STRING, length 16
        0x08, 0x89, 0x65, 0xe0, 0xbd, 0xed, 0x0f, 0xf8,
        0x83, 0xf1, 0x98, 0x69, 0xcb, 0x64, 0x1f, 0xbf};

    /* Construct wrappedKeyData */
    p = wrappedKeyData;
    *p++ = 0x30; *p++ = 0x82; *p++ = 2; *p++ = 0x4d; // SEQUENCE, length 589
    memcpy(p, der_0, 3); p += 3; //  INTEGER, 0 (version)
    *p++ = 0x04; *p++ = 0x82; *p++ = 1; *p++ = 128; // OCTET STRING, length 384 (encryptedTransportKey)
    memcpy(p, ETK, 384); p += 384;
    memcpy(p, der_iv, 18); p += 18;
    memcpy(p, KeyDescription, 38); p += 38;
    memcpy(p, der_ek, 124); p += 124;
    memcpy(p, der_tag, 18); p += 18;

    /* Securely import the key */
    memset(&imported_key_characteristics, 0, sizeof(keymaster_key_characteristics_t));
    param[0].tag = KM_TAG_PADDING;
    param[0].enumerated = KM_PAD_RSA_OAEP;
    param[1].tag = KM_TAG_DIGEST;
    param[1].enumerated = KM_DIGEST_SHA_2_256;
    paramset.length = 2;
    CHECK_RESULT_OK(impl->import_wrapped_key(
        &WKDblob, wrapping_key_blob, MK, &paramset, 0, 0,
        &Kblob, &imported_key_characteristics));

    /* Use the key */
    param[0].tag = KM_TAG_ALGORITHM;
    param[0].enumerated = KM_ALGORITHM_EC;
    param[1].tag = KM_TAG_DIGEST;
    param[1].enumerated = KM_DIGEST_SHA_2_224;
    paramset.length = 2;
    CHECK_RESULT_OK(impl->begin(
        KM_PURPOSE_VERIFY, &Kblob, &paramset, NULL, NULL, &handle));
    CHECK_RESULT_OK(impl->finish(
        handle, NULL, &Mblob, &Sblob, NULL, NULL, NULL, NULL));

end:
    km_free_key_blob(&Kblob);
    keymaster_free_characteristics(&imported_key_characteristics);
    return res;
}

/* Import and use an RSA key */
static keymaster_error_t test_km_import_rsa(
    TrustonicKeymaster4DeviceImpl *impl,
    const uint8_t *ETK, /* length 384 */
    const keymaster_key_blob_t *wrapping_key_blob)
{
    keymaster_error_t res = KM_ERROR_OK;
    keymaster_key_blob_t Kblob = {NULL, 0};
    keymaster_key_characteristics_t imported_key_characteristics;
    keymaster_key_param_t param[3];
    keymaster_key_param_set_t paramset = {param, 0};
    uint8_t *p;
    keymaster_operation_handle_t handle;
    uint8_t M[] = {1, 2, 3};
    keymaster_blob_t Mblob = {M, 3};
    const uint8_t S[] = {
        0x82, 0x8a, 0x31, 0xa0, 0xc7, 0x1f, 0x87, 0x80,
        0xd7, 0xf3, 0x84, 0x47, 0x4b, 0x42, 0x44, 0xc8,
        0x0e, 0x0e, 0x2e, 0xed, 0xe5, 0xf7, 0x07, 0x78,
        0x80, 0x6f, 0x55, 0x42, 0x34, 0xf9, 0xa1, 0x9b,
        0x00, 0xb3, 0xcb, 0x21, 0x9b, 0x2a, 0x7d, 0xd2,
        0x7e, 0x8a, 0xbf, 0x28, 0x8a, 0x06, 0x71, 0xe2,
        0x5e, 0x98, 0x0e, 0x5a, 0x37, 0x1b, 0xcc, 0x4e,
        0x69, 0x4b, 0x0b, 0xf9, 0x32, 0xac, 0x25, 0xc1,
        0x63, 0xb4, 0xe0, 0x90, 0x60, 0x2a, 0xad, 0x30,
        0x56, 0x8a, 0x15, 0x2a, 0xbb, 0x39, 0x0c, 0x1b,
        0x6f, 0x7f, 0xa1, 0x69, 0xf4, 0x7b, 0xeb, 0xca,
        0x56, 0x7d, 0xd1, 0x0c, 0x32, 0xd2, 0x1a, 0xf6,
        0x26, 0xce, 0xc7, 0x86, 0xac, 0xbd, 0x8c, 0x60,
        0xa1, 0xcc, 0x37, 0x66, 0x74, 0x30, 0x64, 0xf0,
        0x7d, 0x9d, 0x42, 0xcc, 0xbb, 0xb2, 0x17, 0x9c,
        0x92, 0xc9, 0xf1, 0x8b, 0x8e, 0x85, 0x2c, 0xcb};
    keymaster_blob_t Sblob = {S, sizeof(S)};
    uint8_t wrappedKeyData[1115];
    keymaster_blob_t WKDblob = {wrappedKeyData, 1115};
    const uint8_t KeyDescription[] = {
        0x30, 0x2B, // SEQUENCE, length 43
            0x02, 0x01, 0x01, // INTEGER, length 1, 1 = KM_KEY_FORMAT_PKCS8
            0x30, 0x26, // SEQUENCE, length 38 (keyParams AuthorizationList)
                0xA1, 0x05, // explicit tag 1 (KM_TAG_PURPOSE), length 5
                    0x31, 0x03, // SET, length 3
                        0x02, 0x01, 0x03, // INTEGER, length 1, 3 = KM_PURPOSE_VERIFY
                0xA2, 0x03, // explicit tag 2 (KM_TAG_ALGORITHM), length 4
                    0x02, 0x01, 0x01, // INTEGER, length 1, 1 = KM_ALGORITHM_RSA
                0xA3, 0x04, // explicit tag 3 (KM_TAG_KEY_SIZE), length 4
                    0x02, 0x02, 0x04, 0x00, // INTEGER, length 2, 1024
                0xA5, 0x05, // explicit tag 5 (KM_TAG_DIGEST), length 5
                    0x31, 0x03, // SET, length 3
                        0x02, 0x01, 0x03, // INTEGER, length 1, 3 = KM_DIGEST_SHA_2_224
                0xA6, 0x05, // explicit tag 6 (KM_TAG_PADDING), length 5
                    0x31, 0x03, // SET, length 3
                        0x02, 0x01, 0x05, // INTEGER, length 1, 5 = KM_PAD_RSA_PKCS1_1_5_SIGN
                0xBF, 0x83, 0x77, 0x02, // explicit tag 503 (KM_TAG_NO_AUTH_REQUIRED), length 2
                    0x05, 0x00, // NULL, length 0
    };
    const uint8_t der_ek[] = {0x04, 0x82, 0x02, 0x7b, // OCTET STRING, length 635
        0xc7, 0x64, 0x92, 0xd9, 0xf7, 0x41, 0x80, 0x6d,
        0x39, 0x03, 0x06, 0x78, 0xa6, 0xaa, 0x6a, 0x8f,
        0xe4, 0xfa, 0x1e, 0xc8, 0x1e, 0x72, 0xdf, 0xca,
        0x56, 0xcc, 0xeb, 0x4b, 0x88, 0x44, 0xdd, 0xe2,
        0xbc, 0x62, 0xf4, 0x4f, 0x84, 0xc2, 0x73, 0x9b,
        0x90, 0x59, 0xfa, 0xaa, 0x14, 0xf9, 0x1a, 0x65,
        0x3b, 0x6f, 0xd2, 0x24, 0x05, 0x92, 0xc6, 0x4a,
        0x01, 0x69, 0xe0, 0xc0, 0x8d, 0xe1, 0x16, 0x36,
        0x1e, 0xf5, 0x5c, 0x2f, 0x04, 0x20, 0x12, 0x39,
        0x20, 0x2d, 0x9a, 0x8c, 0xae, 0xb5, 0x8d, 0xf3,
        0x0b, 0xda, 0xe1, 0x05, 0x98, 0x60, 0x97, 0x1a,
        0x7b, 0x1f, 0x28, 0xe2, 0x86, 0xc1, 0xa1, 0xa0,
        0x7a, 0x5e, 0x54, 0xd9, 0xbb, 0x14, 0x5e, 0xb7,
        0x01, 0x42, 0xd7, 0xab, 0x19, 0x9f, 0x21, 0xe3,
        0xe2, 0x6d, 0x66, 0xe1, 0xd6, 0xec, 0xa6, 0xdd,
        0xfb, 0xf8, 0xd5, 0xef, 0x7b, 0xc3, 0xc3, 0x40,
        0x29, 0xc5, 0x95, 0xd8, 0x27, 0xc0, 0x13, 0xbb,
        0x5e, 0xcc, 0x79, 0x5f, 0xac, 0x0f, 0xf0, 0x4b,
        0x7b, 0xb9, 0xeb, 0x04, 0x75, 0x25, 0x6d, 0xbd,
        0xe2, 0xf6, 0x80, 0x12, 0x1b, 0xb3, 0x20, 0x27,
        0x63, 0xd2, 0x73, 0xfd, 0x25, 0x8d, 0xf5, 0xa3,
        0xc4, 0x28, 0xc1, 0xb4, 0x04, 0x2c, 0x7e, 0x05,
        0xd1, 0xa2, 0x3c, 0xbb, 0xb2, 0xff, 0xd2, 0x40,
        0x9c, 0x5f, 0xd9, 0x70, 0x1a, 0x2c, 0x4e, 0xe9,
        0xc5, 0xfb, 0x70, 0x59, 0xb3, 0xf2, 0xbc, 0x09,
        0x45, 0xfd, 0x12, 0x3d, 0xf9, 0x77, 0x8e, 0xd3,
        0x79, 0x3f, 0x16, 0x9d, 0x09, 0x73, 0x5c, 0xe7,
        0x9e, 0x96, 0x76, 0x45, 0xf0, 0xf1, 0xb9, 0x50,
        0x11, 0xb1, 0x3b, 0x30, 0x1d, 0x79, 0x17, 0xa5,
        0xf6, 0xa0, 0xf2, 0xf0, 0x23, 0xc9, 0x4a, 0xc1,
        0xe7, 0xee, 0x6f, 0x7d, 0x21, 0xb4, 0xee, 0xcf,
        0xd4, 0xa2, 0xe3, 0x5a, 0xe1, 0xdc, 0xc1, 0xfe,
        0xca, 0x4f, 0xa6, 0x2a, 0x5a, 0x88, 0x0e, 0x7a,
        0xe9, 0x37, 0xa8, 0x2f, 0x8c, 0x43, 0xea, 0x79,
        0x5a, 0xbe, 0x46, 0xf2, 0x32, 0x9c, 0xe8, 0xc0,
        0x8a, 0x76, 0xfb, 0x67, 0xf4, 0x9e, 0x6a, 0xc4,
        0x82, 0x06, 0x63, 0x1d, 0xfc, 0x7e, 0x8c, 0x08,
        0x0f, 0x7d, 0x58, 0x97, 0x84, 0x60, 0x99, 0x2a,
        0x18, 0x90, 0x31, 0xaf, 0x15, 0x34, 0x37, 0x06,
        0x13, 0xac, 0xb0, 0x4e, 0xbf, 0xe0, 0xd2, 0xca,
        0xff, 0x25, 0x68, 0xf6, 0x9a, 0xd5, 0xde, 0x81,
        0xda, 0xf6, 0x22, 0x8e, 0x62, 0x35, 0x91, 0xbf,
        0xe6, 0x36, 0xff, 0x9e, 0x59, 0xd4, 0xda, 0x58,
        0xdc, 0x2c, 0x68, 0xa1, 0xc0, 0xc6, 0x4d, 0x78,
        0xc2, 0xe3, 0x46, 0x74, 0xb1, 0x03, 0x2e, 0x63,
        0xb1, 0x49, 0xf5, 0x12, 0x2f, 0xf7, 0x1a, 0x3a,
        0xbe, 0x76, 0xb3, 0x6e, 0xd0, 0x8f, 0xe5, 0x2d,
        0xde, 0x15, 0x5f, 0x25, 0x39, 0x32, 0x53, 0xaf,
        0x24, 0x49, 0xa8, 0xdb, 0xb5, 0x74, 0x44, 0x81,
        0x46, 0xec, 0x40, 0x78, 0x98, 0xd9, 0x5a, 0x6c,
        0x79, 0x4f, 0x48, 0x1c, 0x62, 0xe3, 0x92, 0x56,
        0xd3, 0xbf, 0x75, 0x69, 0xf5, 0x5d, 0xf8, 0xc1,
        0xf4, 0x4b, 0x35, 0xc4, 0x79, 0x86, 0xf8, 0xb6,
        0x7f, 0x9c, 0xd0, 0x6e, 0x97, 0x1a, 0x9f, 0x26,
        0x1a, 0x45, 0x05, 0xe6, 0xfd, 0xf8, 0x1b, 0x6e,
        0x5b, 0xfe, 0x90, 0x00, 0x7c, 0x3d, 0x92, 0x7d,
        0x0e, 0x6a, 0xf6, 0x1a, 0x57, 0x88, 0x67, 0x41,
        0x8a, 0x27, 0xbe, 0x2f, 0xaa, 0x0a, 0x58, 0x40,
        0x31, 0x99, 0x6d, 0x54, 0x2a, 0x7d, 0x2c, 0x37,
        0xa3, 0x20, 0x14, 0x70, 0x71, 0x15, 0xd6, 0xc4,
        0xc0, 0x93, 0x11, 0x18, 0xfc, 0x9d, 0x70, 0x2b,
        0xb3, 0xa1, 0xda, 0xed, 0x72, 0xd8, 0x1b, 0x30,
        0xfb, 0x98, 0x8e, 0x26, 0x85, 0xda, 0x76, 0xf1,
        0x03, 0xf7, 0x5e, 0xd3, 0x64, 0x07, 0xb8, 0x6b,
        0x8c, 0xa9, 0x76, 0x53, 0x31, 0xea, 0x0b, 0xbb,
        0xfd, 0x43, 0x26, 0x69, 0xbd, 0xcd, 0xb6, 0x8b,
        0x14, 0x6b, 0x0f, 0xee, 0x0f, 0xca, 0xd7, 0xc1,
        0x26, 0x7f, 0xca, 0x03, 0xfa, 0x4c, 0x98, 0x99,
        0x44, 0x5e, 0x40, 0xce, 0x48, 0x74, 0x07, 0xeb,
        0x12, 0x8c, 0xc6, 0xa0, 0x45, 0x07, 0x5d, 0x8a,
        0x05, 0xa7, 0x7a, 0xbc, 0x53, 0x75, 0x26, 0x10,
        0xd5, 0x08, 0x91, 0x17, 0xd2, 0x1d, 0x68, 0x84,
        0xde, 0x03, 0xda, 0x22, 0xe1, 0xaa, 0xfe, 0x64,
        0xee, 0xdf, 0x52, 0x3b, 0x47, 0x43, 0xe1, 0xa4,
        0x44, 0x71, 0xb7, 0x18, 0x08, 0x6a, 0x65, 0x4e,
        0xb8, 0x5f, 0xf5, 0x20, 0x18, 0x92, 0x76, 0x53,
        0x1b, 0xa6, 0xc5, 0x04, 0xb6, 0xb4, 0x26, 0x00,
        0x23, 0x0d, 0x53, 0xef, 0xf4, 0x96, 0x3b, 0x49,
        0x25, 0x64, 0x8e, 0x8f, 0x84, 0xb5, 0x3e, 0xce,
        0xa4, 0xab, 0xba};
    const uint8_t der_tag[] = {0x04, 0x10, // OCTET STRING, length 16
        0x57, 0xb7, 0x27, 0x5f, 0xe4, 0xe1, 0x48, 0xfa,
        0x65, 0x77, 0xb9, 0xf2, 0x04, 0x77, 0x77, 0x7c};

    /* Construct wrappedKeyData */
    p = wrappedKeyData;
    *p++ = 0x30; *p++ = 0x82; *p++ = 0x04; *p++ = 0x57; // SEQUENCE, length 1111
    memcpy(p, der_0, 3); p += 3; //  INTEGER, 0 (version)
    *p++ = 0x04; *p++ = 0x82; *p++ = 1; *p++ = 128; // OCTET STRING, length 384 (encryptedTransportKey)
    memcpy(p, ETK, 384); p += 384;
    memcpy(p, der_iv, 18); p += 18;
    memcpy(p, KeyDescription, 45); p += 45;
    memcpy(p, der_ek, 639); p += 639;
    memcpy(p, der_tag, 18); p += 18;

    /* Securely import the key */
    memset(&imported_key_characteristics, 0, sizeof(keymaster_key_characteristics_t));
    param[0].tag = KM_TAG_PADDING;
    param[0].enumerated = KM_PAD_RSA_OAEP;
    param[1].tag = KM_TAG_DIGEST;
    param[1].enumerated = KM_DIGEST_SHA_2_256;
    paramset.length = 2;
    CHECK_RESULT_OK(impl->import_wrapped_key(
        &WKDblob, wrapping_key_blob, MK, &paramset, 0, 0,
        &Kblob, &imported_key_characteristics));

    /* Use the key */
    param[0].tag = KM_TAG_ALGORITHM;
    param[0].enumerated = KM_ALGORITHM_RSA;
    param[1].tag = KM_TAG_DIGEST;
    param[1].enumerated = KM_DIGEST_SHA_2_224;
    param[2].tag = KM_TAG_PADDING;
    param[2].enumerated = KM_PAD_RSA_PKCS1_1_5_SIGN;
    paramset.length = 3;
    CHECK_RESULT_OK(impl->begin(
        KM_PURPOSE_VERIFY, &Kblob, &paramset, NULL, NULL, &handle));
    CHECK_RESULT_OK(impl->finish(
        handle, NULL, &Mblob, &Sblob, NULL, NULL, NULL, NULL));

end:
    km_free_key_blob(&Kblob);
    keymaster_free_characteristics(&imported_key_characteristics);
    return res;
}

keymaster_error_t test_km_import(
    TrustonicKeymaster4DeviceImpl *impl)
{
    keymaster_error_t res = KM_ERROR_OK;
    keymaster_blob_t ETKblob = {NULL, 0};
    keymaster_key_param_t param[5];
    keymaster_key_param_set_t paramset = {param, 0};
    keymaster_key_characteristics_t wrapping_key_characteristics;
    keymaster_blob_t Xblob = {X, 32};
    keymaster_operation_handle_t handle;

    /* 1. Import (insecurely) the RSA wrapping key. */
    memset(&wrapping_key_characteristics, 0, sizeof(keymaster_key_characteristics_t));
    const uint8_t rsa_3k_pk8[] = {
        0x30, 0x82, 0x06, 0xfd, 0x02, 0x01, 0x00, 0x30,
        0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
        0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82,
        0x06, 0xe7, 0x30, 0x82, 0x06, 0xe3, 0x02, 0x01,
        0x00, 0x02, 0x82, 0x01, 0x81, 0x00, 0x9a, 0x5d,
        0x1f, 0x8a, 0x75, 0xe9, 0x06, 0x97, 0xf3, 0xcb,
        0xde, 0x0b, 0x0d, 0xe8, 0x2a, 0x1a, 0x7f, 0x66,
        0x34, 0x2c, 0x01, 0x53, 0xc1, 0xbe, 0xb4, 0x0b,
        0x83, 0xcd, 0xb1, 0x24, 0x4a, 0x1c, 0xea, 0x5e,
        0xe9, 0x59, 0xc5, 0x9e, 0xb1, 0xd1, 0x85, 0x4b,
        0xb0, 0x09, 0x7e, 0x35, 0x37, 0xf2, 0x62, 0xfd,
        0xa3, 0x79, 0x1f, 0xdd, 0x49, 0x76, 0x15, 0xfc,
        0x40, 0x7d, 0xcb, 0x03, 0x37, 0xe4, 0xe4, 0x62,
        0xc0, 0x56, 0x49, 0x17, 0xa4, 0x9d, 0xa6, 0x29,
        0xd7, 0x03, 0x56, 0x40, 0x2d, 0x8b, 0x23, 0xed,
        0xcb, 0xe5, 0xbf, 0x9e, 0x14, 0xcc, 0xf0, 0x24,
        0x91, 0x64, 0x34, 0xfd, 0x98, 0x7e, 0xd6, 0x98,
        0x87, 0xea, 0x1d, 0x49, 0xef, 0x5a, 0xf0, 0x6e,
        0xe0, 0x85, 0x47, 0xdb, 0x1e, 0x6a, 0xd8, 0xce,
        0x87, 0x8f, 0x02, 0x80, 0x62, 0x44, 0x5f, 0x55,
        0xdf, 0x90, 0x30, 0x8d, 0xd0, 0xb9, 0x76, 0x83,
        0x01, 0x06, 0x68, 0x62, 0xac, 0x55, 0xdc, 0xfe,
        0x2f, 0xdb, 0x4f, 0x21, 0x44, 0x8f, 0x69, 0xc0,
        0xd0, 0x50, 0x01, 0x32, 0x8a, 0x3d, 0x64, 0x94,
        0x30, 0x09, 0x76, 0x91, 0xcb, 0x5d, 0x50, 0x33,
        0x21, 0xfa, 0x75, 0xd2, 0x09, 0xe9, 0xd5, 0xfb,
        0xb5, 0xce, 0x23, 0xfd, 0x02, 0x15, 0x24, 0xc3,
        0x7d, 0xf5, 0xf2, 0xfa, 0x33, 0x5c, 0xdd, 0x54,
        0x01, 0x51, 0xf4, 0x9a, 0xb4, 0x96, 0x7f, 0xcd,
        0x7a, 0xaa, 0xb5, 0xe5, 0xb3, 0x85, 0x8d, 0xbc,
        0xe2, 0x11, 0x0d, 0x4e, 0x44, 0x93, 0xfe, 0xed,
        0xda, 0xe4, 0xc3, 0xd8, 0x0c, 0x16, 0x81, 0xbd,
        0xae, 0x14, 0x97, 0xbe, 0x74, 0xc2, 0xea, 0xec,
        0x63, 0x09, 0x0a, 0x49, 0x1f, 0xdc, 0xed, 0x01,
        0x98, 0x1a, 0x2d, 0xc2, 0x02, 0x92, 0x8d, 0x97,
        0xca, 0x08, 0x39, 0x60, 0x76, 0x5e, 0x16, 0xd5,
        0x9e, 0x56, 0x2d, 0x70, 0xea, 0x60, 0xdb, 0x0b,
        0xd2, 0xac, 0xd6, 0x59, 0x66, 0xf3, 0x3f, 0x40,
        0x91, 0x41, 0x47, 0xe4, 0x7b, 0xbb, 0x44, 0x02,
        0x26, 0x67, 0x03, 0x7e, 0x84, 0x1f, 0xc4, 0x7c,
        0xe9, 0x03, 0xb8, 0x16, 0x73, 0x4a, 0x01, 0xc6,
        0xb5, 0xa0, 0x13, 0x3e, 0xdc, 0xdf, 0xe9, 0x43,
        0x51, 0x90, 0xa5, 0x04, 0xaf, 0x72, 0xcc, 0xbd,
        0x7b, 0xa3, 0xbb, 0xbe, 0x93, 0xe4, 0x5c, 0xee,
        0x5a, 0xfc, 0x18, 0x93, 0x24, 0x00, 0xb1, 0x6d,
        0x01, 0xdb, 0x4f, 0x2d, 0x10, 0xd5, 0xca, 0x54,
        0x3f, 0xe5, 0x0d, 0xd1, 0x7a, 0xc2, 0x73, 0x1e,
        0x17, 0xbe, 0x4b, 0x85, 0x02, 0x38, 0xbd, 0xf8,
        0x78, 0x96, 0xe9, 0x78, 0x98, 0x49, 0x78, 0x3b,
        0x0b, 0x12, 0xc5, 0x15, 0x13, 0xfe, 0x88, 0x5b,
        0xe7, 0x88, 0x0e, 0xbb, 0xe9, 0x07, 0xca, 0x1b,
        0xf0, 0x68, 0x6e, 0x43, 0xee, 0xfe, 0x1e, 0x82,
        0x37, 0x9d, 0x76, 0xea, 0xaa, 0x57, 0x02, 0x03,
        0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x80, 0x2c,
        0xbe, 0xb3, 0xa6, 0xda, 0x18, 0xeb, 0x0d, 0x5e,
        0xe1, 0x08, 0x83, 0x21, 0xcb, 0xdb, 0x70, 0x84,
        0xdf, 0x66, 0x5e, 0x1f, 0x20, 0x5d, 0x37, 0xdf,
        0x4e, 0xbb, 0x2d, 0x03, 0x9d, 0x26, 0x52, 0x8d,
        0x69, 0x67, 0xb0, 0xdb, 0x04, 0xee, 0x3c, 0x72,
        0xac, 0x06, 0xe2, 0x29, 0x90, 0x59, 0xa0, 0x4c,
        0x2b, 0x83, 0x98, 0x57, 0xb1, 0x38, 0x5b, 0x1f,
        0x72, 0x58, 0x6b, 0x5e, 0x4e, 0x97, 0x84, 0x24,
        0xe3, 0xaf, 0x27, 0x13, 0xd6, 0xe3, 0xa3, 0xc3,
        0x07, 0xbb, 0xc8, 0xbe, 0xd6, 0xa9, 0x9c, 0xfc,
        0x94, 0x30, 0x97, 0x6f, 0x5c, 0xee, 0x60, 0x9d,
        0x77, 0xac, 0x21, 0x64, 0xee, 0xe1, 0xa6, 0x5a,
        0xa4, 0x2a, 0x39, 0xa5, 0xb5, 0xc9, 0xc9, 0x0d,
        0x8a, 0xc6, 0x50, 0x3c, 0x0c, 0xfb, 0x1b, 0x33,
        0xaf, 0x62, 0x42, 0x05, 0x12, 0x9b, 0xe9, 0x7f,
        0xcd, 0x0f, 0x99, 0xe7, 0x49, 0x24, 0x68, 0xae,
        0x3e, 0xb9, 0x2c, 0x57, 0x53, 0xca, 0xea, 0xb4,
        0xbd, 0x85, 0xb7, 0xc7, 0x8f, 0x38, 0x25, 0x6e,
        0x1d, 0x33, 0x05, 0x0d, 0xe3, 0xcd, 0x88, 0x90,
        0x40, 0x18, 0x50, 0x95, 0xeb, 0x1b, 0x0c, 0xf8,
        0x73, 0x69, 0xf5, 0x04, 0xf4, 0x16, 0x65, 0x8e,
        0xde, 0x80, 0xcb, 0xb9, 0x48, 0xdc, 0xb2, 0xae,
        0x4e, 0x70, 0x93, 0xbb, 0x93, 0xe5, 0x11, 0x95,
        0x22, 0x85, 0xa3, 0x71, 0x08, 0xeb, 0x31, 0x85,
        0xa4, 0x92, 0x21, 0xfd, 0xe8, 0x9e, 0x18, 0xe9,
        0x5c, 0xba, 0x1c, 0xb4, 0xec, 0x09, 0x81, 0x4f,
        0x36, 0x8f, 0x8d, 0x68, 0xa1, 0xfc, 0x79, 0xb6,
        0x69, 0x26, 0x23, 0x5b, 0x0d, 0x9e, 0x5e, 0xde,
        0xbc, 0x1a, 0x01, 0x2d, 0xd5, 0xd5, 0x2f, 0xa4,
        0xa1, 0xe5, 0x5f, 0xe9, 0xef, 0xd4, 0x28, 0x57,
        0x98, 0x36, 0xc3, 0x8f, 0x4f, 0x0a, 0x3f, 0x6b,
        0x6a, 0x04, 0xd4, 0xf5, 0xc3, 0x89, 0xfc, 0x6b,
        0x91, 0xff, 0xcb, 0xc2, 0x05, 0xc0, 0xf0, 0x20,
        0x20, 0x22, 0x5f, 0x23, 0x1f, 0x8c, 0xf7, 0x6b,
        0x8b, 0x6f, 0xb4, 0xe2, 0x1f, 0x64, 0x49, 0xd8,
        0x34, 0xfa, 0x03, 0xe0, 0x0d, 0xda, 0x7c, 0x7a,
        0x82, 0x64, 0xfb, 0xf0, 0x1a, 0xb6, 0xd8, 0x52,
        0x71, 0x26, 0xd1, 0xd6, 0xd2, 0x26, 0xd7, 0x8c,
        0xb0, 0x81, 0x8a, 0x65, 0x08, 0xa5, 0xbc, 0x21,
        0xb3, 0x1a, 0x58, 0x44, 0xaf, 0xa1, 0xf3, 0x98,
        0xc2, 0x70, 0x95, 0x28, 0x67, 0xb5, 0xd4, 0x6b,
        0x74, 0xed, 0x62, 0xd4, 0x8a, 0x9e, 0xc2, 0x86,
        0x6c, 0xd2, 0xd2, 0xfe, 0x7e, 0xdd, 0x9e, 0xa1,
        0x47, 0x46, 0x93, 0x0e, 0x2f, 0xfd, 0xa7, 0x0f,
        0xea, 0xf6, 0x73, 0x20, 0xe5, 0x42, 0xd6, 0xdf,
        0xf9, 0xaf, 0x4a, 0x70, 0x76, 0x34, 0x73, 0xea,
        0xae, 0x46, 0xca, 0xb6, 0x04, 0x16, 0x47, 0x40,
        0x34, 0x7d, 0xa8, 0x46, 0xc0, 0x77, 0x09, 0x02,
        0x81, 0xc1, 0x00, 0xca, 0x5a, 0x6d, 0xae, 0xe2,
        0x18, 0x3d, 0x65, 0x18, 0xc9, 0x9c, 0xce, 0x70,
        0x02, 0x7f, 0xa9, 0xf5, 0x3e, 0x03, 0x27, 0x11,
        0xe1, 0x74, 0x63, 0x38, 0x45, 0x5a, 0x5f, 0x83,
        0x97, 0xca, 0x4c, 0xa6, 0x5e, 0xfb, 0x95, 0x0c,
        0x06, 0x4b, 0x9d, 0xbe, 0x00, 0x99, 0x38, 0x16,
        0x4a, 0x49, 0xac, 0x04, 0x9d, 0xb3, 0x28, 0x52,
        0x50, 0x01, 0x0f, 0x93, 0x21, 0x72, 0xfe, 0x2f,
        0xde, 0x1d, 0x6f, 0xc9, 0x64, 0x99, 0x4a, 0xbf,
        0x95, 0x16, 0x54, 0xdc, 0x2d, 0x0b, 0x5a, 0xbe,
        0x2e, 0xe8, 0x59, 0x69, 0x39, 0x4f, 0xda, 0x07,
        0x38, 0xfc, 0x38, 0xaf, 0xd7, 0x75, 0xaa, 0x7c,
        0x1c, 0x0c, 0x93, 0xea, 0x86, 0x08, 0x62, 0xff,
        0x16, 0xf7, 0xa1, 0x2d, 0x41, 0x88, 0x18, 0x95,
        0xdc, 0x87, 0x7e, 0xfe, 0x08, 0xe6, 0x3e, 0xca,
        0xf5, 0x8c, 0x88, 0xca, 0x1e, 0x78, 0x9b, 0xe3,
        0x29, 0xa5, 0x6d, 0x3d, 0xfd, 0x0d, 0x6a, 0xb3,
        0x05, 0xc6, 0x9b, 0xe0, 0xa6, 0x1a, 0x21, 0x8e,
        0x43, 0x42, 0x3b, 0x33, 0x04, 0xf9, 0xeb, 0x1a,
        0xc8, 0x12, 0xe0, 0x79, 0xdc, 0x2b, 0x1b, 0x41,
        0x97, 0x23, 0x03, 0x4d, 0x4c, 0x20, 0x6a, 0x23,
        0x39, 0x7d, 0x39, 0xef, 0x01, 0x82, 0x7d, 0xae,
        0x8a, 0x28, 0x52, 0x1b, 0xb1, 0x1c, 0x25, 0x00,
        0xc4, 0xe1, 0xf9, 0x68, 0xdd, 0x8a, 0x08, 0x73,
        0x1c, 0xe0, 0x65, 0x02, 0x81, 0xc1, 0x00, 0xc3,
        0x49, 0xae, 0xd8, 0xfa, 0x74, 0xdb, 0x9e, 0x95,
        0x91, 0x0d, 0x6c, 0x90, 0x6e, 0x16, 0x19, 0xef,
        0x46, 0xaa, 0xcc, 0xb0, 0xf5, 0xf1, 0xbc, 0x7e,
        0x14, 0xda, 0xc8, 0x36, 0x37, 0xde, 0x67, 0x97,
        0x59, 0x1f, 0x19, 0x01, 0xb5, 0xf0, 0x6e, 0x8a,
        0x41, 0x3c, 0x17, 0xc6, 0x6d, 0x77, 0x45, 0x61,
        0x94, 0x61, 0xf0, 0x1c, 0xee, 0xb8, 0x84, 0x92,
        0x0c, 0xb3, 0xbb, 0x91, 0x99, 0x37, 0xe9, 0xc8,
        0xd6, 0x77, 0x25, 0x65, 0x75, 0x6d, 0x94, 0x70,
        0xe6, 0x21, 0x3b, 0x89, 0x63, 0xdb, 0x70, 0x14,
        0x04, 0xaa, 0xd4, 0xb4, 0xbd, 0x00, 0x7b, 0x25,
        0x6d, 0x14, 0x09, 0x41, 0x21, 0x29, 0xf1, 0xc3,
        0x04, 0x5d, 0xa5, 0x5d, 0xe9, 0xe4, 0xda, 0x90,
        0x98, 0x52, 0x5e, 0xb0, 0x68, 0x96, 0xa5, 0x8f,
        0x49, 0x98, 0x93, 0x70, 0x17, 0x37, 0xf0, 0xe4,
        0xa2, 0x4e, 0xf8, 0xed, 0xfa, 0x67, 0x9c, 0x2f,
        0xe8, 0xd7, 0x7c, 0x5c, 0x6d, 0x9a, 0x83, 0x6b,
        0x64, 0xcd, 0x00, 0x73, 0x49, 0x57, 0x85, 0x4e,
        0xb0, 0x0e, 0x43, 0x4a, 0x96, 0x26, 0x66, 0x78,
        0x8f, 0x47, 0xc0, 0x58, 0x5f, 0x6e, 0xa1, 0x3a,
        0xc4, 0x5a, 0xe5, 0xc4, 0x71, 0xe6, 0xd6, 0xe3,
        0x61, 0xb5, 0x5e, 0x40, 0xa6, 0xfa, 0xe2, 0x15,
        0x12, 0xcc, 0x7c, 0xee, 0x7d, 0x4e, 0xfa, 0x5a,
        0x85, 0xf7, 0xf1, 0xdb, 0x91, 0x8e, 0x0b, 0x02,
        0x81, 0xc1, 0x00, 0xc3, 0xb3, 0xd7, 0x76, 0x96,
        0xd6, 0x28, 0xb2, 0x98, 0xd9, 0x8c, 0x5d, 0x1f,
        0x79, 0x5b, 0x2c, 0xed, 0xb1, 0x8e, 0xec, 0xff,
        0x5f, 0x13, 0xe8, 0x4d, 0xe8, 0xcd, 0x31, 0xa9,
        0x1c, 0x69, 0x9b, 0xde, 0x1f, 0xe8, 0xa3, 0x4a,
        0xe0, 0xdf, 0xca, 0xec, 0x92, 0xb9, 0x9c, 0xc3,
        0xfa, 0x0e, 0xec, 0x5d, 0xfe, 0x82, 0xe2, 0x11,
        0x51, 0xac, 0xe4, 0xfa, 0x40, 0x14, 0x6d, 0xff,
        0xaf, 0x8a, 0xba, 0xad, 0x85, 0x2c, 0xb8, 0x5d,
        0x37, 0x7c, 0x44, 0x90, 0x38, 0xc4, 0x4d, 0x7b,
        0xb7, 0xf4, 0x21, 0x5d, 0x21, 0xff, 0xb7, 0x76,
        0xda, 0xc7, 0x1c, 0xaf, 0xfb, 0xea, 0xa1, 0xfa,
        0xac, 0x4a, 0x01, 0xd8, 0x84, 0xce, 0xa1, 0xa7,
        0xe1, 0xf7, 0x96, 0x9b, 0x25, 0x50, 0xd1, 0xae,
        0x46, 0x7d, 0x88, 0xf5, 0x79, 0x77, 0xec, 0xec,
        0xef, 0xb4, 0x7e, 0x2b, 0x34, 0x73, 0x23, 0x18,
        0xfd, 0x13, 0x2f, 0xe7, 0x0e, 0xd1, 0x26, 0x0b,
        0x84, 0x1f, 0x84, 0x6c, 0x2d, 0x59, 0x02, 0x71,
        0x0b, 0x5d, 0x87, 0xd1, 0x9d, 0x13, 0x74, 0x2d,
        0x0f, 0xa9, 0x2a, 0x0e, 0xd1, 0x3f, 0xa3, 0x79,
        0xb9, 0x09, 0x34, 0xcd, 0x52, 0x3d, 0xdb, 0x48,
        0xbb, 0xf5, 0xff, 0xcc, 0xc6, 0xa2, 0x04, 0x99,
        0x84, 0xa6, 0xe0, 0x5a, 0x45, 0xdd, 0x59, 0x70,
        0x37, 0xf9, 0xf0, 0xf4, 0x59, 0xa6, 0x80, 0xeb,
        0x8b, 0xd6, 0xfd, 0x02, 0x81, 0xc0, 0x6b, 0xd3,
        0x0e, 0x18, 0x3d, 0x49, 0x32, 0x4d, 0x80, 0x35,
        0x63, 0x9d, 0x12, 0xad, 0xc5, 0xc4, 0x32, 0x09,
        0xe9, 0x9a, 0x35, 0x06, 0xc6, 0x9f, 0x15, 0x5a,
        0x3c, 0x66, 0x19, 0x11, 0x85, 0xd9, 0xda, 0x85,
        0xd9, 0x96, 0xbc, 0x0c, 0x11, 0xa1, 0x66, 0xf2,
        0x97, 0xd4, 0x64, 0xb9, 0xe2, 0x05, 0xcb, 0xd7,
        0xda, 0xaf, 0x71, 0xba, 0x18, 0xe5, 0x11, 0xa2,
        0xb3, 0xc6, 0x17, 0xa0, 0xea, 0x6f, 0x49, 0x75,
        0xa8, 0xb9, 0x5c, 0x28, 0x97, 0x05, 0x43, 0xc4,
        0xbc, 0x8a, 0x9b, 0xd4, 0x27, 0xbf, 0xdd, 0x3d,
        0xaa, 0x78, 0xe1, 0x06, 0x0d, 0xf2, 0xf0, 0x7a,
        0x26, 0x7a, 0xe9, 0x9b, 0xff, 0x05, 0xbe, 0x70,
        0x75, 0xa8, 0x2d, 0x8f, 0x4b, 0xcd, 0xa5, 0xd2,
        0x84, 0x80, 0x45, 0x94, 0xa9, 0xc0, 0xe5, 0xb9,
        0x73, 0xe5, 0xcc, 0x18, 0xf5, 0xc9, 0x2a, 0xe3,
        0xb7, 0x08, 0xd8, 0x94, 0xce, 0x8a, 0x3d, 0x25,
        0xa9, 0x7c, 0xbf, 0xa7, 0xc0, 0x8d, 0x59, 0x49,
        0x81, 0xab, 0x02, 0xfc, 0x76, 0xb7, 0x62, 0xf7,
        0xf0, 0x18, 0x15, 0x61, 0x8b, 0xf8, 0x3e, 0x0e,
        0x96, 0x46, 0x4c, 0x44, 0xfc, 0xd7, 0x46, 0x94,
        0x4d, 0xbf, 0xd9, 0x54, 0x2e, 0x69, 0x6d, 0x88,
        0x70, 0x54, 0x87, 0x0b, 0xeb, 0x2f, 0xd3, 0x04,
        0xdb, 0x25, 0x0b, 0xa4, 0xe2, 0x6b, 0x76, 0x79,
        0xcb, 0xa9, 0x9d, 0x5a, 0xe3, 0x7b, 0x02, 0x81,
        0xc0, 0x6c, 0x6a, 0xb9, 0x5d, 0xa7, 0xe5, 0x23,
        0xc4, 0x8d, 0x6d, 0x8f, 0x46, 0xfa, 0xea, 0x5a,
        0x2f, 0xd8, 0x90, 0xf9, 0xcc, 0x87, 0xac, 0xe1,
        0x66, 0xc7, 0x1c, 0x09, 0xf6, 0x34, 0x5f, 0xbb,
        0xa1, 0x5b, 0xf3, 0xc0, 0xa9, 0x68, 0xf8, 0x7d,
        0xfb, 0x43, 0x29, 0xe9, 0x6b, 0x0a, 0xce, 0x7a,
        0x1b, 0x0a, 0x29, 0x1f, 0x4d, 0x81, 0xaf, 0x9e,
        0xdc, 0x4c, 0xe7, 0xed, 0xe0, 0x18, 0x1a, 0x48,
        0xc1, 0x1d, 0x87, 0xf8, 0xef, 0x27, 0xdb, 0x5e,
        0x44, 0x19, 0x57, 0xce, 0xee, 0x49, 0x71, 0x64,
        0xef, 0x33, 0x72, 0xf1, 0xa8, 0x73, 0x68, 0xb6,
        0x94, 0x11, 0x4a, 0x1c, 0x7e, 0x9c, 0x83, 0xa2,
        0x29, 0x31, 0x01, 0x1f, 0x88, 0x48, 0xfe, 0x76,
        0x0d, 0x1f, 0x9c, 0xe3, 0xfe, 0x21, 0x85, 0x63,
        0xc9, 0x68, 0x2d, 0x29, 0x07, 0x51, 0x07, 0x40,
        0xbe, 0x75, 0x01, 0x16, 0x02, 0x7d, 0x6e, 0xab,
        0xe4, 0x8b, 0x7d, 0x48, 0xa4, 0x49, 0xc1, 0x87,
        0x21, 0x8f, 0xf8, 0x9f, 0x12, 0xe7, 0xe2, 0x4d,
        0x65, 0x71, 0x1c, 0x06, 0xab, 0x89, 0x66, 0x94,
        0x59, 0xd8, 0x74, 0xb2, 0xb4, 0x07, 0xb1, 0xd3,
        0x11, 0xfb, 0xa5, 0x7b, 0x6d, 0x42, 0x84, 0x17,
        0x39, 0x83, 0xf1, 0x4b, 0x37, 0x59, 0x17, 0x88,
        0xda, 0x72, 0x46, 0xcf, 0xea, 0x2f, 0x65, 0x2e,
        0x1d, 0xfa, 0x01, 0xfb, 0xf0, 0x70, 0xf2, 0xc7,
        0xa3};
    const keymaster_blob_t wrapping_key_data = {rsa_3k_pk8, sizeof(rsa_3k_pk8)};
    param[0].tag = KM_TAG_ALGORITHM;
    param[0].enumerated = KM_ALGORITHM_RSA;
    param[1].tag = KM_TAG_PADDING;
    param[1].enumerated = KM_PAD_RSA_OAEP;
    param[2].tag = KM_TAG_DIGEST;
    param[2].enumerated = KM_DIGEST_SHA_2_256;
    param[3].tag = KM_TAG_PURPOSE;
    param[3].enumerated = KM_PURPOSE_WRAP_KEY;
    param[4].tag = KM_TAG_NO_AUTH_REQUIRED;
    param[4].boolean = true;
    paramset.length = 5;
    keymaster_key_blob_t wrapping_key_blob = {0, 0};
    CHECK_RESULT_OK(impl->import_key(
        &paramset, KM_KEY_FORMAT_PKCS8, &wrapping_key_data, &wrapping_key_blob, &wrapping_key_characteristics));

    /* 2. Encrypt masked key with wrapping key --> ETKblob */
    param[0].tag = KM_TAG_ALGORITHM;
    param[0].enumerated = KM_ALGORITHM_RSA;
    param[1].tag = KM_TAG_PADDING;
    param[1].enumerated = KM_PAD_RSA_OAEP;
    param[2].tag = KM_TAG_DIGEST;
    param[2].enumerated = KM_DIGEST_SHA_2_256;
    param[3].tag = KM_TAG_PURPOSE;
    param[3].enumerated = KM_PURPOSE_ENCRYPT;
    paramset.length = 4;
    CHECK_RESULT_OK(impl->begin(
        KM_PURPOSE_ENCRYPT, &wrapping_key_blob, &paramset, NULL, NULL,  &handle));
    size_t message_consumed;
    CHECK_RESULT_OK(impl->update(
        handle, NULL, &Xblob, NULL, NULL, &message_consumed, NULL, NULL));
    CHECK_TRUE(message_consumed == 32);
    CHECK_RESULT_OK(impl->finish(
        handle, NULL, NULL, NULL, NULL, NULL, NULL, &ETKblob));
    CHECK_TRUE(ETKblob.data_length == 384);

    /* 3. Import and use a symmetric key */
    CHECK_RESULT_OK(test_km_import_hmac(impl,
        ETKblob.data, &wrapping_key_blob));

    /* 4. Import and use an EC key */
    CHECK_RESULT_OK(test_km_import_ec(impl,
        ETKblob.data, &wrapping_key_blob));

    /* 5. Import and use an RSA key */
    CHECK_RESULT_OK(test_km_import_rsa(impl,
        ETKblob.data, &wrapping_key_blob));

end:
    keymaster_free_characteristics(&wrapping_key_characteristics);
    km_free_blob(&ETKblob);
    return res;
}
