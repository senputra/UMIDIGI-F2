#ifndef ALIPAY_OEM_H
#define ALIPAY_OEM_H

#include "tee_internal_api.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Retrieve unique device ID, the minimum length of returned device ID
 * should be 40 bytes.
 *
 * @param[out] deviceID The buffer that receives the device ID
 * @param[inout] size in bytes, of the buffer that deviceID points to
 *
 * @return TEE_Result
 */
TEE_Result TEE_GetDeviceID(void* deviceID, size_t* size);

/**
 * @brief Sign digest with preset RSA private key
 *
 * @note OEMs should use the below RSA modulus n and private key exponent d
 * during integration test with alipay, the algorithm used when signing the
 * digest should be `TEE_ALG_RSASSA_PKCS1_V1_5_SHA256`. In release version,
 * OEMs should generate a new RSA key pair(RSA 2048). The private key should
 * be kept secretly from being leaked. The public key should be deliverd to
 * alipay in PEM format.
 *
 * @param[in] digest The digest to be signed
 * @param[in] digestLen The length of digest in bytes
 * @param[out] signature The buffer receives the returned signature
 * @param[inout] signatureLen Size, in bytes, of the buffer that signature
 * points to
 *
 * @return TEE_Result
 */

/**
 unsigned char n[] = {
 0xd5, 0x90, 0xab, 0x4b, 0x5b, 0xa8, 0x24, 0xd2, 0x14, 0x85, 0x9e, 0x0a,
 0x6a, 0xa0, 0xa4, 0x65, 0xb2, 0x61, 0xee, 0xa7, 0xd5, 0x4e, 0xa9, 0xef,
 0xe5, 0x49, 0x56, 0x2c, 0x06, 0x87, 0x19, 0x53, 0xa1, 0x1f, 0xb5, 0x79,
 0x46, 0x5f, 0x7e, 0x6c, 0x3d, 0x89, 0x01, 0x88, 0x28, 0x04, 0xe9, 0xfe,
 0xda, 0x9e, 0x3c, 0xda, 0x63, 0xcd, 0xc7, 0x00, 0xe4, 0xb5, 0xcc, 0x6a,
 0x57, 0x4c, 0xd1, 0x5d, 0x0d, 0xfe, 0x61, 0x85, 0x86, 0x8a, 0x86, 0xed,
 0x38, 0x21, 0x80, 0x43, 0xd1, 0x97, 0x9a, 0x64, 0x14, 0xe1, 0x9e, 0x74,
 0x54, 0xe0, 0xc5, 0x2a, 0xb1, 0x5f, 0x5f, 0xdb, 0x5c, 0x8f, 0x56, 0xb5,
 0x60, 0xc3, 0x37, 0x94, 0x21, 0x55, 0x37, 0xd6, 0xa4, 0x31, 0xb9, 0x5c,
 0x11, 0x3b, 0x7e, 0xe0, 0x24, 0x21, 0x38, 0x93, 0xf1, 0x87, 0x73, 0x02,
 0xbd, 0xaf, 0xd4, 0x5d, 0x98, 0xef, 0xcc, 0x6e, 0xe5, 0x8f, 0xbf, 0x6e,
 0xa5, 0xf4, 0x31, 0xc2, 0x6e, 0xfd, 0x2f, 0xea, 0x5b, 0x5d, 0x75, 0x4f,
 0x4d, 0x8f, 0x29, 0xb2, 0x6b, 0x73, 0x69, 0xa0, 0x0f, 0x8c, 0x2f, 0xdf,
 0xeb, 0xfe, 0x63, 0xad, 0xea, 0xc0, 0x58, 0x0d, 0x5d, 0xb8, 0xcf, 0xad,
 0x21, 0x7f, 0x0f, 0x0e, 0x02, 0x62, 0xee, 0xf2, 0xef, 0x9f, 0x2b, 0x7e,
 0x1c, 0x58, 0xe8, 0xcc, 0x1a, 0xd4, 0xf0, 0xab, 0x55, 0x0f, 0x22, 0xf9,
 0x51, 0x39, 0x5b, 0xb0, 0xb5, 0x88, 0x0e, 0x14, 0xc9, 0x22, 0xe7, 0x09,
 0xef, 0x23, 0x90, 0x8e, 0x39, 0x64, 0xae, 0x65, 0xc1, 0x4c, 0xfe, 0x25,
 0x47, 0x40, 0xdf, 0x6f, 0x11, 0xba, 0xb5, 0x88, 0x9f, 0xfe, 0x22, 0x91,
 0x1f, 0x7a, 0x42, 0x45, 0xdc, 0xe5, 0x11, 0x05, 0x8b, 0x19, 0x84, 0xb0,
 0x6c, 0x9d, 0xf4, 0x08, 0x09, 0xf4, 0x40, 0x8e, 0x84, 0xc2, 0xb8, 0xc8,
 0xcf, 0x5b, 0xe9, 0xf1};

 unsigned char d[] = {
 0x43, 0xe2, 0x98, 0x90, 0x7b, 0xb2, 0x17, 0x02, 0x30, 0x43, 0xc8, 0xd8,
 0xc6, 0xcc, 0x09, 0x75, 0xca, 0x1e, 0x17, 0x1e, 0x82, 0x4f, 0x5e, 0xf5,
 0x42, 0x8c, 0xed, 0x37, 0x51, 0x5b, 0xe0, 0x51, 0x15, 0x06, 0x5f, 0x49,
 0x0d, 0x75, 0x8d, 0x5a, 0x1a, 0xb5, 0x52, 0x27, 0x55, 0x91, 0x3a, 0x50,
 0x28, 0x6d, 0xe4, 0x2a, 0x07, 0x4f, 0x81, 0xd2, 0x66, 0xe0, 0xe2, 0xf9,
 0x6a, 0x86, 0xa0, 0x86, 0x53, 0xcc, 0x68, 0x73, 0x69, 0x30, 0xdf, 0x72,
 0xc8, 0x44, 0xdd, 0xe0, 0xb0, 0xde, 0xdf, 0xd4, 0xb0, 0x4e, 0x87, 0x6f,
 0xb3, 0x0b, 0x3f, 0xa1, 0x32, 0x80, 0x7e, 0x97, 0xdb, 0xf4, 0x34, 0x3b,
 0xb3, 0x66, 0x5a, 0x64, 0x5b, 0xb4, 0x1a, 0xeb, 0xbf, 0x85, 0x8e, 0xc6,
 0x15, 0x34, 0x34, 0x40, 0x4b, 0x3b, 0xc4, 0x20, 0x42, 0xc6, 0x2b, 0x68,
 0xd3, 0xa2, 0xf0, 0x7e, 0x4f, 0xfe, 0xe9, 0x9c, 0x41, 0xc0, 0x63, 0x9b,
 0xa4, 0x84, 0x5d, 0xbd, 0xf7, 0x1e, 0xb1, 0x13, 0x5d, 0x9d, 0xa0, 0x53,
 0x40, 0x4d, 0x8e, 0xb7, 0x57, 0x3f, 0x7e, 0x78, 0xd7, 0x69, 0xf9, 0x15,
 0x16, 0xde, 0x37, 0x22, 0xe6, 0x49, 0x84, 0x59, 0x70, 0xe3, 0xda, 0xde,
 0x28, 0x3e, 0x71, 0x60, 0x0f, 0xbe, 0x5c, 0x7e, 0x55, 0x1a, 0x96, 0x49,
 0x5f, 0xec, 0x55, 0x25, 0xf4, 0x82, 0x66, 0xb4, 0xfe, 0x24, 0xde, 0x53,
 0xbb, 0xb3, 0x85, 0xfd, 0xc5, 0x23, 0x56, 0x76, 0x8b, 0x5d, 0x5a, 0xe0,
 0xd4, 0xa0, 0x04, 0x78, 0x11, 0x8b, 0x1a, 0xbc, 0xe2, 0x6d, 0x11, 0xb1,
 0x90, 0x40, 0x78, 0xa1, 0xcd, 0x98, 0x84, 0x6f, 0xc3, 0x4e, 0xb2, 0xbf,
 0xe9, 0x16, 0xa7, 0x5e, 0xb2, 0xd9, 0x4e, 0x68, 0xf7, 0xfd, 0x66, 0x33,
 0x94, 0x1a, 0xa0, 0xe8, 0xfa, 0xed, 0xf4, 0x3f, 0x9b, 0x8c, 0x7a, 0x31,
 0x88, 0x4f, 0x01, 0x81};

 unsigned char e[] = { 0x01, 0x00, 0x01 };
 */
TEE_Result TEE_AuthenticatorSignDigest(void* digest, size_t digestLen, void* signature,
        size_t* signatureLen);

/**
 * @brief Retrieves the version of authenticator
 *
 * This is the version of the private key used by TEE_AuthenticatorSignDigest,
 * which starts from 1. If the private key is leaked, the server will reject
 * that private key according to the version. A new key has to be applied in
 * TEE_AuthenticatorSignDigest and the version should be incremented by 1.
 *
 * @return version
 */
int32_t TEE_GetAuthenticatorVersion(void);

/**
 * @brief Retrieve last identified fingerprint ID from fingerprint sensor
 *
 * @param[out] id fingerprint ID
 *
 * @return TEE_ERROR_TIMEOUT: The function is called after 1 second delay
 * @return TEE_SUCCESS: success
 */
TEE_Result TEE_GetFpLastIdentifiedResult(int32_t* id);

/**
 * @brief This function is implemented by alipay, OEM should invoke this
 * function in TA's entry point.
 *
 * @note OEM should check the validity of the input and output buffer.
 *
 * @param[in] in The exact data from alipay's android application
 * @param[in] in_len The size of the buffer that in points
 * @param[out] out The buffer that receives output
 * @param[inout] out_len Size, in bytes, of the buffer that out points to.
 * Recommended value is 4K.
 *
 * @return TEE_Result
 */
TEE_Result alipay_tz_invoke_command(uint8_t* in, size_t in_len, uint8_t* out, size_t* out_len);

#ifdef __cplusplus
}
#endif
#endif
