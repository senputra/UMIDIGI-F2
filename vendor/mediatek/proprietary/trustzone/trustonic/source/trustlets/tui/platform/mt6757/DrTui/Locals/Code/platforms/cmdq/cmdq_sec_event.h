/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein is
 * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
 * the prior written permission of MediaTek inc. and/or its licensors, any
 * reproduction, modification, use or disclosure of MediaTek Software, and
 * information contained herein, in whole or in part, shall be strictly
 * prohibited.
 *
 * MediaTek Inc. (C) 2019. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
 * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
 * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
 * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
 * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
 * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
 * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
 * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
 * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
 * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
 * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
 * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek
 * Software") have been modified by MediaTek Inc. All revisions are subject to
 * any receiver's applicable license agreements with MediaTek Inc.
 */

/* Display start frame */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_RDMA0_SOF, 0)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_RDMA1_SOF, 1)

/* MDP start frame */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RDMA0_SOF, 3)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RDMA1_SOF, 4)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RSZ1_SOF, 6)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RSZ2_SOF, 7)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_TDSHP_SOF, 8)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_COLOR_SOF, 9)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT0_SOF, 11)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT1_SOF, 12)

/* Display start frame */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL0_SOF, 13)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL1_SOF, 14)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL0_2L_SOF, 15)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL1_2L_SOF, 16)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_WDMA0_SOF, 17)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_WDMA1_SOF, 18)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_COLOR_SOF, 19)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_CCORR_SOF, 21)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_AAL_SOF, 23)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_GAMMA_SOF, 24)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_DITHER_SOF, 28)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_UFOE_SOF, 30)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_PWM0_SOF, 32)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_DSI0_SOF, 33)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_DSI1_SOF, 34)

/* Display frame done */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_RDMA0_EOF, 35)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_RDMA1_EOF, 36)

/* MDP frame done */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RDMA0_EOF, 38)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RDMA1_EOF, 39)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RSZ1_EOF, 41)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RSZ2_EOF, 42)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_TDSHP_EOF, 43)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_COLOR_EOF, 44)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT0_WRITE_EOF, 46)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT0_READ_EOF, 47)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT1_WRITE_EOF, 48)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT1_READ_EOF, 49)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL0_EOF, 50)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL1_EOF, 51)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL0_2L_EOF, 52)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_OVL1_2L_EOF, 53)

/* Display frame done */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_WDMA0_EOF, 54)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_WDMA1_EOF, 55)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_COLOR_EOF, 56)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_CCORR_EOF, 58)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_AAL_EOF, 60)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_GAMMA_EOF, 62)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_DITHER_EOF, 65)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_UFOE_EOF, 67)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_DSI0_EOF, 69)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_DSI1_EOF, 70)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_DPI0_EOF, 71)

/* Mutex frame done */
/* DISPSYS */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX0_STREAM_EOF, 130)
/* DISPSYS */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX1_STREAM_EOF, 131)
/* DISPSYS */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX2_STREAM_EOF, 132)
/* DISPSYS */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX3_STREAM_EOF, 133)
/* DISPSYS, please refer to disp_hal.h */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX4_STREAM_EOF, 134)
/* DpFramework */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX5_STREAM_EOF, 135)
/* DpFramework */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX6_STREAM_EOF, 136)
/* DpFramework */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX7_STREAM_EOF, 137)
/* DpFramework */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX8_STREAM_EOF, 138)
/* DpFramework via CMDQ_IOCTL_LOCK_MUTEX */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX9_STREAM_EOF, 139)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX10_STREAM_EOF, 140)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX11_STREAM_EOF, 141)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX12_STREAM_EOF, 142)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX13_STREAM_EOF, 143)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX14_STREAM_EOF, 144)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MUTEX15_STREAM_EOF, 145)

/* Display underrun */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_RDMA0_UNDERRUN, 146)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_RDMA1_UNDERRUN, 147)

/* Display TE */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI_TE, 151)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI0_TO_GCE_MMCK0, 152)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI0_TO_GCE_MMCK1, 153)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI0_TO_GCE_MMCK2, 154)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI0_TO_GCE_MMCK3, 155)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI0_TO_GCE_MMCK4, 156)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI1_TE, 157)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI1_TO_GCE_MMCK0, 158)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI1_TO_GCE_MMCK1, 159)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI1_TO_GCE_MMCK2, 160)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI1_TO_GCE_MMCK3, 161)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DSI1_TO_GCE_MMCK4, 162)

/* Reset Event */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_WDMA0_RST_DONE, 163)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_WDMA1_RST_DONE, 164)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT1_RST_DONE, 165)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_WROT0_RST_DONE, 166)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RDMA1_RST_DONE, 168)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_MDP_RDMA0_RST_DONE, 169)

/* Display Mutex */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD0, 171)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD1, 172)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD2, 173)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD3, 174)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD4, 175)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD5, 176)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD6, 177)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD7, 178)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD8, 179)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD9, 180)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD10, 181)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD11, 182)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD12, 183)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD13, 184)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD14, 185)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_ALL_MODULE_UPD15, 186)

DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE0, 187)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE1, 188)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE2, 189)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE3, 190)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE4, 191)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE5, 192)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE6, 193)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE7, 194)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE8, 195)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE9, 196)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE10, 197)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE11, 198)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE12, 199)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE13, 200)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE14, 201)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE15, 202)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE16, 203)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE17, 204)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE18, 205)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE19, 206)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE20, 207)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE21, 208)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE22, 209)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE23, 210)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE24, 211)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE25, 212)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE26, 213)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE27, 214)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE28, 215)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE29, 216)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE30, 217)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE31, 218)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE32, 219)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE33, 220)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DISP_MUTEX_REG_UPD_FOR_MODULE34, 221)

/* ISP (IMGSYS) frame done */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD0_EOF, 257)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD1_EOF, 258)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD2_EOF, 259)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD3_EOF, 260)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD4_EOF, 261)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD5_EOF, 262)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD6_EOF, 263)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD7_EOF, 264)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD8_EOF, 265)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD9_EOF, 266)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD10_EOF, 267)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD11_EOF, 268)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD12_EOF, 269)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD13_EOF, 270)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DIP_CQ_THREAD14_EOF, 271)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_DVE_EOF, 272)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_WMF_EOF, 273)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_GEPF_EOF, 274)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_GEPF_TEMP_EOF, 275)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_GEPF_BYPASS_EOF, 276)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_RSC_EOF, 277)

/* VENC frame done */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_VENC_EOF, 289)

/* JPEG frame done */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_JPEG_DEC_EOF, 290)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_JPEG_ENC_EOF, 291)

/* VENC engine events */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_VENC_MB_DONE, 292)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_VENC_128BYTE_CNT_DONE, 293)

/* ISP (CAMSYS) frame done */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_ISP_FRAME_DONE_A, 321)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_ISP_FRAME_DONE_B, 322)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_ISP_CAMSV_0_PASS1_DONE, 323)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_ISP_CAMSV_1_PASS1_DONE, 324)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_ISP_CAMSV_2_PASS1_DONE, 325)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_ISP_TSF_DONE, 326)

/* ISP (CAMSYS) engine events */
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_0_FIFO_FULL, 327)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_1_FIFO_FULL, 328)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_2_FIFO_FULL, 329)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_3_FIFO_FULL, 330)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_4_FIFO_FULL, 331)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_5_FIFO_FULL, 332)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_6_FIFO_FULL, 333)
DECLARE_CMDQ_EVENT(CMDQ_EVENT_SENINF_7_FIFO_FULL, 334)

/* Keep this at the end of HW events, sync with cmdq_event_common.h */
DECLARE_CMDQ_EVENT(CMDQ_MAX_HW_EVENT_COUNT, 400)

/* SW Sync Tokens (Pre-defined) */
/* Config thread notify trigger thread */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_CONFIG_DIRTY, 401)
/* Trigger thread notify config thread */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_STREAM_EOF, 402)
/* Block Trigger thread until the ESD check finishes. */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_ESD_EOF, 403)
/* check CABC setup finish */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_CABC_EOF, 404)
/* Block Trigger thread until the path freeze finishes */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_FREEZE_EOF, 405)
/* Pass-2 notifies VENC frame is ready to be encoded */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_VENC_INPUT_READY, 406)
/* VENC notifies Pass-2 encode done so next frame may start */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_VENC_EOF, 407)

/* Notify normal CMDQ there are some secure task done */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_SECURE_THR_EOF, 408)
/* Lock WSM resource */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_SECURE_WSM_LOCK, 409)

/* SW Sync Tokens (User-defined) */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_USER_0, 410)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_USER_1, 411)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_POLL_MONITOR, 412)

/* Secure video path notify SW token */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_OVL0_2NONSEC_END, 420)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_OVL1_2NONSEC_END, 421)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_2LOVL0_2NONSEC_END, 422)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_2LOVL1_2NONSEC_END, 423)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_RDMA0_2NONSEC_END, 424)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_RDMA1_2NONSEC_END, 425)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_WDMA0_2NONSEC_END, 426)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_WDMA1_2NONSEC_END, 427)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_DISP_EXT_STREAM_EOF, 428)

/* Event for CMDQ to block executing command when append command
* Plz sync CMDQ_SYNC_TOKEN_APPEND_THR(id) in cmdq_core source file. */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR0, 432)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR1, 433)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR2, 434)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR3, 435)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR4, 436)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR5, 437)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR6, 438)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR7, 439)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR8, 440)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR9, 441)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR10, 442)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR11, 443)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR12, 444)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR13, 445)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR14, 446)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_APPEND_THR15, 447)

/* GPR access tokens (for HW register backup) */
/* There are 15 32-bit GPR, 3 GPR form a set (64-bit for address, 32-bit for value) */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_GPR_SET_0, 450)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_GPR_SET_1, 451)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_GPR_SET_2, 452)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_GPR_SET_3, 453)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_GPR_SET_4, 454)

/* Resource lock event to control resource in GCE thread */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_RESOURCE_WROT0, 460)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_RESOURCE_WROT1, 461)

/* Event for CMDQ delay implement
* Plz sync CMDQ_SYNC_TOKEN_DELAY_THR(id) in cmdq_core source file. */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR0, 470)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR1, 471)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR2, 472)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR3, 473)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR4, 474)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR5, 475)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR6, 476)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR7, 477)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR8, 478)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR9, 479)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR10, 480)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR11, 481)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR12, 482)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR13, 483)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR14, 484)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR15, 485)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR16, 486)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR17, 487)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR18, 488)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR19, 489)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR20, 490)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR21, 491)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR22, 492)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR23, 493)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR24, 494)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR25, 495)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR26, 496)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR27, 497)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR28, 498)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR29, 499)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR30, 500)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_DELAY_THR31, 501)
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_TIMER, 502)

/* event id is 9 bit */
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_MAX, (0x1FF))
DECLARE_CMDQ_EVENT(CMDQ_SYNC_TOKEN_INVALID, (-1))
